/**
 * @author Michał Żaloudik <michal.zaloudik@redcart.pl>
 */
"use strict";

System.register([], function (_export, _context) {
	var utls, jsonrpc, assert;
	return {
		setters: [],
		execute: function () {
			utls = require('utls');
			jsonrpc = require(__dirname + '/../index.js');
			assert = require('assert');

			describe('JsonRpcRequest', function () {
				it('invalid message type', function () {
					assert.throws(function () {
						new jsonrpc.Request('');
					});
				});
				it('not valid syntax', function () {
					assert.throws(function () {
						new jsonrpc.Request({});
					});
				});
				it('is', function () {
					assert.equal(new jsonrpc.Request().isNotification, false);
					assert.equal(new jsonrpc.Request().isRequest, true);
					assert.equal(new jsonrpc.Request().isResponse, false);
				});
				it('defaults', function () {
					var req = new jsonrpc.Request();
					assert.equal(req.getVersion(), jsonrpc.version);
					assert.equal(req.getResource(), '__global__');
					assert.deepStrictEqual(req.getParams(), {});
					assert.equal(utls.getType(req.getId()), 'Integer');
				});
				describe('restricted methods', function () {
					var obj = new jsonrpc.Request();
					var methods = 'result,error'.split(',');
					it('setVersion', function () {
						assert.throws(function () {
							obj.setVersion("0.0.0");
						});
					});
					methods.forEach(function (method, key) {
						it('get' + utls.ucFirst(method), function () {
							assert.throws(function () {
								obj['get' + utls.ucFirst(method)]();
							});
						});
						it('set' + utls.ucFirst(method), function () {
							assert.throws(function () {
								obj['set' + utls.ucFirst(method)]();
							});
						});
					});
				});
				describe('manual creation', function () {
					it('constructor params', function (done) {
						assert.deepEqual(new jsonrpc.Request({
							id: 1,
							resource: "someNS",
							method: "someMethod",
							params: { some: "params" },
							callback: function callback(res) {
								assert.ok(res instanceof jsonrpc.Response);
								assert.equal(res.getId(), 1);
								done();
							}
						}).toJSON(), {
							id: 1,
							version: jsonrpc.version,
							resource: "someNS",
							method: "someMethod",
							params: { "some": "params" }
						});
						setImmediate(function () {
							new jsonrpc.Response({
								id: 1,
								result: ""
							});
						});
					});
					it('methods', function (done) {
						var req = new jsonrpc.Request();
						req.setId(2);
						assert.throws(function () {
							req.setId('1');
						});
						req.setResource("someResource");
						assert.throws(function () {
							req.setResource(null);
						});
						req.setMethod("someMethod");
						assert.throws(function () {
							req.setMethod(null);
						});
						req.setParams({ some: "params" });
						assert.throws(function () {
							req.setParams(null);
						});
						req.setCallback(function (res) {
							assert.ok(res instanceof jsonrpc.Response);
							assert.equal(res.getId(), 2);
							done();
						});
						assert.throws(function () {
							req.setCallback('cb', 'tls');
						});
						assert.equal(req.getResource(), "someResource");
						assert.equal(req.getMethod(), "someMethod");
						assert.deepStrictEqual(req.getParams(), { some: "params" });
						assert.equal(req.getId(), 2);
						assert.equal(utls.getType(req.getCallback()), "Function");
						setImmediate(function () {
							new jsonrpc.Response({
								id: 2,
								result: ""
							});
						});
					});
				});
			});
		}
	};
});
//# sourceMappingURL=data:application/json;base64,
