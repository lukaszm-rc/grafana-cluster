'use strict';

System.register([], function (_export, _context) {
  return {
    setters: [],
    execute: function () {
      /* */
      (function (process) {
        function normalizeArray(parts, allowAboveRoot) {
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === '.') {
              parts.splice(i, 1);
            } else if (last === '..') {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }
          if (allowAboveRoot) {
            for (; up--; up) {
              parts.unshift('..');
            }
          }
          return parts;
        }
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        var splitPath = function splitPath(filename) {
          return splitPathRe.exec(filename).slice(1);
        };
        exports.resolve = function () {
          var resolvedPath = '',
              resolvedAbsolute = false;
          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : process.cwd();
            if (typeof path !== 'string') {
              throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
              continue;
            }
            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
          }
          resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
            return !!p;
          }), !resolvedAbsolute).join('/');
          return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
        };
        exports.normalize = function (path) {
          var isAbsolute = exports.isAbsolute(path),
              trailingSlash = substr(path, -1) === '/';
          path = normalizeArray(filter(path.split('/'), function (p) {
            return !!p;
          }), !isAbsolute).join('/');
          if (!path && !isAbsolute) {
            path = '.';
          }
          if (path && trailingSlash) {
            path += '/';
          }
          return (isAbsolute ? '/' : '') + path;
        };
        exports.isAbsolute = function (path) {
          return path.charAt(0) === '/';
        };
        exports.join = function () {
          var paths = Array.prototype.slice.call(arguments, 0);
          return exports.normalize(filter(paths, function (p, index) {
            if (typeof p !== 'string') {
              throw new TypeError('Arguments to path.join must be strings');
            }
            return p;
          }).join('/'));
        };
        exports.relative = function (from, to) {
          from = exports.resolve(from).substr(1);
          to = exports.resolve(to).substr(1);
          function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
              if (arr[start] !== '') break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== '') break;
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }
          var fromParts = trim(from.split('/'));
          var toParts = trim(to.split('/'));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }
          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
          }
          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join('/');
        };
        exports.sep = '/';
        exports.delimiter = ':';
        exports.dirname = function (path) {
          var result = splitPath(path),
              root = result[0],
              dir = result[1];
          if (!root && !dir) {
            return '.';
          }
          if (dir) {
            dir = dir.substr(0, dir.length - 1);
          }
          return root + dir;
        };
        exports.basename = function (path, ext) {
          var f = splitPath(path)[2];
          if (ext && f.substr(-1 * ext.length) === ext) {
            f = f.substr(0, f.length - ext.length);
          }
          return f;
        };
        exports.extname = function (path) {
          return splitPath(path)[3];
        };
        function filter(xs, f) {
          if (xs.filter) return xs.filter(f);
          var res = [];
          for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
          }
          return res;
        }
        var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
          return str.substr(start, len);
        } : function (str, start, len) {
          if (start < 0) start = str.length + start;
          return str.substr(start, len);
        };
        ;
      })(require('process'));
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9wYXRoLWJyb3dzZXJpZnlAMC4wLjAvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBLE9BQUMsVUFBUyxPQUFULEVBQWtCO0FBQ2pCLGlCQUFTLGNBQVQsQ0FBd0IsS0FBeEIsRUFBK0IsY0FBL0IsRUFBK0M7QUFDN0MsY0FBSSxLQUFLLENBQUwsQ0FEeUM7QUFFN0MsZUFBSyxJQUFJLElBQUksTUFBTSxNQUFOLEdBQWUsQ0FBZixFQUFrQixLQUFLLENBQUwsRUFBUSxHQUF2QyxFQUE0QztBQUMxQyxnQkFBSSxPQUFPLE1BQU0sQ0FBTixDQUFQLENBRHNDO0FBRTFDLGdCQUFJLFNBQVMsR0FBVCxFQUFjO0FBQ2hCLG9CQUFNLE1BQU4sQ0FBYSxDQUFiLEVBQWdCLENBQWhCLEVBRGdCO2FBQWxCLE1BRU8sSUFBSSxTQUFTLElBQVQsRUFBZTtBQUN4QixvQkFBTSxNQUFOLENBQWEsQ0FBYixFQUFnQixDQUFoQixFQUR3QjtBQUV4QixtQkFGd0I7YUFBbkIsTUFHQSxJQUFJLEVBQUosRUFBUTtBQUNiLG9CQUFNLE1BQU4sQ0FBYSxDQUFiLEVBQWdCLENBQWhCLEVBRGE7QUFFYixtQkFGYTthQUFSO1dBUFQ7QUFZQSxjQUFJLGNBQUosRUFBb0I7QUFDbEIsbUJBQU8sSUFBUCxFQUFhLEVBQWIsRUFBaUI7QUFDZixvQkFBTSxPQUFOLENBQWMsSUFBZCxFQURlO2FBQWpCO1dBREY7QUFLQSxpQkFBTyxLQUFQLENBbkI2QztTQUEvQztBQXFCQSxZQUFJLGNBQWMsK0RBQWQsQ0F0QmE7QUF1QmpCLFlBQUksWUFBWSxTQUFaLFNBQVksQ0FBUyxRQUFULEVBQW1CO0FBQ2pDLGlCQUFPLFlBQVksSUFBWixDQUFpQixRQUFqQixFQUEyQixLQUEzQixDQUFpQyxDQUFqQyxDQUFQLENBRGlDO1NBQW5CLENBdkJDO0FBMEJqQixnQkFBUSxPQUFSLEdBQWtCLFlBQVc7QUFDM0IsY0FBSSxlQUFlLEVBQWY7Y0FDQSxtQkFBbUIsS0FBbkIs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LENBQVAsQ0FEK0I7U0FBZixDQTlIRDtBQWlJakIsaUJBQVMsTUFBVCxDQUFnQixFQUFoQixFQUFvQixDQUFwQixFQUF1QjtBQUNyQixjQUFJLEdBQUcsTUFBSCxFQUNGLE9BQU8sR0FBRyxNQUFILENBQVUsQ0FBVixDQUFQLENBREY7QUFFQSxjQUFJLE1BQU0sRUFBTixDQUhpQjtBQUlyQixlQUFLLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxHQUFHLE1BQUgsRUFBVyxHQUEvQixFQUFvQztBQUNsQyxnQkFBSSxFQUFFLEdBQUcsQ0FBSCxDQUFGLEVBQVMsQ0FBVCxFQUFZLEVBQVosQ0FBSixFQUNFLElBQUksSUFBSixDQUFTLEdBQUcsQ0FBSCxDQUFULEVBREY7V0FERjtBQUlBLGlCQUFPLEdBQVAsQ0FScUI7U0FBdkI7QUFVQSxZQUFJLFNBQVMsS0FBSyxNQUFMLENBQVksQ0FBQyxDQUFELENBQVosS0FBb0IsR0FBcEIsR0FBMEIsVUFBUyxHQUFULEVBQWMsS0FBZCxFQUFxQixHQUFyQixFQUEwQjtBQUMvRCxpQkFBTyxJQUFJLE1BQUosQ0FBVyxLQUFYLEVBQWtCLEdBQWxCLENBQVAsQ0FEK0Q7U0FBMUIsR0FFbkMsVUFBUyxHQUFULEVBQWMsS0FBZCxFQUFxQixHQUFyQixFQUEwQjtBQUM1QixjQUFJLFFBQVEsQ0FBUixFQUNGLFFBQVEsSUFBSSxNQUFKLEdBQWEsS0FBYixDQURWO0FBRUEsaUJBQU8sSUFBSSxNQUFKLENBQVcsS0FBWCxFQUFrQixHQUFsQixDQUFQLENBSDRCO1NBQTFCLENBN0lhO0FBa0pqQixTQWxKaUI7T0FBbEIsQ0FBRCxDQW1KRyxRQUFRLFNBQVIsQ0FuSkgiLCJmaWxlIjoibnBtL3BhdGgtYnJvd3NlcmlmeUAwLjAuMC9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gICAgdmFyIHVwID0gMDtcbiAgICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHVwKys7XG4gICAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgdXAtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgICAgcGFydHMudW5zaGlmdCgnLi4nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzO1xuICB9XG4gIHZhciBzcGxpdFBhdGhSZSA9IC9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvO1xuICB2YXIgc3BsaXRQYXRoID0gZnVuY3Rpb24oZmlsZW5hbWUpIHtcbiAgICByZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSk7XG4gIH07XG4gIGV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXNvbHZlZFBhdGggPSAnJyxcbiAgICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7XG4gICAgfVxuICAgIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuICEhcDtcbiAgICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTtcbiAgICByZXR1cm4gKChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoKSB8fCAnLic7XG4gIH07XG4gIGV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24ocGF0aCkge1xuICAgIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLFxuICAgICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuICAgIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gISFwO1xuICAgIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuICAgIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgICAgcGF0aCA9ICcuJztcbiAgICB9XG4gICAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgICAgcGF0aCArPSAnLyc7XG4gICAgfVxuICAgIHJldHVybiAoaXNBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG4gIH07XG4gIGV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfTtcbiAgZXhwb3J0cy5qb2luID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICByZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHA7XG4gICAgfSkuam9pbignLycpKTtcbiAgfTtcbiAgZXhwb3J0cy5yZWxhdGl2ZSA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gICAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gICAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcbiAgICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgICAgdmFyIHN0YXJ0ID0gMDtcbiAgICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgICBpZiAoYXJyW2VuZF0gIT09ICcnKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ID4gZW5kKVxuICAgICAgICByZXR1cm4gW107XG4gICAgICByZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCArIDEpO1xuICAgIH1cbiAgICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICAgIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcbiAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICAgIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgICB9XG4gICAgb3V0cHV0UGFydHMgPSBvdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtcbiAgICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xuICB9O1xuICBleHBvcnRzLnNlcCA9ICcvJztcbiAgZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG4gIGV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICB2YXIgcmVzdWx0ID0gc3BsaXRQYXRoKHBhdGgpLFxuICAgICAgICByb290ID0gcmVzdWx0WzBdLFxuICAgICAgICBkaXIgPSByZXN1bHRbMV07XG4gICAgaWYgKCFyb290ICYmICFkaXIpIHtcbiAgICAgIHJldHVybiAnLic7XG4gICAgfVxuICAgIGlmIChkaXIpIHtcbiAgICAgIGRpciA9IGRpci5zdWJzdHIoMCwgZGlyLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gcm9vdCArIGRpcjtcbiAgfTtcbiAgZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uKHBhdGgsIGV4dCkge1xuICAgIHZhciBmID0gc3BsaXRQYXRoKHBhdGgpWzJdO1xuICAgIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgICBmID0gZi5zdWJzdHIoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIGY7XG4gIH07XG4gIGV4cG9ydHMuZXh0bmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICByZXR1cm4gc3BsaXRQYXRoKHBhdGgpWzNdO1xuICB9O1xuICBmdW5jdGlvbiBmaWx0ZXIoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKVxuICAgICAgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGYoeHNbaV0sIGksIHhzKSlcbiAgICAgICAgcmVzLnB1c2goeHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIHZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJyA/IGZ1bmN0aW9uKHN0ciwgc3RhcnQsIGxlbikge1xuICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICB9IDogZnVuY3Rpb24oc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgaWYgKHN0YXJ0IDwgMClcbiAgICAgIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICB9O1xuICA7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
