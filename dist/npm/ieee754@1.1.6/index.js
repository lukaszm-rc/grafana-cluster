"use strict";

System.register([], function (_export, _context) {
  return {
    setters: [],
    execute: function () {
      /* */
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];

        i += d;

        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }

          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
      };
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9pZWVlNzU0QDEuMS42L2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxjQUFRLElBQVIsR0FBZSxVQUFVLE1BQVYsRUFBa0IsTUFBbEIsRUFBMEIsSUFBMUIsRUFBZ0MsSUFBaEMsRUFBc0MsTUFBdEMsRUFBOEM7QUFDM0QsWUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUQyRDtBQUUzRCxZQUFJLE9BQU8sU0FBUyxDQUFULEdBQWEsSUFBYixHQUFvQixDQUFwQixDQUZnRDtBQUczRCxZQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUwsQ0FBRCxHQUFjLENBQWQsQ0FIZ0Q7QUFJM0QsWUFBSSxRQUFRLFFBQVEsQ0FBUixDQUorQztBQUszRCxZQUFJLFFBQVEsQ0FBQyxDQUFELENBTCtDO0FBTTNELFlBQUksSUFBSSxPQUFRLFNBQVMsQ0FBVCxHQUFjLENBQXRCLENBTm1EO0FBTzNELFlBQUksSUFBSSxPQUFPLENBQUMsQ0FBRCxHQUFLLENBQVosQ0FQbUQ7QUFRM0QsWUFBSSxJQUFJLE9BQU8sU0FBUyxDQUFULENBQVgsQ0FSdUQ7O0FBVTNELGFBQUssQ0FBTCxDQVYyRDs7QUFZM0QsWUFBSSxJQUFLLENBQUMsS0FBTSxDQUFDLEtBQUQsQ0FBUCxHQUFrQixDQUFsQixDQVprRDtBQWEzRCxjQUFPLENBQUMsS0FBRCxDQWJvRDtBQWMzRCxpQkFBUyxJQUFULENBZDJEO0FBZTNELGVBQU8sUUFBUSxDQUFSLEVBQVcsSUFBSSxJQUFJLEdBQUosR0FBVSxPQUFPLFNBQVMsQ0FBVCxDQUFqQixFQUE4QixLQUFLLENBQUwsRUFBUSxTQUFTLENBQVQsRUFBWSxFQUF4RTs7QUFFQSxZQUFJLElBQUssQ0FBQyxLQUFNLENBQUMsS0FBRCxDQUFQLEdBQWtCLENBQWxCLENBakJrRDtBQWtCM0QsY0FBTyxDQUFDLEtBQUQsQ0FsQm9EO0FBbUIzRCxpQkFBUyxJQUFULENBbkIyRDtBQW9CM0QsZUFBTyxRQUFRLENBQVIsRUFBVyxJQUFJLElBQUks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LEdBQWtCLEtBQUssR0FBTCxDQUFTLENBQVQsRUFBWSxJQUFaLENBQWxCLENBRHFCO0FBRXpCLGdCQUFJLElBQUksS0FBSixDQUZxQjtXQUFwQixNQUdBO0FBQ0wsZ0JBQUksUUFBUSxLQUFLLEdBQUwsQ0FBUyxDQUFULEVBQVksUUFBUSxDQUFSLENBQXBCLEdBQWlDLEtBQUssR0FBTCxDQUFTLENBQVQsRUFBWSxJQUFaLENBQWpDLENBREM7QUFFTCxnQkFBSSxDQUFKLENBRks7V0FIQTtTQXRCVDs7QUErQkEsZUFBTyxRQUFRLENBQVIsRUFBVyxPQUFPLFNBQVMsQ0FBVCxDQUFQLEdBQXFCLElBQUksSUFBSixFQUFVLEtBQUssQ0FBTCxFQUFRLEtBQUssR0FBTCxFQUFVLFFBQVEsQ0FBUixFQUFXLEVBQTlFOztBQUVBLFlBQUksQ0FBQyxJQUFLLElBQUwsR0FBYSxDQUFkLENBN0MrRDtBQThDbkUsZ0JBQVEsSUFBUixDQTlDbUU7QUErQ25FLGVBQU8sT0FBTyxDQUFQLEVBQVUsT0FBTyxTQUFTLENBQVQsQ0FBUCxHQUFxQixJQUFJLElBQUosRUFBVSxLQUFLLENBQUwsRUFBUSxLQUFLLEdBQUwsRUFBVSxRQUFRLENBQVIsRUFBVyxFQUE3RTs7QUFFQSxlQUFPLFNBQVMsQ0FBVCxHQUFhLENBQWIsQ0FBUCxJQUEwQixJQUFJLEdBQUosQ0FqRHlDO09BQXJEIiwiZmlsZSI6Im5wbS9pZWVlNzU0QDEuMS42L2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKi8gXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
