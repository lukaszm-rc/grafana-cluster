'use strict';

System.register([], function (_export, _context) {
  var arraySome, UNORDERED_COMPARE_FLAG, PARTIAL_COMPARE_FLAG;

  function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    var index = -1,
        isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
        arrLength = array.length,
        othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var stacked = stack.get(array);
    if (stacked) {
      return stacked == other;
    }
    var result = true;
    stack.set(array, other);
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (isUnordered) {
        if (!arraySome(other, function (othValue) {
          return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    return result;
  }
  return {
    setters: [],
    execute: function () {
      arraySome = require('./_arraySome');
      UNORDERED_COMPARE_FLAG = 1;
      PARTIAL_COMPARE_FLAG = 2;
      module.exports = equalArrays;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9sb2Rhc2hANC4xMS4xL19lcXVhbEFycmF5cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLFdBQVMsV0FBVCxDQUFxQixLQUFyQixFQUE0QixLQUE1QixFQUFtQyxTQUFuQyxFQUE4QyxVQUE5QyxFQUEwRCxPQUExRCxFQUFtRSxLQUFuRSxFQUEwRTtBQUN4RSxRQUFJLFFBQVEsQ0FBQyxDQUFEO1FBQ1IsWUFBWSxVQUFVLG9CQUFWO1FBQ1osY0FBYyxVQUFVLHNCQUFWO1FBQ2QsWUFBWSxNQUFNLE1BQU47UUFDWixZQUFZLE1BQU0sTUFBTixDQUx3RDtBQU14RSxRQUFJLGFBQWEsU0FBYixJQUEwQixFQUFFLGFBQWEsWUFBWSxTQUFaLENBQWYsRUFBdUM7QUFDbkUsYUFBTyxLQUFQLENBRG1FO0tBQXJFO0FBR0EsUUFBSSxVQUFVLE1BQU0sR0FBTixDQUFVLEtBQVYsQ0FBVixDQVRvRTtBQVV4RSxRQUFJLE9BQUosRUFBYTtBQUNYLGFBQU8sV0FBVyxLQUFYLENBREk7S0FBYjtBQUdBLFFBQUksU0FBUyxJQUFULENBYm9FO0FBY3hFLFVBQU0sR0FBTixDQUFVLEtBQVYsRUFBaUIsS0FBakIsRUFkd0U7QUFleEUsV0FBTyxFQUFFLEtBQUYsR0FBVSxTQUFWLEVBQXFCO0FBQzFCLFVBQUksV0FBVyxNQUFNLEtBQU4sQ0FBWDtVQUNBLFdBQVcsTUFBTSxLQUFOLENBQVgsQ0FGc0I7QUFHMUIsVUFBSSxVQUFKLEVBQWdCO0FBQ2QsWUFBSSxXQUFXLFlBQVksV0FBVyxRQUFYLEVBQXFCLFFBQXJCLEVBQStCLEtBQS9CLEVBQXNDLEtBQXRDLEVBQTZDLEtBQTdDLEVBQW9ELEtBQXBELENBQVosR0FBeUUsV0FBVyxRQUFYLEVBQXFCLFFBQXJCLEVBQStCLEtBQS9CLEVBQXNDLEtBQXRDLEVBQTZDLEtBQTdDLEVBQW9ELEtBQXBELENBQXpFLENBREQ7T0FBaEI7QUFHQSxVQUFJLGFBQWEsU0FBYixFQUF3QjtBQUMxQixZQUFJLFFBQUosRUFBYztBQUNaLG1CQURZO1NBQWQ7QUFHQSxpQkFBUyxLQUFULENBSjBCO0FBSzFCLGNBTDBCO09BQTVCO0FBT0EsVUFBSSxXQUFKLEVBQWlCO0FBQ2YsWUFBSSxDQUFDLFVBQVUsS0FBVixFQUFpQixVQUFTLFFBQVQsRUFBbUI7QUFDdkMsaUJBQU8sYUFBYSxRQUFiLElBQXlCLFVBQVUsUUFBVixFQUFvQixRQUFwQixFQUE4QixVQUE5QixFQUEwQyxPQUExQyxFQUFtRCxLQUFuRCxDQUF6QixDQURnQztTQUFuQixDQUFsQixFQUVBO0FBQ0YsbUJBQVMsS0FBVCxDQURFO0FBRUYsZ0JBRkU7U0FGSjtPQURGLE1BT08sSUFBSSxFQUFFLGFBQWEsUUFBYixJQUF5QixVQUFVLFFBQVYsRUFBb0IsUUFBcEIsRUFBOEIsVUFBOUIsRUFBMEMsT0FBMUMsRUFBbUQsS0FBbkQsQ0FBekIsQ0FBRixFQUF1RjtBQUNoRyxpQkFBUyxLQUFULENBRGdHO0FBRWhHLGNBRmdHO09BQTNGO0tBcEJUO0FBeUJBLFVBQU0sUUFBTixFQUFnQixLQUFoQixFQXhDd0U7QUF5Q3hFLFdBQU8sTUFBUCxDQXpDd0U7R0FBMUU7Ozs7QUFISSxrQkFBWSxRQUFRLGNBQVI7QUFDWiwrQkFBeUI7QUFDekIsNkJBQXVCO0FBNEMzQixhQUFPLE9BQVAsR0FBaUIsV0FBakIiLCJmaWxlIjoibnBtL2xvZGFzaEA0LjExLjEvX2VxdWFsQXJyYXlzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKi8gXG52YXIgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyk7XG52YXIgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyA9IDEsXG4gICAgUEFSVElBTF9DT01QQVJFX0ZMQUcgPSAyO1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBlcXVhbEZ1bmMsIGN1c3RvbWl6ZXIsIGJpdG1hc2ssIHN0YWNrKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaXNQYXJ0aWFsID0gYml0bWFzayAmIFBBUlRJQUxfQ09NUEFSRV9GTEFHLFxuICAgICAgaXNVbm9yZGVyZWQgPSBiaXRtYXNrICYgVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbCA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaykgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGlzVW5vcmRlcmVkKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjayk7XG4gICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBiaXRtYXNrLCBzdGFjaykpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICByZXR1cm4gcmVzdWx0O1xufVxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
