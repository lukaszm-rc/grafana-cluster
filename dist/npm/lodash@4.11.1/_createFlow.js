'use strict';

System.register([], function (_export, _context) {
  var LodashWrapper, baseFlatten, getData, getFuncName, isArray, isLaziable, rest, LARGE_ARRAY_SIZE, FUNC_ERROR_TEXT, CURRY_FLAG, PARTIAL_FLAG, ARY_FLAG, REARG_FLAG;

  function createFlow(fromRight) {
    return rest(function (funcs) {
      funcs = baseFlatten(funcs, 1);
      var length = funcs.length,
          index = length,
          prereq = LodashWrapper.prototype.thru;
      if (fromRight) {
        funcs.reverse();
      }
      while (index--) {
        var func = funcs[index];
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
          var wrapper = new LodashWrapper([], true);
        }
      }
      index = wrapper ? index : length;
      while (++index < length) {
        func = funcs[index];
        var funcName = getFuncName(func),
            data = funcName == 'wrapper' ? getData(func) : undefined;
        if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
          wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
        } else {
          wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
        }
      }
      return function () {
        var args = arguments,
            value = args[0];
        if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
          return wrapper.plant(value).value();
        }
        var index = 0,
            result = length ? funcs[index].apply(this, args) : value;
        while (++index < length) {
          result = funcs[index].call(this, result);
        }
        return result;
      };
    });
  }
  return {
    setters: [],
    execute: function () {
      LodashWrapper = require('./_LodashWrapper');
      baseFlatten = require('./_baseFlatten');
      getData = require('./_getData');
      getFuncName = require('./_getFuncName');
      isArray = require('./isArray');
      isLaziable = require('./_isLaziable');
      rest = require('./rest');
      LARGE_ARRAY_SIZE = 200;
      FUNC_ERROR_TEXT = 'Expected a function';
      CURRY_FLAG = 8;
      PARTIAL_FLAG = 32;
      ARY_FLAG = 128;
      REARG_FLAG = 256;
      module.exports = createFlow;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9sb2Rhc2hANC4xMS4xL19jcmVhdGVGbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBY0EsV0FBUyxVQUFULENBQW9CLFNBQXBCLEVBQStCO0FBQzdCLFdBQU8sS0FBSyxVQUFTLEtBQVQsRUFBZ0I7QUFDMUIsY0FBUSxZQUFZLEtBQVosRUFBbUIsQ0FBbkIsQ0FBUixDQUQwQjtBQUUxQixVQUFJLFNBQVMsTUFBTSxNQUFOO1VBQ1QsUUFBUSxNQUFSO1VBQ0EsU0FBUyxjQUFjLFNBQWQsQ0FBd0IsSUFBeEIsQ0FKYTtBQUsxQixVQUFJLFNBQUosRUFBZTtBQUNiLGNBQU0sT0FBTixHQURhO09BQWY7QUFHQSxhQUFPLE9BQVAsRUFBZ0I7QUFDZCxZQUFJLE9BQU8sTUFBTSxLQUFOLENBQVAsQ0FEVTtBQUVkLFlBQUksT0FBTyxJQUFQLElBQWUsVUFBZixFQUEyQjtBQUM3QixnQkFBTSxJQUFJLFNBQUosQ0FBYyxlQUFkLENBQU4sQ0FENkI7U0FBL0I7QUFHQSxZQUFJLFVBQVUsQ0FBQyxPQUFELElBQVksWUFBWSxJQUFaLEtBQXFCLFNBQXJCLEVBQWdDO0FBQ3hELGNBQUksVUFBVSxJQUFJLGFBQUosQ0FBa0IsRUFBbEIsRUFBc0IsSUFBdEIsQ0FBVixDQURvRDtTQUExRDtPQUxGO0FBU0EsY0FBUSxVQUFVLEtBQVYsR0FBa0IsTUFBbEIsQ0FqQmtCO0FBa0IxQixhQUFPLEVBQUUsS0FBRixHQUFVLE1BQVYsRUFBa0I7QUFDdkIsZUFBTyxNQUFNLEtBQU4sQ0FBUCxDQUR1QjtBQUV2QixZQUFJLFdBQVcsWUFBWSxJQUFaLENBQVg7WUFDQSxPQUFPLFlBQVksU0FBWixHQUF3QixRQUFRLElBQVIsQ0FBeEIsR0FBd0MsU0FBeEMsQ0FIWTtBQUl2QixZQUFJLFFBQVEsV0FBVyxLQUFLLENBQUwsQ0FBWCxDQUFSLElBQStCLEtBQUssQ0FBTCxNQUFZLFdBQVcsVUFBWCxHQUF3QixZQUF4QixHQUF1QyxVQUF2QyxDQUFaLElBQWtFLENBQUMsS0FBSyxDQUFMLEVBQVEsTUFBUixJQUFrQixLQUFLLENBQUwsS0FBVyxDQUFYLEVBQWM7QUFDcEksb0JBQVUsUUFBUSxZQUFZLEtBQUssQ0FBTCxDQUFaLENBQVIsRUFBOEIsS0FBOUIsQ0FBb0MsT0FBcEMsRUFBNkMsS0FBSyxDQUFMLENBQTdDLENBQVYsQ0FEb0k7U0FBdEksTUFFTztBQUNMLG9CQUFVLElBQUMsQ0FBSyxNQUFMLElBQWUsQ0FBZixJQUFvQixXQUFXLElBQVgsQ0FBcEIsR0FBd0MsUUFBUSxRQUFSLEdBQXpDLEdBQStELFFBQVEsSUFBUixDQUFhLElBQWIsQ0FBL0QsQ0FETDtTQUZQO09BSkY7QUFVQSxhQUFPLFlBQVc7QUFDaEIsWUFBSSxPQUFPLFNBQVA7WUFDQSxRQUFRLEtBQUssQ0FBTCxDQUFSLENBRlk7QUFHaEIsWUFBSSxXQUFXLEtBQUssTUFBTCxJQUFlLENBQWYsSUFBb0IsUUFBUSxLQUFSLENBQS9CLElBQWlELE1BQU0sTUFBTixJQUFnQixnQkFBaEIsRUFBa0M7QUFDckYsaUJBQU8sUUFBUSxLQUFSLENBQWMsS0FBZCxFQUFxQixLQUFyQixFQUFQLENBRHFGO1NBQXZGO0FBR0EsWUFBSSxRQUFRLENBQVI7WUFDQSxTQUFTLFNBQVMsTUFBTSxLQUFOLEVBQWEsS0FBYixDQUFtQixJQUFuQixFQUF5QixJQUF6QixDQUFULEdBQTBDLEtBQTFDLENBUEc7QUFRaEIsZUFBTyxFQUFFLEtBQUYsR0FBVSxNQUFWLEVBQWtCO0FBQ3ZCLG1CQUFTLE1BQU0sS0FBTixFQUFhLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0IsTUFBeEIsQ0FBVCxDQUR1QjtTQUF6QjtBQUdBLGVBQU8sTUFBUCxDQVhnQjtPQUFYLENBNUJtQjtLQUFoQixDQUFaLENBRDZCO0dBQS9COzs7O0FBYkksc0JBQWdCLFFBQVEsa0JBQVI7QUFDaEIsb0JBQWMsUUFBUSxnQkFBUjtBQUNkLGdCQUFVLFFBQVEsWUFBUjtBQUNWLG9CQUFjLFFBQVEsZ0JBQVI7QUFDZCxnQkFBVSxRQUFRLFdBQVI7QUFDVixtQkFBYSxRQUFRLGVBQVI7QUFDYixhQUFPLFFBQVEsUUFBUjtBQUNQLHlCQUFtQjtBQUNuQix3QkFBa0I7QUFDbEIsbUJBQWE7QUFDYixxQkFBZTtBQUNmLGlCQUFXO0FBQ1gsbUJBQWE7QUE2Q2pCLGFBQU8sT0FBUCxHQUFpQixVQUFqQiIsImZpbGUiOiJucG0vbG9kYXNoQDQuMTEuMS9fY3JlYXRlRmxvdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxudmFyIExvZGFzaFdyYXBwZXIgPSByZXF1aXJlKCcuL19Mb2Rhc2hXcmFwcGVyJyksXG4gICAgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpLFxuICAgIGdldERhdGEgPSByZXF1aXJlKCcuL19nZXREYXRhJyksXG4gICAgZ2V0RnVuY05hbWUgPSByZXF1aXJlKCcuL19nZXRGdW5jTmFtZScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0xhemlhYmxlID0gcmVxdWlyZSgnLi9faXNMYXppYWJsZScpLFxuICAgIHJlc3QgPSByZXF1aXJlKCcuL3Jlc3QnKTtcbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcbnZhciBDVVJSWV9GTEFHID0gOCxcbiAgICBQQVJUSUFMX0ZMQUcgPSAzMixcbiAgICBBUllfRkxBRyA9IDEyOCxcbiAgICBSRUFSR19GTEFHID0gMjU2O1xuZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIHJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICBmdW5jcyA9IGJhc2VGbGF0dGVuKGZ1bmNzLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcbiAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJiBkYXRhWzFdID09IChBUllfRkxBRyB8IENVUlJZX0ZMQUcgfCBQQVJUSUFMX0ZMQUcgfCBSRUFSR19GTEFHKSAmJiAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxKSB7XG4gICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKSA/IHdyYXBwZXJbZnVuY05hbWVdKCkgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcbiAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUZsb3c7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
