'use strict';

System.register([], function (_export, _context) {
  var baseSetData, createBaseWrapper, createCurryWrapper, createHybridWrapper, createPartialWrapper, getData, mergeData, setData, toInteger, FUNC_ERROR_TEXT, BIND_FLAG, BIND_KEY_FLAG, CURRY_FLAG, CURRY_RIGHT_FLAG, PARTIAL_FLAG, PARTIAL_RIGHT_FLAG, nativeMax;

  function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    var isBindKey = bitmask & BIND_KEY_FLAG;
    if (!isBindKey && typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var length = partials ? partials.length : 0;
    if (!length) {
      bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
      partials = holders = undefined;
    }
    ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
    arity = arity === undefined ? arity : toInteger(arity);
    length -= holders ? holders.length : 0;
    if (bitmask & PARTIAL_RIGHT_FLAG) {
      var partialsRight = partials,
          holdersRight = holders;
      partials = holders = undefined;
    }
    var data = isBindKey ? undefined : getData(func);
    var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];
    if (data) {
      mergeData(newData, data);
    }
    func = newData[0];
    bitmask = newData[1];
    thisArg = newData[2];
    partials = newData[3];
    holders = newData[4];
    arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
    if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
      bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
    }
    if (!bitmask || bitmask == BIND_FLAG) {
      var result = createBaseWrapper(func, bitmask, thisArg);
    } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
      result = createCurryWrapper(func, bitmask, arity);
    } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
      result = createPartialWrapper(func, bitmask, thisArg, partials);
    } else {
      result = createHybridWrapper.apply(undefined, newData);
    }
    var setter = data ? baseSetData : setData;
    return setter(result, newData);
  }
  return {
    setters: [],
    execute: function () {
      baseSetData = require('./_baseSetData');
      createBaseWrapper = require('./_createBaseWrapper');
      createCurryWrapper = require('./_createCurryWrapper');
      createHybridWrapper = require('./_createHybridWrapper');
      createPartialWrapper = require('./_createPartialWrapper');
      getData = require('./_getData');
      mergeData = require('./_mergeData');
      setData = require('./_setData');
      toInteger = require('./toInteger');
      FUNC_ERROR_TEXT = 'Expected a function';
      BIND_FLAG = 1;
      BIND_KEY_FLAG = 2;
      CURRY_FLAG = 8;
      CURRY_RIGHT_FLAG = 16;
      PARTIAL_FLAG = 32;
      PARTIAL_RIGHT_FLAG = 64;
      nativeMax = Math.max;
      module.exports = createWrapper;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9sb2Rhc2hANC4xMS4xL19jcmVhdGVXcmFwcGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBa0JBLFdBQVMsYUFBVCxDQUF1QixJQUF2QixFQUE2QixPQUE3QixFQUFzQyxPQUF0QyxFQUErQyxRQUEvQyxFQUF5RCxPQUF6RCxFQUFrRSxNQUFsRSxFQUEwRSxHQUExRSxFQUErRSxLQUEvRSxFQUFzRjtBQUNwRixRQUFJLFlBQVksVUFBVSxhQUFWLENBRG9FO0FBRXBGLFFBQUksQ0FBQyxTQUFELElBQWMsT0FBTyxJQUFQLElBQWUsVUFBZixFQUEyQjtBQUMzQyxZQUFNLElBQUksU0FBSixDQUFjLGVBQWQsQ0FBTixDQUQyQztLQUE3QztBQUdBLFFBQUksU0FBUyxXQUFXLFNBQVMsTUFBVCxHQUFrQixDQUE3QixDQUx1RTtBQU1wRixRQUFJLENBQUMsTUFBRCxFQUFTO0FBQ1gsaUJBQVcsRUFBRSxlQUFlLGtCQUFmLENBQUYsQ0FEQTtBQUVYLGlCQUFXLFVBQVUsU0FBVixDQUZBO0tBQWI7QUFJQSxVQUFNLFFBQVEsU0FBUixHQUFvQixHQUFwQixHQUEwQixVQUFVLFVBQVUsR0FBVixDQUFWLEVBQTBCLENBQTFCLENBQTFCLENBVjhFO0FBV3BGLFlBQVEsVUFBVSxTQUFWLEdBQXNCLEtBQXRCLEdBQThCLFVBQVUsS0FBVixDQUE5QixDQVg0RTtBQVlwRixjQUFVLFVBQVUsUUFBUSxNQUFSLEdBQWlCLENBQTNCLENBWjBFO0FBYXBGLFFBQUksVUFBVSxrQkFBVixFQUE4QjtBQUNoQyxVQUFJLGdCQUFnQixRQUFoQjtVQUNBLGVBQWUsT0FBZixDQUY0QjtBQUdoQyxpQkFBVyxVQUFVLFNBQVYsQ0FIcUI7S0FBbEM7QUFLQSxRQUFJLE9BQU8sWUFBWSxTQUFaLEdBQXdCLFFBQVEsSUFBUixDQUF4QixDQWxCeUU7QUFtQnBGLFFBQUksVUFBVSxDQUFDLElBQUQsRUFBTyxPQUFQLEVBQWdCLE9BQWhCLEVBQXlCLFFBQXpCLEVBQW1DLE9BQW5DLEVBQTRDLGFBQTVDLEVBQTJELFlBQTNELEVBQXlFLE1BQXpFLEVBQWlGLEdBQWpGLEVBQXNGLEtBQXRGLENBQVYsQ0FuQmdGO0FBb0JwRixRQUFJLElBQUosRUFBVTtBQUNSLGdCQUFVLE9BQVYsRUFBbUIsSUFBbkIsRUFEUTtLQUFWO0FBR0EsV0FBTyxRQUFRLENBQVIsQ0FBUCxDQXZCb0Y7QUF3QnBGLGNBQVUsUUFBUSxDQUFSLENBQVYsQ0F4Qm9GO0FBeUJwRixjQUFVLFFBQVEsQ0FBUixDQUFWLENBekJvRjtBQTBCcEYsZUFBVyxRQUFRLENBQVIsQ0FBWCxDQTFCb0Y7QUEyQnBGLGNBQVUsUUFBUSxDQUFSLENBQVYsQ0EzQm9GO0FBNEJwRixZQUFRLFFBQVEsQ0FBUixJQUFhLFFBQVEsQ0FBUixLQUFjLElBQWQsR0FBc0IsWUFBWSxDQUFaLEdBQWdCLEtBQUssTUFBTCxHQUFlLFVBQVUsUUFBUSxDQUFSLElBQWEsTUFBYixFQUFxQixDQUEvQixDQUFyRCxDQTVCK0Q7QUE2QnBGLFFBQUksQ0FBQyxLQUFELElBQVUsV0FBVyxhQUFhLGdCQUFiLENBQVgsRUFBMkM7QUFDdkQsaUJBQVcsRUFBRSxhQUFhLGdCQUFiLENBQUYsQ0FENEM7S0FBekQ7QUFHQSxRQUFJLENBQUMsT0FBRCxJQUFZLFdBQVcsU0FBWCxFQUFzQjtBQUNwQyxVQUFJLFNBQVMsa0JBQWtCLElBQWxCLEVBQXdCLE9BQXhCLEVBQWlDLE9BQWpDLENBQVQsQ0FEZ0M7S0FBdEMsTUFFTyxJQUFJLFdBQVcsVUFBWCxJQUF5QixXQUFXLGdCQUFYLEVBQTZCO0FBQy9ELGVBQVMsbUJBQW1CLElBQW5CLEVBQXlCLE9BQXpCLEVBQWtDLEtBQWxDLENBQVQsQ0FEK0Q7S0FBMUQsTUFFQSxJQUFJLENBQUMsV0FBVyxZQUFYLElBQTJCLFlBQVksWUFBWSxZQUFaLENBQVosQ0FBNUIsSUFBc0UsQ0FBQyxRQUFRLE1BQVIsRUFBZ0I7QUFDaEcsZUFBUyxxQkFBcUIsSUFBckIsRUFBMkIsT0FBM0IsRUFBb0MsT0FBcEMsRUFBNkMsUUFBN0MsQ0FBVCxDQURnRztLQUEzRixNQUVBO0FBQ0wsZUFBUyxvQkFBb0IsS0FBcEIsQ0FBMEIsU0FBMUIsRUFBcUMsT0FBckMsQ0FBVCxDQURLO0tBRkE7QUFLUCxRQUFJLFNBQVMsT0FBTyxXQUFQLEdBQXFCLE9BQXJCLENBekN1RTtBQTBDcEYsV0FBTyxPQUFPLE1BQVAsRUFBZSxPQUFmLENBQVAsQ0ExQ29GO0dBQXRGOzs7O0FBakJJLG9CQUFjLFFBQVEsZ0JBQVI7QUFDZCwwQkFBb0IsUUFBUSxzQkFBUjtBQUNwQiwyQkFBcUIsUUFBUSx1QkFBUjtBQUNyQiw0QkFBc0IsUUFBUSx3QkFBUjtBQUN0Qiw2QkFBdUIsUUFBUSx5QkFBUjtBQUN2QixnQkFBVSxRQUFRLFlBQVI7QUFDVixrQkFBWSxRQUFRLGNBQVI7QUFDWixnQkFBVSxRQUFRLFlBQVI7QUFDVixrQkFBWSxRQUFRLGFBQVI7QUFDWix3QkFBa0I7QUFDbEIsa0JBQVk7QUFDWixzQkFBZ0I7QUFDaEIsbUJBQWE7QUFDYix5QkFBbUI7QUFDbkIscUJBQWU7QUFDZiwyQkFBcUI7QUFDckIsa0JBQVksS0FBSyxHQUFMO0FBNkNoQixhQUFPLE9BQVAsR0FBaUIsYUFBakIiLCJmaWxlIjoibnBtL2xvZGFzaEA0LjExLjEvX2NyZWF0ZVdyYXBwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqLyBcbnZhciBiYXNlU2V0RGF0YSA9IHJlcXVpcmUoJy4vX2Jhc2VTZXREYXRhJyksXG4gICAgY3JlYXRlQmFzZVdyYXBwZXIgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlV3JhcHBlcicpLFxuICAgIGNyZWF0ZUN1cnJ5V3JhcHBlciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUN1cnJ5V3JhcHBlcicpLFxuICAgIGNyZWF0ZUh5YnJpZFdyYXBwZXIgPSByZXF1aXJlKCcuL19jcmVhdGVIeWJyaWRXcmFwcGVyJyksXG4gICAgY3JlYXRlUGFydGlhbFdyYXBwZXIgPSByZXF1aXJlKCcuL19jcmVhdGVQYXJ0aWFsV3JhcHBlcicpLFxuICAgIGdldERhdGEgPSByZXF1aXJlKCcuL19nZXREYXRhJyksXG4gICAgbWVyZ2VEYXRhID0gcmVxdWlyZSgnLi9fbWVyZ2VEYXRhJyksXG4gICAgc2V0RGF0YSA9IHJlcXVpcmUoJy4vX3NldERhdGEnKSxcbiAgICB0b0ludGVnZXIgPSByZXF1aXJlKCcuL3RvSW50ZWdlcicpO1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcbnZhciBCSU5EX0ZMQUcgPSAxLFxuICAgIEJJTkRfS0VZX0ZMQUcgPSAyLFxuICAgIENVUlJZX0ZMQUcgPSA4LFxuICAgIENVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICBQQVJUSUFMX0ZMQUcgPSAzMixcbiAgICBQQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NDtcbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcbmZ1bmN0aW9uIGNyZWF0ZVdyYXBwZXIoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIEJJTkRfS0VZX0ZMQUc7XG4gIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBiaXRtYXNrICY9IH4oUEFSVElBTF9GTEFHIHwgUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuICBpZiAoYml0bWFzayAmIFBBUlRJQUxfUklHSFRfRkxBRykge1xuICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG4gICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKTtcbiAgdmFyIG5ld0RhdGEgPSBbZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XTtcbiAgaWYgKGRhdGEpIHtcbiAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gIH1cbiAgZnVuYyA9IG5ld0RhdGFbMF07XG4gIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PSBudWxsID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aCkgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG4gIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChDVVJSWV9GTEFHIHwgQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICBiaXRtYXNrICY9IH4oQ1VSUllfRkxBRyB8IENVUlJZX1JJR0hUX0ZMQUcpO1xuICB9XG4gIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IEJJTkRfRkxBRykge1xuICAgIHZhciByZXN1bHQgPSBjcmVhdGVCYXNlV3JhcHBlcihmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgfSBlbHNlIGlmIChiaXRtYXNrID09IENVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBDVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgcmVzdWx0ID0gY3JlYXRlQ3VycnlXcmFwcGVyKGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBQQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoQklORF9GTEFHIHwgUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbFdyYXBwZXIoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZFdyYXBwZXIuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgfVxuICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgcmV0dXJuIHNldHRlcihyZXN1bHQsIG5ld0RhdGEpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVXcmFwcGVyO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
