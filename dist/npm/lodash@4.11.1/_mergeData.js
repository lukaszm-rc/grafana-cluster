'use strict';

System.register([], function (_export, _context) {
  var composeArgs, composeArgsRight, replaceHolders, PLACEHOLDER, BIND_FLAG, BIND_KEY_FLAG, CURRY_BOUND_FLAG, CURRY_FLAG, ARY_FLAG, REARG_FLAG, nativeMin;

  function mergeData(data, source) {
    var bitmask = data[1],
        srcBitmask = source[1],
        newBitmask = bitmask | srcBitmask,
        isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);
    var isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && source[7].length <= source[8] && bitmask == CURRY_FLAG;
    if (!(isCommon || isCombo)) {
      return data;
    }
    if (srcBitmask & BIND_FLAG) {
      data[2] = source[2];
      newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
    }
    var value = source[3];
    if (value) {
      var partials = data[3];
      data[3] = partials ? composeArgs(partials, value, source[4]) : value;
      data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
    }
    value = source[5];
    if (value) {
      partials = data[5];
      data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
      data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
    }
    value = source[7];
    if (value) {
      data[7] = value;
    }
    if (srcBitmask & ARY_FLAG) {
      data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    }
    if (data[9] == null) {
      data[9] = source[9];
    }
    data[0] = source[0];
    data[1] = newBitmask;
    return data;
  }
  return {
    setters: [],
    execute: function () {
      composeArgs = require('./_composeArgs');
      composeArgsRight = require('./_composeArgsRight');
      replaceHolders = require('./_replaceHolders');
      PLACEHOLDER = '__lodash_placeholder__';
      BIND_FLAG = 1;
      BIND_KEY_FLAG = 2;
      CURRY_BOUND_FLAG = 4;
      CURRY_FLAG = 8;
      ARY_FLAG = 128;
      REARG_FLAG = 256;
      nativeMin = Math.min;
      module.exports = mergeData;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9sb2Rhc2hANC4xMS4xL19tZXJnZURhdGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFZQSxXQUFTLFNBQVQsQ0FBbUIsSUFBbkIsRUFBeUIsTUFBekIsRUFBaUM7QUFDL0IsUUFBSSxVQUFVLEtBQUssQ0FBTCxDQUFWO1FBQ0EsYUFBYSxPQUFPLENBQVAsQ0FBYjtRQUNBLGFBQWEsVUFBVSxVQUFWO1FBQ2IsV0FBVyxjQUFjLFlBQVksYUFBWixHQUE0QixRQUE1QixDQUFkLENBSmdCO0FBSy9CLFFBQUksVUFBVSxVQUFFLElBQWMsUUFBZCxJQUE0QixXQUFXLFVBQVgsSUFBNEIsVUFBQyxJQUFjLFFBQWQsSUFBNEIsV0FBVyxVQUFYLElBQTJCLEtBQUssQ0FBTCxFQUFRLE1BQVIsSUFBa0IsT0FBTyxDQUFQLENBQWxCLElBQWtDLFVBQUMsS0FBZSxXQUFXLFVBQVgsQ0FBZixJQUEyQyxPQUFPLENBQVAsRUFBVSxNQUFWLElBQW9CLE9BQU8sQ0FBUCxDQUFwQixJQUFtQyxXQUFXLFVBQVgsQ0FMbE47QUFNL0IsUUFBSSxFQUFFLFlBQVksT0FBWixDQUFGLEVBQXdCO0FBQzFCLGFBQU8sSUFBUCxDQUQwQjtLQUE1QjtBQUdBLFFBQUksYUFBYSxTQUFiLEVBQXdCO0FBQzFCLFdBQUssQ0FBTCxJQUFVLE9BQU8sQ0FBUCxDQUFWLENBRDBCO0FBRTFCLG9CQUFjLFVBQVUsU0FBVixHQUFzQixDQUF0QixHQUEwQixnQkFBMUIsQ0FGWTtLQUE1QjtBQUlBLFFBQUksUUFBUSxPQUFPLENBQVAsQ0FBUixDQWIyQjtBQWMvQixRQUFJLEtBQUosRUFBVztBQUNULFVBQUksV0FBVyxLQUFLLENBQUwsQ0FBWCxDQURLO0FBRVQsV0FBSyxDQUFMLElBQVUsV0FBVyxZQUFZLFFBQVosRUFBc0IsS0FBdEIsRUFBNkIsT0FBTyxDQUFQLENBQTdCLENBQVgsR0FBcUQsS0FBckQsQ0FGRDtBQUdULFdBQUssQ0FBTCxJQUFVLFdBQVcsZUFBZSxLQUFLLENBQUwsQ0FBZixFQUF3QixXQUF4QixDQUFYLEdBQWtELE9BQU8sQ0FBUCxDQUFsRCxDQUhEO0tBQVg7QUFLQSxZQUFRLE9BQU8sQ0FBUCxDQUFSLENBbkIrQjtBQW9CL0IsUUFBSSxLQUFKLEVBQVc7QUFDVCxpQkFBVyxLQUFLLENBQUwsQ0FBWCxDQURTO0FBRVQsV0FBSyxDQUFMLElBQVUsV0FBVyxpQkFBaUIsUUFBakIsRUFBMkIsS0FBM0IsRUFBa0MsT0FBTyxDQUFQLENBQWxDLENBQVgsR0FBMEQsS0FBMUQsQ0FGRDtBQUdULFdBQUssQ0FBTCxJQUFVLFdBQVcsZUFBZSxLQUFLLENBQUwsQ0FBZixFQUF3QixXQUF4QixDQUFYLEdBQWtELE9BQU8sQ0FBUCxDQUFsRCxDQUhEO0tBQVg7QUFLQSxZQUFRLE9BQU8sQ0FBUCxDQUFSLENBekIrQjtBQTBCL0IsUUFBSSxLQUFKLEVBQVc7QUFDVCxXQUFLLENBQUwsSUFBVSxLQUFWLENBRFM7S0FBWDtBQUdBLFFBQUksYUFBYSxRQUFiLEVBQXVCO0FBQ3pCLFdBQUssQ0FBTCxJQUFVLEtBQUssQ0FBTCxLQUFXLElBQVgsR0FBa0IsT0FBTyxDQUFQLENBQWxCLEdBQThCLFVBQVUsS0FBSyxDQUFMLENBQVYsRUFBbUIsT0FBTyxDQUFQLENBQW5CLENBQTlCLENBRGU7S0FBM0I7QUFHQSxRQUFJLEtBQUssQ0FBTCxLQUFXLElBQVgsRUFBaUI7QUFDbkIsV0FBSyxDQUFMLElBQVUsT0FBTyxDQUFQLENBQVYsQ0FEbUI7S0FBckI7QUFHQSxTQUFLLENBQUwsSUFBVSxPQUFPLENBQVAsQ0FBVixDQW5DK0I7QUFvQy9CLFNBQUssQ0FBTCxJQUFVLFVBQVYsQ0FwQytCO0FBcUMvQixXQUFPLElBQVAsQ0FyQytCO0dBQWpDOzs7O0FBWEksb0JBQWMsUUFBUSxnQkFBUjtBQUNkLHlCQUFtQixRQUFRLHFCQUFSO0FBQ25CLHVCQUFpQixRQUFRLG1CQUFSO0FBQ2pCLG9CQUFjO0FBQ2Qsa0JBQVk7QUFDWixzQkFBZ0I7QUFDaEIseUJBQW1CO0FBQ25CLG1CQUFhO0FBQ2IsaUJBQVc7QUFDWCxtQkFBYTtBQUNiLGtCQUFZLEtBQUssR0FBTDtBQXdDaEIsYUFBTyxPQUFQLEdBQWlCLFNBQWpCIiwiZmlsZSI6Im5wbS9sb2Rhc2hANC4xMS4xL19tZXJnZURhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqLyBcbnZhciBjb21wb3NlQXJncyA9IHJlcXVpcmUoJy4vX2NvbXBvc2VBcmdzJyksXG4gICAgY29tcG9zZUFyZ3NSaWdodCA9IHJlcXVpcmUoJy4vX2NvbXBvc2VBcmdzUmlnaHQnKSxcbiAgICByZXBsYWNlSG9sZGVycyA9IHJlcXVpcmUoJy4vX3JlcGxhY2VIb2xkZXJzJyk7XG52YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG52YXIgQklORF9GTEFHID0gMSxcbiAgICBCSU5EX0tFWV9GTEFHID0gMixcbiAgICBDVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICBDVVJSWV9GTEFHID0gOCxcbiAgICBBUllfRkxBRyA9IDEyOCxcbiAgICBSRUFSR19GTEFHID0gMjU2O1xudmFyIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKEJJTkRfRkxBRyB8IEJJTkRfS0VZX0ZMQUcgfCBBUllfRkxBRyk7XG4gIHZhciBpc0NvbWJvID0gKChzcmNCaXRtYXNrID09IEFSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBDVVJSWV9GTEFHKSkgfHwgKChzcmNCaXRtYXNrID09IEFSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBSRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHwgKChzcmNCaXRtYXNrID09IChBUllfRkxBRyB8IFJFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IENVUlJZX0ZMQUcpKTtcbiAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBpZiAoc3JjQml0bWFzayAmIEJJTkRfRkxBRykge1xuICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgQklORF9GTEFHID8gMCA6IENVUlJZX0JPVU5EX0ZMQUc7XG4gIH1cbiAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICBpZiAodmFsdWUpIHtcbiAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgfVxuICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICB9XG4gIHZhbHVlID0gc291cmNlWzddO1xuICBpZiAodmFsdWUpIHtcbiAgICBkYXRhWzddID0gdmFsdWU7XG4gIH1cbiAgaWYgKHNyY0JpdG1hc2sgJiBBUllfRkxBRykge1xuICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgfVxuICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgfVxuICBkYXRhWzBdID0gc291cmNlWzBdO1xuICBkYXRhWzFdID0gbmV3Qml0bWFzaztcbiAgcmV0dXJuIGRhdGE7XG59XG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlRGF0YTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
