"use strict";
/* */
"format global";

System.register([], function (_export, _context) {
  var _typeof;

  return {
    setters: [],
    execute: function () {
      _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
      };
      !function (e) {
        var r = e.babelHelpers = {};r.inherits = function (e, r) {
          if ("function" != typeof r && null !== r) throw new TypeError("Super expression must either be null or a function, not " + (typeof r === "undefined" ? "undefined" : _typeof(r)));e.prototype = Object.create(r && r.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), r && (Object.setPrototypeOf ? Object.setPrototypeOf(e, r) : e.__proto__ = r);
        }, r.defaults = function (e, r) {
          for (var t = Object.getOwnPropertyNames(r), n = 0; n < t.length; n++) {
            var o = t[n],
                i = Object.getOwnPropertyDescriptor(r, o);i && i.configurable && void 0 === e[o] && Object.defineProperty(e, o, i);
          }return e;
        }, r.createClass = function () {
          function e(e, r) {
            for (var t = 0; t < r.length; t++) {
              var n = r[t];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
            }
          }return function (r, t, n) {
            return t && e(r.prototype, t), n && e(r, n), r;
          };
        }(), r.createDecoratedClass = function () {
          function e(e, r, t) {
            for (var n = 0; n < r.length; n++) {
              var o = r[n],
                  i = o.decorators,
                  a = o.key;if (delete o.key, delete o.decorators, o.enumerable = o.enumerable || !1, o.configurable = !0, ("value" in o || o.initializer) && (o.writable = !0), i) {
                for (var l = 0; l < i.length; l++) {
                  var u = i[l];if ("function" != typeof u) throw new TypeError("The decorator for method " + o.key + " is of the invalid type " + (typeof u === "undefined" ? "undefined" : _typeof(u)));o = u(e, a, o) || o;
                }if (void 0 !== o.initializer) {
                  t[a] = o;continue;
                }
              }Object.defineProperty(e, a, o);
            }
          }return function (r, t, n, o, i) {
            return t && e(r.prototype, t, o), n && e(r, n, i), r;
          };
        }(), r.createDecoratedObject = function (e) {
          for (var r = {}, t = 0; t < e.length; t++) {
            var n = e[t],
                o = n.decorators,
                i = n.key;if (delete n.key, delete n.decorators, n.enumerable = !0, n.configurable = !0, ("value" in n || n.initializer) && (n.writable = !0), o) for (var a = 0; a < o.length; a++) {
              var l = o[a];if ("function" != typeof l) throw new TypeError("The decorator for method " + n.key + " is of the invalid type " + (typeof l === "undefined" ? "undefined" : _typeof(l)));n = l(r, i, n) || n;
            }n.initializer && (n.value = n.initializer.call(r)), Object.defineProperty(r, i, n);
          }return r;
        }, r.defineDecoratedPropertyDescriptor = function (e, r, t) {
          var n = t[r];if (n) {
            var o = {};for (var i in n) {
              o[i] = n[i];
            }o.value = o.initializer ? o.initializer.call(e) : void 0, Object.defineProperty(e, r, o);
          }
        }, r.taggedTemplateLiteral = function (e, r) {
          return Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(r) } }));
        }, r.taggedTemplateLiteralLoose = function (e, r) {
          return e.raw = r, e;
        }, r.toArray = function (e) {
          return Array.isArray(e) ? e : Array.from(e);
        }, r.toConsumableArray = function (e) {
          if (Array.isArray(e)) {
            for (var r = 0, t = Array(e.length); r < e.length; r++) {
              t[r] = e[r];
            }return t;
          }return Array.from(e);
        }, r.slicedToArray = function () {
          function e(e, r) {
            var t = [],
                n = !0,
                o = !1,
                i = void 0;try {
              for (var a, l = e[Symbol.iterator](); !(n = (a = l.next()).done) && (t.push(a.value), !r || t.length !== r); n = !0) {}
            } catch (u) {
              o = !0, i = u;
            } finally {
              try {
                !n && l["return"] && l["return"]();
              } finally {
                if (o) throw i;
              }
            }return t;
          }return function (r, t) {
            if (Array.isArray(r)) return r;if (Symbol.iterator in Object(r)) return e(r, t);throw new TypeError("Invalid attempt to destructure non-iterable instance");
          };
        }(), r.slicedToArrayLoose = function (e, r) {
          if (Array.isArray(e)) return e;if (Symbol.iterator in Object(e)) {
            for (var t, n = [], o = e[Symbol.iterator](); !(t = o.next()).done && (n.push(t.value), !r || n.length !== r);) {}return n;
          }throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }, r.objectWithoutProperties = function (e, r) {
          var t = {};for (var n in e) {
            r.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
          }return t;
        }, r.hasOwn = Object.prototype.hasOwnProperty, r.slice = Array.prototype.slice, r.bind = Function.prototype.bind, r.defineProperty = function (e, r, t) {
          return r in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e;
        }, r.asyncToGenerator = function (e) {
          return function () {
            var r = e.apply(this, arguments);return new Promise(function (e, t) {
              function n(n, a) {
                try {
                  var l = r[n](a),
                      u = l.value;
                } catch (f) {
                  return void t(f);
                }l.done ? e(u) : Promise.resolve(u).then(o, i);
              }var o = n.bind(null, "next"),
                  i = n.bind(null, "throw");o();
            });
          };
        }, r.interopExportWildcard = function (e, r) {
          var t = r({}, e);return delete t["default"], t;
        }, r.interopRequireWildcard = function (e) {
          if (e && e.__esModule) return e;var r = {};if (null != e) for (var t in e) {
            Object.prototype.hasOwnProperty.call(e, t) && (r[t] = e[t]);
          }return r["default"] = e, r;
        }, r.interopRequireDefault = function (e) {
          return e && e.__esModule ? e : { "default": e };
        }, r._typeof = function (e) {
          return e && e.constructor === Symbol ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
        }, r._extends = Object.assign || function (e) {
          for (var r = 1; r < arguments.length; r++) {
            var t = arguments[r];for (var n in t) {
              Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
            }
          }return e;
        }, r.get = function t(e, r, n) {
          null === e && (e = Function.prototype);var o = Object.getOwnPropertyDescriptor(e, r);if (void 0 === o) {
            var i = Object.getPrototypeOf(e);return null === i ? void 0 : t(i, r, n);
          }if ("value" in o) return o.value;var a = o.get;if (void 0 !== a) return a.call(n);
        }, r.set = function n(e, r, t, o) {
          var i = Object.getOwnPropertyDescriptor(e, r);if (void 0 === i) {
            var a = Object.getPrototypeOf(e);null !== a && n(a, r, t, o);
          } else if ("value" in i && i.writable) i.value = t;else {
            var l = i.set;void 0 !== l && l.call(o, t);
          }return t;
        }, r.newArrowCheck = function (e, r) {
          if (e !== r) throw new TypeError("Cannot instantiate an arrow function");
        }, r.classCallCheck = function (e, r) {
          if (!(e instanceof r)) throw new TypeError("Cannot call a class as a function");
        }, r.objectDestructuringEmpty = function (e) {
          if (null == e) throw new TypeError("Cannot destructure undefined");
        }, r.temporalUndefined = {}, r.temporalAssertDefined = function (e, r, t) {
          if (e === t) throw new ReferenceError(r + " is not defined - temporal dead zone");return !0;
        }, r.selfGlobal = "undefined" == typeof e ? self : e, r.typeofReactElement = "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103, r.defaultProps = function (e, r) {
          if (e) for (var t in e) {
            "undefined" == typeof r[t] && (r[t] = e[t]);
          }return r;
        }, r._instanceof = function (e, r) {
          return null != r && r[Symbol.hasInstance] ? r[Symbol.hasInstance](e) : e instanceof r;
        }, r.interopRequire = function (e) {
          return e && e.__esModule ? e["default"] : e;
        };
      }("undefined" == typeof global ? self : global);
    }
  };
});
//# sourceMappingURL=data:application/json;base64,
