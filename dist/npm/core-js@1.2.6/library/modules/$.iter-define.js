/* */
'use strict';

System.register([], function (_export, _context) {
  var LIBRARY, $export, redefine, hide, has, Iterators, $iterCreate, setToStringTag, getProto, ITERATOR, BUGGY, FF_ITERATOR, KEYS, VALUES, returnThis;
  return {
    setters: [],
    execute: function () {
      LIBRARY = require('./$.library');
      $export = require('./$.export');
      redefine = require('./$.redefine');
      hide = require('./$.hide');
      has = require('./$.has');
      Iterators = require('./$.iterators');
      $iterCreate = require('./$.iter-create');
      setToStringTag = require('./$.set-to-string-tag');
      getProto = require('./$').getProto;
      ITERATOR = require('./$.wks')('iterator');
      BUGGY = !([].keys && 'next' in [].keys());
      FF_ITERATOR = '@@iterator';
      KEYS = 'keys';
      VALUES = 'values';

      returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);
        var getMethod = function getMethod(kind) {
          if (!BUGGY && kind in proto) return proto[kind];
          switch (kind) {
            case KEYS:
              return function keys() {
                return new Constructor(this, kind);
              };
            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }
          return function entries() {
            return new Constructor(this, kind);
          };
        };
        var TAG = NAME + ' Iterator',
            DEF_VALUES = DEFAULT == VALUES,
            VALUES_BUG = false,
            proto = Base.prototype,
            $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
            $default = $native || getMethod(DEFAULT),
            methods,
            key;
        if ($native) {
          var IteratorPrototype = getProto($default.call(new Base()));
          setToStringTag(IteratorPrototype, TAG, true);
          if (!LIBRARY && has(proto, FF_ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
          if (DEF_VALUES && $native.name !== VALUES) {
            VALUES_BUG = true;
            $default = function values() {
              return $native.call(this);
            };
          }
        }
        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        }
        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;
        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: !DEF_VALUES ? $default : getMethod('entries')
          };
          if (FORCED) for (key in methods) {
            if (!(key in proto)) redefine(proto, key, methods[key]);
          } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }
        return methods;
      };
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLml0ZXItZGVmaW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7OztBQUNJLGdCQUFVLFFBQVEsYUFBUjtBQUNWLGdCQUFVLFFBQVEsWUFBUjtBQUNWLGlCQUFXLFFBQVEsY0FBUjtBQUNYLGFBQU8sUUFBUSxVQUFSO0FBQ1AsWUFBTSxRQUFRLFNBQVI7QUFDTixrQkFBWSxRQUFRLGVBQVI7QUFDWixvQkFBYyxRQUFRLGlCQUFSO0FBQ2QsdUJBQWlCLFFBQVEsdUJBQVI7QUFDakIsaUJBQVcsUUFBUSxLQUFSLEVBQWUsUUFBZjtBQUNYLGlCQUFXLFFBQVEsU0FBUixFQUFtQixVQUFuQjtBQUNYLGNBQVEsRUFBRSxHQUFHLElBQUgsSUFBVyxVQUFVLEdBQUcsSUFBSCxFQUFWLENBQWI7QUFDUixvQkFBYztBQUNkLGFBQU87QUFDUCxlQUFTOztBQUNULG1CQUFhLFNBQWIsVUFBYSxHQUFXO0FBQzFCLGVBQU8sSUFBUCxDQUQwQjtPQUFYOztBQUdqQixhQUFPLE9BQVAsR0FBaUIsVUFBUyxJQUFULEVBQWUsSUFBZixFQUFxQixXQUFyQixFQUFrQyxJQUFsQyxFQUF3QyxPQUF4QyxFQUFpRCxNQUFqRCxFQUF5RCxNQUF6RCxFQUFpRTtBQUNoRixvQkFBWSxXQUFaLEVBQXlCLElBQXpCLEVBQStCLElBQS9CLEVBRGdGO0FBRWhGLFlBQUksWUFBWSxTQUFaLFNBQVksQ0FBUyxJQUFULEVBQWU7QUFDN0IsY0FBSSxDQUFDLEtBQUQsSUFBVSxRQUFRLEtBQVIsRUFDWixPQUFPLE1BQU0sSUFBTixDQUFQLENBREY7QUFFQSxrQkFBUSxJQUFSO0FBQ0UsaUJBQUssSUFBTDtBQUNFLHFCQUFPLFNBQVMsSUFBVCxHQUFnQjtBQUNyQix1QkFBTyxJQUFJLFdBQUosQ0FBZ0IsSUFBaEIsRUFBc0IsSUFBdEIsQ0FBUCxDQURxQjtlQUFoQixDQURUO0FBREYsaUJBS08sTUFBTDtBQUNFLHFCQUFPLFNBQVMsTUFBVCxHQUFrQjtBQUN2Qix1QkFBTyxJQUFJLFdBQUosQ0FBZ0IsSUFBaEIsRUFBc0IsSUFBdEIsQ0FBUCxDQUR1QjtlQUFsQixDQURUO0FBTEYsV0FINkI7QUFhN0IsaUJBQU8sU0FBUyxPQUFULEdBQW1CO0FBQ3hCLG1CQUFPLElBQUksV0FBSixDQUFnQixJQUFoQixFQUFzQixJQUF0QixDQUFQLENBRHdCO1dBQW5CLENBYnNCO1NBQWYsQ0FGZ0U7QUFtQmhGLFlBQUksTUFBTSxPQUFPLFdBQVA7WUFDTixhQUFhLFdBQVcsTUFBWDtZQUNiLGFBQWEsS0FBYjtZQUNBLFFBQVEsS0FBSyxTQUFMO1lBQ1IsVUFBVSxNQUFNLFFBQU4sS0FBbUIsTUFBTSxXQUFOLENBQW5CLElBQXlDLFdBQVcsTUFBTSxPQUFOLENBQVg7WUFDbkQsV0FBVyxXQUFXLFVBQVUsT0FBVixDQUFYO1lBQ1gsT0FOSjtZQU9JLEdBUEosQ0FuQmdGO0FBMkJoRixZQUFJLE9BQUosRUFBYTtBQUNYLGNBQUksb0JBQW9CLFNBQVMsU0FBUyxJQUFULENBQWMsSUFBSSxJQUFKLEVBQWQsQ0FBVCxDQUFwQixDQURPO0FBRVgseUJBQWUsaUJBQWYsRUFBa0MsR0FBbEMsRUFBdUMsSUFBdkMsRUFGVztBQUdYLGNBQUksQ0FBQyxPQUFELElBQVksSUFBSSxLQUFKLEVBQVcsV0FBWCxDQUFaLEVBQ0YsS0FBSyxpQkFBTCxFQUF3QixRQUF4QixFQUFrQyxVQUFsQyxFQURGO0FBRUEsY0FBSSxjQUFjLFFBQVEsSUFBUixLQUFpQixNQUFqQixFQUF5QjtBQUN6Qyx5QkFBYSxJQUFiLENBRHlDO0FBRXpDLHVCQUFXLFNBQVMsTUFBVCxHQUFrQjtBQUMzQixxQkFBTyxRQUFRLElBQVIsQ0FBYSxJQUFiLENBQVAsQ0FEMkI7YUFBbEIsQ0FGOEI7V0FBM0M7U0FMRjtBQVlBLFlBQUksQ0FBQyxDQUFDLE9BQUQsSUFBWSxNQUFaLENBQUQsS0FBeUIsU0FBUyxVQUFULElBQXVCLENBQUMsTUFBTSxRQUFOLENBQUQsQ0FBaEQsRUFBbUU7QUFDckUsZUFBSyxLQUFMLEVBQVksUUFBWixFQUFzQixRQUF0QixFQURxRTtTQUF2RTtBQUdBLGtCQUFVLElBQVYsSUFBa0IsUUFBbEIsQ0ExQ2dGO0FBMkNoRixrQkFBVSxHQUFWLElBQWlCLFVBQWpCLENBM0NnRjtBQTRDaEYsWUFBSSxPQUFKLEVBQWE7QUFDWCxvQkFBVTtBQUNSLG9CQUFRLGFBQWEsUUFBYixHQUF3QixVQUFVLE1BQVYsQ0FBeEI7QUFDUixrQkFBTSxTQUFTLFFBQVQsR0FBb0IsVUFBVSxJQUFWLENBQXBCO0FBQ04scUJBQVMsQ0FBQyxVQUFELEdBQWMsUUFBZCxHQUF5QixVQUFVLFNBQVYsQ0FBekI7V0FIWCxDQURXO0FBTVgsY0FBSSxNQUFKLEVBQ0UsS0FBSyxHQUFMLElBQVksT0FBWixFQUFxQjtBQUNuQixnQkFBSSxFQUFFLE9BQU8sS0FBUCxDQUFGLEVBQ0YsU0FBUyxLQUFULEVBQWdCLEdBQWhCLEVBQXFCLFFBQVEsR0FBUixDQUFyQixFQURGO1dBREYsTUFLQSxRQUFRLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBUixJQUFhLFNBQVMsVUFBVCxDQUFiLEVBQW1DLElBQXZELEVBQTZELE9BQTdELEVBTkY7U0FORjtBQWNBLGVBQU8sT0FBUCxDQTFEZ0Y7T0FBakUiLCJmaWxlIjoibnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQuaXRlci1kZWZpbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi8kLmxpYnJhcnknKSxcbiAgICAkZXhwb3J0ID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpLFxuICAgIHJlZGVmaW5lID0gcmVxdWlyZSgnLi8kLnJlZGVmaW5lJyksXG4gICAgaGlkZSA9IHJlcXVpcmUoJy4vJC5oaWRlJyksXG4gICAgaGFzID0gcmVxdWlyZSgnLi8kLmhhcycpLFxuICAgIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKSxcbiAgICAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vJC5pdGVyLWNyZWF0ZScpLFxuICAgIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi8kLnNldC10by1zdHJpbmctdGFnJyksXG4gICAgZ2V0UHJvdG8gPSByZXF1aXJlKCcuLyQnKS5nZXRQcm90byxcbiAgICBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vJC53a3MnKSgnaXRlcmF0b3InKSxcbiAgICBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSxcbiAgICBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJyxcbiAgICBLRVlTID0gJ2tleXMnLFxuICAgIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bylcbiAgICAgIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTtcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgVkFMVUVTOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTtcbiAgICB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InLFxuICAgICAgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTLFxuICAgICAgVkFMVUVTX0JVRyA9IGZhbHNlLFxuICAgICAgcHJvdG8gPSBCYXNlLnByb3RvdHlwZSxcbiAgICAgICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF0sXG4gICAgICAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpLFxuICAgICAgbWV0aG9kcyxcbiAgICAgIGtleTtcbiAgaWYgKCRuYXRpdmUpIHtcbiAgICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90bygkZGVmYXVsdC5jYWxsKG5ldyBCYXNlKSk7XG4gICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgaWYgKCFMSUJSQVJZICYmIGhhcyhwcm90bywgRkZfSVRFUkFUT1IpKVxuICAgICAgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpXG4gICAgICBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBwcm90bykpXG4gICAgICAgICAgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
