'use strict';

System.register([], function (_export, _context) {
  var global, core, ctx, PROTOTYPE, $export;
  return {
    setters: [],
    execute: function () {
      global = require('./$.global');
      core = require('./$.core');
      ctx = require('./$.ctx');
      PROTOTYPE = 'prototype';

      $export = function $export(type, name, source) {
        var IS_FORCED = type & $export.F,
            IS_GLOBAL = type & $export.G,
            IS_STATIC = type & $export.S,
            IS_PROTO = type & $export.P,
            IS_BIND = type & $export.B,
            IS_WRAP = type & $export.W,
            exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
            target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
            key,
            own,
            out;
        if (IS_GLOBAL) source = name;
        for (key in source) {
          own = !IS_FORCED && target && key in target;
          if (own && key in exports) continue;
          out = own ? target[key] : source[key];
          exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? function (C) {
            var F = function F(param) {
              return this instanceof C ? new C(param) : C(param);
            };
            F[PROTOTYPE] = C[PROTOTYPE];
            return F;
          }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
          if (IS_PROTO) (exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
        }
      };

      $export.F = 1;
      $export.G = 2;
      $export.S = 4;
      $export.P = 8;
      $export.B = 16;
      $export.W = 32;
      module.exports = $export;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmV4cG9ydC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0ksZUFBUyxRQUFRLFlBQVI7QUFDVCxhQUFPLFFBQVEsVUFBUjtBQUNQLFlBQU0sUUFBUSxTQUFSO0FBQ04sa0JBQVk7O0FBQ1osZ0JBQVUsU0FBVixPQUFVLENBQVMsSUFBVCxFQUFlLElBQWYsRUFBcUIsTUFBckIsRUFBNkI7QUFDekMsWUFBSSxZQUFZLE9BQU8sUUFBUSxDQUFSO1lBQ25CLFlBQVksT0FBTyxRQUFRLENBQVI7WUFDbkIsWUFBWSxPQUFPLFFBQVEsQ0FBUjtZQUNuQixXQUFXLE9BQU8sUUFBUSxDQUFSO1lBQ2xCLFVBQVUsT0FBTyxRQUFRLENBQVI7WUFDakIsVUFBVSxPQUFPLFFBQVEsQ0FBUjtZQUNqQixVQUFVLFlBQVksSUFBWixHQUFtQixLQUFLLElBQUwsTUFBZSxLQUFLLElBQUwsSUFBYSxFQUFiLENBQWY7WUFDN0IsU0FBUyxZQUFZLE1BQVosR0FBcUIsWUFBWSxPQUFPLElBQVAsQ0FBWixHQUEyQixDQUFDLE9BQU8sSUFBUCxLQUFnQixFQUFoQixDQUFELENBQXFCLFNBQXJCLENBQTNCO1lBQzlCLEdBUko7WUFTSSxHQVRKO1lBVUksR0FWSixDQUR5QztBQVl6QyxZQUFJLFNBQUosRUFDRSxTQUFTLElBQVQsQ0FERjtBQUVBLGFBQUssR0FBTCxJQUFZLE1BQVosRUFBb0I7QUFDbEIsZ0JBQU0sQ0FBQyxTQUFELElBQWMsTUFBZCxJQUF3QixPQUFPLE1BQVAsQ0FEWjtBQUVsQixjQUFJLE9BQU8sT0FBTyxPQUFQLEVBQ1QsU0FERjtBQUVBLGdCQUFNLE1BQU0sT0FBTyxHQUFQLENBQU4sR0FBb0IsT0FBTyxHQUFQLENBQXBCLENBSlk7QUFLbEIsa0JBQVEsR0FBUixJQUFlLGFBQWEsT0FBTyxPQUFPLEdBQVAsQ0FBUCxJQUFzQixVQUF0QixHQUFtQyxPQUFPLEdBQVAsQ0FBaEQsR0FBOEQsV0FBVyxHQUFYLEdBQWlCLElBQUksR0FBSixFQUFTLE1BQVQsQ0FBakIsR0FBb0MsV0FBVyxPQUFPLEdBQVAsS0FBZSxHQUFmLEdBQXFCLFVBQVUsQ0FBVCxFQUFZO0FBQzVKLGdCQUFJLElBQUksU0FBSixDQUFJLENBQVMsS0FBVCxFQUFnQjtBQUN0QixxQkFBTyxnQkFBZ0IsQ0FBaEIsR0FBb0IsSUFBSSxDQUFKLENBQU0sS0FBTixDQUFwQixHQUFtQyxFQUFFLEtBQUYsQ0FBbkMsQ0FEZTthQUFoQixDQURvSjtBQUk1SixjQUFFLFNBQUYsSUFBZSxFQUFFLFNBQUYsQ0FBZixDQUo0SjtBQUs1SixtQkFBTyxDQUFQLENBTDRKO1dBQVosQ0FNL0ksR0FOOEksQ0FBaEMsR0FNdkcsWUFBWSxPQUFPLEdBQVAsSUFBYyxVQUFkLEdBQTJCLElBQUksU0FBUyxJQUFULEVBQWUsR0FBbkIsQ0FBdkMsR0FBaUUsR0FBakUsQ0FYUTtBQVlsQixjQUFJLFFBQUosRUFDRSxDQUFDLFFBQVEsU0FBUixNQUF1QixRQUFRLFNBQVIsSUFBcUIsRUFBckIsQ0FBdkIsQ0FBRCxDQUFrRCxHQUFsRCxJQUF5RCxHQUF6RCxDQURGO1NBWkY7T0FkWTs7QUE4QmQsY0FBUSxDQUFSLEdBQVksQ0FBWjtBQUNBLGNBQVEsQ0FBUixHQUFZLENBQVo7QUFDQSxjQUFRLENBQVIsR0FBWSxDQUFaO0FBQ0EsY0FBUSxDQUFSLEdBQVksQ0FBWjtBQUNBLGNBQVEsQ0FBUixHQUFZLEVBQVo7QUFDQSxjQUFRLENBQVIsR0FBWSxFQUFaO0FBQ0EsYUFBTyxPQUFQLEdBQWlCLE9BQWpCIiwiZmlsZSI6Im5wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmV4cG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vJC5nbG9iYWwnKSxcbiAgICBjb3JlID0gcmVxdWlyZSgnLi8kLmNvcmUnKSxcbiAgICBjdHggPSByZXF1aXJlKCcuLyQuY3R4JyksXG4gICAgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRixcbiAgICAgIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkcsXG4gICAgICBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TLFxuICAgICAgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QLFxuICAgICAgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkIsXG4gICAgICBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVyxcbiAgICAgIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KSxcbiAgICAgIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV0sXG4gICAgICBrZXksXG4gICAgICBvd24sXG4gICAgICBvdXQ7XG4gIGlmIChJU19HTE9CQUwpXG4gICAgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYga2V5IGluIHRhcmdldDtcbiAgICBpZiAob3duICYmIGtleSBpbiBleHBvcnRzKVxuICAgICAgY29udGludWU7XG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XSA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBDID8gbmV3IEMocGFyYW0pIDogQyhwYXJhbSk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIGlmIChJU19QUk9UTylcbiAgICAgIChleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KSlba2V5XSA9IG91dDtcbiAgfVxufTtcbiRleHBvcnQuRiA9IDE7XG4kZXhwb3J0LkcgPSAyO1xuJGV4cG9ydC5TID0gNDtcbiRleHBvcnQuUCA9IDg7XG4kZXhwb3J0LkIgPSAxNjtcbiRleHBvcnQuVyA9IDMyO1xubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
