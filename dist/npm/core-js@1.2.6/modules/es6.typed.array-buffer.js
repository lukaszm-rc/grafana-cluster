/* */
'use strict';

System.register([], function (_export, _context) {
  var $export, $typed, buffer, toIndex, toLength, isObject, TYPED_ARRAY, $ArrayBuffer, $DataView, $slice, VIEW, ARRAY_BUFFER;
  return {
    setters: [],
    execute: function () {
      if (require('./$.descriptors')) {
        $export = require('./$.export');
        $typed = require('./$.typed');
        buffer = require('./$.buffer');
        toIndex = require('./$.to-index');
        toLength = require('./$.to-length');
        isObject = require('./$.is-object');
        TYPED_ARRAY = require('./$.wks')('typed_array');
        $ArrayBuffer = buffer.ArrayBuffer;
        $DataView = buffer.DataView;
        $slice = $ArrayBuffer && $ArrayBuffer.prototype.slice;
        VIEW = $typed.VIEW;
        ARRAY_BUFFER = 'ArrayBuffer';

        $export($export.G + $export.W + $export.F * !$typed.ABV, { ArrayBuffer: $ArrayBuffer });
        $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, { isView: function isView(it) {
            return isObject(it) && VIEW in it;
          } });
        $export($export.P + $export.F * require('./$.fails')(function () {
          return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
        }), ARRAY_BUFFER, { slice: function slice(start, end) {
            if ($slice !== undefined && end === undefined) return $slice.call(this, start);
            var len = this.byteLength,
                first = toIndex(start, len),
                final = toIndex(end === undefined ? len : end, len),
                result = new $ArrayBuffer(toLength(final - first)),
                viewS = new $DataView(this),
                viewT = new $DataView(result),
                index = 0;
            while (first < final) {
              viewT.setUint8(index++, viewS.getUint8(first++));
            }
            return result;
          } });
      }
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7Ozs7Ozs7QUFDQSxVQUFJLFFBQVEsaUJBQVIsQ0FBSixFQUFnQztBQUMxQixrQkFBVSxRQUFRLFlBQVIsRUFEZ0I7QUFFMUIsaUJBQVMsUUFBUSxXQUFSLEVBRmlCO0FBRzFCLGlCQUFTLFFBQVEsWUFBUixFQUhpQjtBQUkxQixrQkFBVSxRQUFRLGNBQVIsRUFKZ0I7QUFLMUIsbUJBQVcsUUFBUSxlQUFSLEVBTGU7QUFNMUIsbUJBQVcsUUFBUSxlQUFSLEVBTmU7QUFPMUIsc0JBQWMsUUFBUSxTQUFSLEVBQW1CLGFBQW5CLEVBUFk7QUFRMUIsdUJBQWUsT0FBTyxXQUFQLENBUlc7QUFTMUIsb0JBQVksT0FBTyxRQUFQLENBVGM7QUFVMUIsaUJBQVMsZ0JBQWdCLGFBQWEsU0FBYixDQUF1QixLQUF2QixDQVZDO0FBVzFCLGVBQU8sT0FBTyxJQUFQLENBWG1CO0FBWTFCLHVCQUFlLGNBWlc7O0FBYTlCLGdCQUFRLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBUixHQUFZLENBQUMsT0FBTyxHQUFQLEVBQVksRUFBQyxhQUFhLFlBQWIsRUFBMUQsRUFiOEI7QUFjOUIsZ0JBQVEsUUFBUSxDQUFSLEdBQVksUUFBUSxDQUFSLEdBQVksQ0FBQyxPQUFPLE1BQVAsRUFBZSxZQUFoRCxFQUE4RCxFQUFDLFFBQVEsU0FBUyxNQUFULENBQWdCLEVBQWhCLEVBQW9CO0FBQ3ZGLG1CQUFPLFNBQVMsRUFBVCxLQUFnQixRQUFRLEVBQVIsQ0FEZ0U7V0FBcEIsRUFBdkUsRUFkOEI7QUFpQjlCLGdCQUFRLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBUixHQUFZLFFBQVEsV0FBUixFQUFxQixZQUFXO0FBQzlELGlCQUFPLENBQUMsSUFBSSxZQUFKLENBQWlCLENBQWpCLEVBQW9CLEtBQXBCLENBQTBCLENBQTFCLEVBQTZCLFNBQTdCLEVBQXdDLFVBQXhDLENBRHNEO1NBQVgsQ0FBakMsRUFFaEIsWUFGSixFQUVrQixFQUFDLE9BQU8sU0FBUyxLQUFULENBQWUsS0FBZixFQUFzQixHQUF0QixFQUEyQjtBQUNqRCxnQkFBSSxXQUFXLFNBQVgsSUFBd0IsUUFBUSxTQUFSLEVBQzFCLE9BQU8sT0FBTyxJQUFQLENBQVksSUFBWixFQUFrQixLQUFsQixDQUFQLENBREY7QUFFQSxnQkFBSSxNQUFNLEtBQUssVUFBTDtnQkFDTixRQUFRLFFBQVEsS0FBUixFQUFlLEdBQWYsQ0FBUjtnQkFDQSxRQUFRLFFBQVEsUUFBUSxTQUFSLEdBQW9CLEdBQXBCLEdBQTBCLEdBQTFCLEVBQStCLEdBQXZDLENBQVI7Z0JBQ0EsU0FBUyxJQUFJLFlBQUosQ0FBaUIsU0FBUyxRQUFRLEtBQVIsQ0FBMUIsQ0FBVDtnQkFDQSxRQUFRLElBQUksU0FBSixDQUFjLElBQWQsQ0FBUjtnQkFDQSxRQUFRLElBQUksU0FBSixDQUFjLE1BQWQsQ0FBUjtnQkFDQSxRQUFRLENBQVIsQ0FUNkM7QUFVakQsbUJBQU8sUUFBUSxLQUFSLEVBQWU7QUFDcEIsb0JBQU0sUUFBTixDQUFlLE9BQWYsRUFBd0IsTUFBTSxRQUFOLENBQWUsT0FBZixDQUF4QixFQURvQjthQUF0QjtBQUdBLG1CQUFPLE1BQVAsQ0FiaUQ7V0FBM0IsRUFGMUIsRUFqQjhCO09BQWhDIiwiZmlsZSI6Im5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vJC5kZXNjcmlwdG9ycycpKSB7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpLFxuICAgICAgJHR5cGVkID0gcmVxdWlyZSgnLi8kLnR5cGVkJyksXG4gICAgICBidWZmZXIgPSByZXF1aXJlKCcuLyQuYnVmZmVyJyksXG4gICAgICB0b0luZGV4ID0gcmVxdWlyZSgnLi8kLnRvLWluZGV4JyksXG4gICAgICB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vJC50by1sZW5ndGgnKSxcbiAgICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmlzLW9iamVjdCcpLFxuICAgICAgVFlQRURfQVJSQVkgPSByZXF1aXJlKCcuLyQud2tzJykoJ3R5cGVkX2FycmF5JyksXG4gICAgICAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXIsXG4gICAgICAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXcsXG4gICAgICAkc2xpY2UgPSAkQXJyYXlCdWZmZXIgJiYgJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSxcbiAgICAgIFZJRVcgPSAkdHlwZWQuVklFVyxcbiAgICAgIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogISR0eXBlZC5BQlYsIHtBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyfSk7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge2lzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gICAgfX0pO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vJC5mYWlscycpKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG4gIH0pLCBBUlJBWV9CVUZGRVIsIHtzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gJHNsaWNlLmNhbGwodGhpcywgc3RhcnQpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuYnl0ZUxlbmd0aCxcbiAgICAgICAgICBmaXJzdCA9IHRvSW5kZXgoc3RhcnQsIGxlbiksXG4gICAgICAgICAgZmluYWwgPSB0b0luZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyAkQXJyYXlCdWZmZXIodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpLFxuICAgICAgICAgIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKSxcbiAgICAgICAgICB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KSxcbiAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICB3aGlsZSAoZmlyc3QgPCBmaW5hbCkge1xuICAgICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH19KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
