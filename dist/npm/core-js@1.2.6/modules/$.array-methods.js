'use strict';

System.register([], function (_export, _context) {
  var ctx, IObject, toObject, toLength, asc;
  return {
    setters: [],
    execute: function () {
      ctx = require('./$.ctx');
      IObject = require('./$.iobject');
      toObject = require('./$.to-object');
      toLength = require('./$.to-length');
      asc = require('./$.array-species-create');

      module.exports = function (TYPE) {
        var IS_MAP = TYPE == 1,
            IS_FILTER = TYPE == 2,
            IS_SOME = TYPE == 3,
            IS_EVERY = TYPE == 4,
            IS_FIND_INDEX = TYPE == 6,
            NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function ($this, callbackfn, that) {
          var O = toObject($this),
              self = IObject(O),
              f = ctx(callbackfn, that, 3),
              length = toLength(self.length),
              index = 0,
              result = IS_MAP ? asc($this, length) : IS_FILTER ? asc($this, 0) : undefined,
              val,
              res;
          for (; length > index; index++) {
            if (NO_HOLES || index in self) {
              val = self[index];
              res = f(val, index, O);
              if (TYPE) {
                if (IS_MAP) result[index] = res;else if (res) switch (TYPE) {
                  case 3:
                    return true;
                  case 5:
                    return val;
                  case 6:
                    return index;
                  case 2:
                    result.push(val);
                } else if (IS_EVERY) return false;
              }
            }
          }return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
        };
      };
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvJC5hcnJheS1tZXRob2RzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDSSxZQUFNLFFBQVEsU0FBUjtBQUNOLGdCQUFVLFFBQVEsYUFBUjtBQUNWLGlCQUFXLFFBQVEsZUFBUjtBQUNYLGlCQUFXLFFBQVEsZUFBUjtBQUNYLFlBQU0sUUFBUSwwQkFBUjs7QUFDVixhQUFPLE9BQVAsR0FBaUIsVUFBUyxJQUFULEVBQWU7QUFDOUIsWUFBSSxTQUFTLFFBQVEsQ0FBUjtZQUNULFlBQVksUUFBUSxDQUFSO1lBQ1osVUFBVSxRQUFRLENBQVI7WUFDVixXQUFXLFFBQVEsQ0FBUjtZQUNYLGdCQUFnQixRQUFRLENBQVI7WUFDaEIsV0FBVyxRQUFRLENBQVIsSUFBYSxhQUFiLENBTmU7QUFPOUIsZUFBTyxVQUFTLEtBQVQsRUFBZ0IsVUFBaEIsRUFBNEIsSUFBNUIsRUFBa0M7QUFDdkMsY0FBSSxJQUFJLFNBQVMsS0FBVCxDQUFKO2NBQ0EsT0FBTyxRQUFRLENBQVIsQ0FBUDtjQUNBLElBQUksSUFBSSxVQUFKLEVBQWdCLElBQWhCLEVBQXNCLENBQXRCLENBQUo7Y0FDQSxTQUFTLFNBQVMsS0FBSyxNQUFMLENBQWxCO2NBQ0EsUUFBUSxDQUFSO2NBQ0EsU0FBUyxTQUFTLElBQUksS0FBSixFQUFXLE1BQVgsQ0FBVCxHQUE4QixZQUFZLElBQUksS0FBSixFQUFXLENBQVgsQ0FBWixHQUE0QixTQUE1QjtjQUN2QyxHQU5KO2NBT0ksR0FQSixDQUR1QztBQVN2QyxpQkFBTyxTQUFTLEtBQVQsRUFBZ0IsT0FBdkI7QUFDRSxnQkFBSSxZQUFZLFNBQVMsSUFBVCxFQUFlO0FBQzdCLG9CQUFNLEtBQUssS0FBTCxDQUFOLENBRDZCO0FBRTdCLG9CQUFNLEVBQUUsR0FBRixFQUFPLEtBQVAsRUFBYyxDQUFkLENBQU4sQ0FGNkI7QUFHN0Isa0JBQUksSUFBSixFQUFVO0FBQ1Isb0JBQUksTUFBSixFQUNFLE9BQU8sS0FBUCxJQUFnQixHQUFoQixDQURGLEtBRUssSUFBSSxHQUFKLEVBQ0gsUUFBUSxJQUFSO0FBQ0UsdUJBQUssQ0FBTDtBQUNFLDJCQUFPLElBQVAsQ0FERjtBQURGLHVCQUdPLENBQUw7QUFDRSwyQkFBTyxHQUFQLENBREY7QUFIRix1QkFLTyxDQUFMO0FBQ0UsMkJBQU8sS0FBUCxDQURGO0FBTEYsdUJBT08sQ0FBTDtBQUNFLDJCQUFPLElBQVAsQ0FBWSxHQUFaLEVBREY7QUFQRixpQkFERyxNQVdBLElBQUksUUFBSixFQUNILE9BQU8sS0FBUCxDQURHO2VBZFA7YUFIRjtXQURGLE9Bc0JPLGdCQUFnQixDQUFDLENBQUQsR0FBSyxXQUFXLFFBQVgsR0FBc0IsUUFBdEIsR0FBaUMsTUFBakMsQ0EvQlc7U0FBbEMsQ0FQdUI7T0FBZiIsImZpbGUiOiJucG0vY29yZS1qc0AxLjIuNi9tb2R1bGVzLyQuYXJyYXktbWV0aG9kcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vJC5jdHgnKSxcbiAgICBJT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmlvYmplY3QnKSxcbiAgICB0b09iamVjdCA9IHJlcXVpcmUoJy4vJC50by1vYmplY3QnKSxcbiAgICB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vJC50by1sZW5ndGgnKSxcbiAgICBhc2MgPSByZXF1aXJlKCcuLyQuYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxLFxuICAgICAgSVNfRklMVEVSID0gVFlQRSA9PSAyLFxuICAgICAgSVNfU09NRSA9IFRZUEUgPT0gMyxcbiAgICAgIElTX0VWRVJZID0gVFlQRSA9PSA0LFxuICAgICAgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNixcbiAgICAgIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpLFxuICAgICAgICBzZWxmID0gSU9iamVjdChPKSxcbiAgICAgICAgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKSxcbiAgICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpLFxuICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IElTX01BUCA/IGFzYygkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGFzYygkdGhpcywgMCkgOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbCxcbiAgICAgICAgcmVzO1xuICAgIGZvciAoOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKylcbiAgICAgIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgICBpZiAoVFlQRSkge1xuICAgICAgICAgIGlmIChJU19NQVApXG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gcmVzO1xuICAgICAgICAgIGVsc2UgaWYgKHJlcylcbiAgICAgICAgICAgIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChJU19FVkVSWSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
