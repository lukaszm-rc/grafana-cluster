'use strict';

System.register([], function (_export, _context) {
  var global, core, hide, redefine, ctx, PROTOTYPE, $export;
  return {
    setters: [],
    execute: function () {
      global = require('./$.global');
      core = require('./$.core');
      hide = require('./$.hide');
      redefine = require('./$.redefine');
      ctx = require('./$.ctx');
      PROTOTYPE = 'prototype';

      $export = function $export(type, name, source) {
        var IS_FORCED = type & $export.F,
            IS_GLOBAL = type & $export.G,
            IS_STATIC = type & $export.S,
            IS_PROTO = type & $export.P,
            IS_BIND = type & $export.B,
            target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE],
            exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
            expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {}),
            key,
            own,
            out,
            exp;
        if (IS_GLOBAL) source = name;
        for (key in source) {
          own = !IS_FORCED && target && key in target;
          out = (own ? target : source)[key];
          exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
          if (target && !own) redefine(target, key, out);
          if (exports[key] != out) hide(exports, key, exp);
          if (IS_PROTO && expProto[key] != out) expProto[key] = out;
        }
      };

      global.core = core;
      $export.F = 1;
      $export.G = 2;
      $export.S = 4;
      $export.P = 8;
      $export.B = 16;
      $export.W = 32;
      module.exports = $export;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvJC5leHBvcnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNJLGVBQVMsUUFBUSxZQUFSO0FBQ1QsYUFBTyxRQUFRLFVBQVI7QUFDUCxhQUFPLFFBQVEsVUFBUjtBQUNQLGlCQUFXLFFBQVEsY0FBUjtBQUNYLFlBQU0sUUFBUSxTQUFSO0FBQ04sa0JBQVk7O0FBQ1osZ0JBQVUsU0FBVixPQUFVLENBQVMsSUFBVCxFQUFlLElBQWYsRUFBcUIsTUFBckIsRUFBNkI7QUFDekMsWUFBSSxZQUFZLE9BQU8sUUFBUSxDQUFSO1lBQ25CLFlBQVksT0FBTyxRQUFRLENBQVI7WUFDbkIsWUFBWSxPQUFPLFFBQVEsQ0FBUjtZQUNuQixXQUFXLE9BQU8sUUFBUSxDQUFSO1lBQ2xCLFVBQVUsT0FBTyxRQUFRLENBQVI7WUFDakIsU0FBUyxZQUFZLE1BQVosR0FBcUIsWUFBWSxPQUFPLElBQVAsTUFBaUIsT0FBTyxJQUFQLElBQWUsRUFBZixDQUFqQixHQUFzQyxDQUFDLE9BQU8sSUFBUCxLQUFnQixFQUFoQixDQUFELENBQXFCLFNBQXJCLENBQWxEO1lBQzlCLFVBQVUsWUFBWSxJQUFaLEdBQW1CLEtBQUssSUFBTCxNQUFlLEtBQUssSUFBTCxJQUFhLEVBQWIsQ0FBZjtZQUM3QixXQUFXLFFBQVEsU0FBUixNQUF1QixRQUFRLFNBQVIsSUFBcUIsRUFBckIsQ0FBdkI7WUFDWCxHQVJKO1lBU0ksR0FUSjtZQVVJLEdBVko7WUFXSSxHQVhKLENBRHlDO0FBYXpDLFlBQUksU0FBSixFQUNFLFNBQVMsSUFBVCxDQURGO0FBRUEsYUFBSyxHQUFMLElBQVksTUFBWixFQUFvQjtBQUNsQixnQkFBTSxDQUFDLFNBQUQsSUFBYyxNQUFkLElBQXdCLE9BQU8sTUFBUCxDQURaO0FBRWxCLGdCQUFNLENBQUMsTUFBTSxNQUFOLEdBQWUsTUFBZixDQUFELENBQXdCLEdBQXhCLENBQU4sQ0FGa0I7QUFHbEIsZ0JBQU0sV0FBVyxHQUFYLEdBQWlCLElBQUksR0FBSixFQUFTLE1BQVQsQ0FBakIsR0FBb0MsWUFBWSxPQUFPLEdBQVAsSUFBYyxVQUFkLEdBQTJCLElBQUksU0FBUyxJQUFULEVBQWUsR0FBbkIsQ0FBdkMsR0FBaUUsR0FBakUsQ0FIeEI7QUFJbEIsY0FBSSxVQUFVLENBQUMsR0FBRCxFQUNaLFNBQVMsTUFBVCxFQUFpQixHQUFqQixFQUFzQixHQUF0QixFQURGO0FBRUEsY0FBSSxRQUFRLEdBQVIsS0FBZ0IsR0FBaEIsRUFDRixLQUFLLE9BQUwsRUFBYyxHQUFkLEVBQW1CLEdBQW5CLEVBREY7QUFFQSxjQUFJLFlBQVksU0FBUyxHQUFULEtBQWlCLEdBQWpCLEVBQ2QsU0FBUyxHQUFULElBQWdCLEdBQWhCLENBREY7U0FSRjtPQWZZOztBQTJCZCxhQUFPLElBQVAsR0FBYyxJQUFkO0FBQ0EsY0FBUSxDQUFSLEdBQVksQ0FBWjtBQUNBLGNBQVEsQ0FBUixHQUFZLENBQVo7QUFDQSxjQUFRLENBQVIsR0FBWSxDQUFaO0FBQ0EsY0FBUSxDQUFSLEdBQVksQ0FBWjtBQUNBLGNBQVEsQ0FBUixHQUFZLEVBQVo7QUFDQSxjQUFRLENBQVIsR0FBWSxFQUFaO0FBQ0EsYUFBTyxPQUFQLEdBQWlCLE9BQWpCIiwiZmlsZSI6Im5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvJC5leHBvcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqLyBcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJyksXG4gICAgY29yZSA9IHJlcXVpcmUoJy4vJC5jb3JlJyksXG4gICAgaGlkZSA9IHJlcXVpcmUoJy4vJC5oaWRlJyksXG4gICAgcmVkZWZpbmUgPSByZXF1aXJlKCcuLyQucmVkZWZpbmUnKSxcbiAgICBjdHggPSByZXF1aXJlKCcuLyQuY3R4JyksXG4gICAgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRixcbiAgICAgIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkcsXG4gICAgICBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TLFxuICAgICAgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QLFxuICAgICAgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkIsXG4gICAgICB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV0sXG4gICAgICBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSksXG4gICAgICBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pLFxuICAgICAga2V5LFxuICAgICAgb3duLFxuICAgICAgb3V0LFxuICAgICAgZXhwO1xuICBpZiAoSVNfR0xPQkFMKVxuICAgIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIGtleSBpbiB0YXJnZXQ7XG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICBpZiAodGFyZ2V0ICYmICFvd24pXG4gICAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0KTtcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dClcbiAgICAgIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dClcbiAgICAgIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4kZXhwb3J0LkYgPSAxO1xuJGV4cG9ydC5HID0gMjtcbiRleHBvcnQuUyA9IDQ7XG4kZXhwb3J0LlAgPSA4O1xuJGV4cG9ydC5CID0gMTY7XG4kZXhwb3J0LlcgPSAzMjtcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
