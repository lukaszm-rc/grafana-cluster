/* */
'use strict';

System.register([], function (_export, _context) {
  var LIBRARY, $export, redefine, hide, has, Iterators, $iterCreate, setToStringTag, getProto, ITERATOR, BUGGY, FF_ITERATOR, KEYS, VALUES, returnThis;
  return {
    setters: [],
    execute: function () {
      LIBRARY = require('./$.library');
      $export = require('./$.export');
      redefine = require('./$.redefine');
      hide = require('./$.hide');
      has = require('./$.has');
      Iterators = require('./$.iterators');
      $iterCreate = require('./$.iter-create');
      setToStringTag = require('./$.set-to-string-tag');
      getProto = require('./$').getProto;
      ITERATOR = require('./$.wks')('iterator');
      BUGGY = !([].keys && 'next' in [].keys());
      FF_ITERATOR = '@@iterator';
      KEYS = 'keys';
      VALUES = 'values';

      returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);
        var getMethod = function getMethod(kind) {
          if (!BUGGY && kind in proto) return proto[kind];
          switch (kind) {
            case KEYS:
              return function keys() {
                return new Constructor(this, kind);
              };
            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }
          return function entries() {
            return new Constructor(this, kind);
          };
        };
        var TAG = NAME + ' Iterator',
            DEF_VALUES = DEFAULT == VALUES,
            VALUES_BUG = false,
            proto = Base.prototype,
            $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
            $default = $native || getMethod(DEFAULT),
            methods,
            key;
        if ($native) {
          var IteratorPrototype = getProto($default.call(new Base()));
          setToStringTag(IteratorPrototype, TAG, true);
          if (!LIBRARY && has(proto, FF_ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
          if (DEF_VALUES && $native.name !== VALUES) {
            VALUES_BUG = true;
            $default = function values() {
              return $native.call(this);
            };
          }
        }
        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        }
        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;
        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: !DEF_VALUES ? $default : getMethod('entries')
          };
          if (FORCED) for (key in methods) {
            if (!(key in proto)) redefine(proto, key, methods[key]);
          } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }
        return methods;
      };
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvJC5pdGVyLWRlZmluZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7Ozs7Ozs7QUFDSSxnQkFBVSxRQUFRLGFBQVI7QUFDVixnQkFBVSxRQUFRLFlBQVI7QUFDVixpQkFBVyxRQUFRLGNBQVI7QUFDWCxhQUFPLFFBQVEsVUFBUjtBQUNQLFlBQU0sUUFBUSxTQUFSO0FBQ04sa0JBQVksUUFBUSxlQUFSO0FBQ1osb0JBQWMsUUFBUSxpQkFBUjtBQUNkLHVCQUFpQixRQUFRLHVCQUFSO0FBQ2pCLGlCQUFXLFFBQVEsS0FBUixFQUFlLFFBQWY7QUFDWCxpQkFBVyxRQUFRLFNBQVIsRUFBbUIsVUFBbkI7QUFDWCxjQUFRLEVBQUUsR0FBRyxJQUFILElBQVcsVUFBVSxHQUFHLElBQUgsRUFBVixDQUFiO0FBQ1Isb0JBQWM7QUFDZCxhQUFPO0FBQ1AsZUFBUzs7QUFDVCxtQkFBYSxTQUFiLFVBQWEsR0FBVztBQUMxQixlQUFPLElBQVAsQ0FEMEI7T0FBWDs7QUFHakIsYUFBTyxPQUFQLEdBQWlCLFVBQVMsSUFBVCxFQUFlLElBQWYsRUFBcUIsV0FBckIsRUFBa0MsSUFBbEMsRUFBd0MsT0FBeEMsRUFBaUQsTUFBakQsRUFBeUQsTUFBekQsRUFBaUU7QUFDaEYsb0JBQVksV0FBWixFQUF5QixJQUF6QixFQUErQixJQUEvQixFQURnRjtBQUVoRixZQUFJLFlBQVksU0FBWixTQUFZLENBQVMsSUFBVCxFQUFlO0FBQzdCLGNBQUksQ0FBQyxLQUFELElBQVUsUUFBUSxLQUFSLEVBQ1osT0FBTyxNQUFNLElBQU4sQ0FBUCxDQURGO0FBRUEsa0JBQVEsSUFBUjtBQUNFLGlCQUFLLElBQUw7QUFDRSxxQkFBTyxTQUFTLElBQVQsR0FBZ0I7QUFDckIsdUJBQU8sSUFBSSxXQUFKLENBQWdCLElBQWhCLEVBQXNCLElBQXRCLENBQVAsQ0FEcUI7ZUFBaEIsQ0FEVDtBQURGLGlCQUtPLE1BQUw7QUFDRSxxQkFBTyxTQUFTLE1BQVQsR0FBa0I7QUFDdkIsdUJBQU8sSUFBSSxXQUFKLENBQWdCLElBQWhCLEVBQXNCLElBQXRCLENBQVAsQ0FEdUI7ZUFBbEIsQ0FEVDtBQUxGLFdBSDZCO0FBYTdCLGlCQUFPLFNBQVMsT0FBVCxHQUFtQjtBQUN4QixtQkFBTyxJQUFJLFdBQUosQ0FBZ0IsSUFBaEIsRUFBc0IsSUFBdEIsQ0FBUCxDQUR3QjtXQUFuQixDQWJzQjtTQUFmLENBRmdFO0FBbUJoRixZQUFJLE1BQU0sT0FBTyxXQUFQO1lBQ04sYUFBYSxXQUFXLE1BQVg7WUFDYixhQUFhLEtBQWI7WUFDQSxRQUFRLEtBQUssU0FBTDtZQUNSLFVBQVUsTUFBTSxRQUFOLEtBQW1CLE1BQU0sV0FBTixDQUFuQixJQUF5QyxXQUFXLE1BQU0sT0FBTixDQUFYO1lBQ25ELFdBQVcsV0FBVyxVQUFVLE9BQVYsQ0FBWDtZQUNYLE9BTko7WUFPSSxHQVBKLENBbkJnRjtBQTJCaEYsWUFBSSxPQUFKLEVBQWE7QUFDWCxjQUFJLG9CQUFvQixTQUFTLFNBQVMsSUFBVCxDQUFjLElBQUksSUFBSixFQUFkLENBQVQsQ0FBcEIsQ0FETztBQUVYLHlCQUFlLGlCQUFmLEVBQWtDLEdBQWxDLEVBQXVDLElBQXZDLEVBRlc7QUFHWCxjQUFJLENBQUMsT0FBRCxJQUFZLElBQUksS0FBSixFQUFXLFdBQVgsQ0FBWixFQUNGLEtBQUssaUJBQUwsRUFBd0IsUUFBeEIsRUFBa0MsVUFBbEMsRUFERjtBQUVBLGNBQUksY0FBYyxRQUFRLElBQVIsS0FBaUIsTUFBakIsRUFBeUI7QUFDekMseUJBQWEsSUFBYixDQUR5QztBQUV6Qyx1QkFBVyxTQUFTLE1BQVQsR0FBa0I7QUFDM0IscUJBQU8sUUFBUSxJQUFSLENBQWEsSUFBYixDQUFQLENBRDJCO2FBQWxCLENBRjhCO1dBQTNDO1NBTEY7QUFZQSxZQUFJLENBQUMsQ0FBQyxPQUFELElBQVksTUFBWixDQUFELEtBQXlCLFNBQVMsVUFBVCxJQUF1QixDQUFDLE1BQU0sUUFBTixDQUFELENBQWhELEVBQW1FO0FBQ3JFLGVBQUssS0FBTCxFQUFZLFFBQVosRUFBc0IsUUFBdEIsRUFEcUU7U0FBdkU7QUFHQSxrQkFBVSxJQUFWLElBQWtCLFFBQWxCLENBMUNnRjtBQTJDaEYsa0JBQVUsR0FBVixJQUFpQixVQUFqQixDQTNDZ0Y7QUE0Q2hGLFlBQUksT0FBSixFQUFhO0FBQ1gsb0JBQVU7QUFDUixvQkFBUSxhQUFhLFFBQWIsR0FBd0IsVUFBVSxNQUFWLENBQXhCO0FBQ1Isa0JBQU0sU0FBUyxRQUFULEdBQW9CLFVBQVUsSUFBVixDQUFwQjtBQUNOLHFCQUFTLENBQUMsVUFBRCxHQUFjLFFBQWQsR0FBeUIsVUFBVSxTQUFWLENBQXpCO1dBSFgsQ0FEVztBQU1YLGNBQUksTUFBSixFQUNFLEtBQUssR0FBTCxJQUFZLE9BQVosRUFBcUI7QUFDbkIsZ0JBQUksRUFBRSxPQUFPLEtBQVAsQ0FBRixFQUNGLFNBQVMsS0FBVCxFQUFnQixHQUFoQixFQUFxQixRQUFRLEdBQVIsQ0FBckIsRUFERjtXQURGLE1BS0EsUUFBUSxRQUFRLENBQVIsR0FBWSxRQUFRLENBQVIsSUFBYSxTQUFTLFVBQVQsQ0FBYixFQUFtQyxJQUF2RCxFQUE2RCxPQUE3RCxFQU5GO1NBTkY7QUFjQSxlQUFPLE9BQVAsQ0ExRGdGO09BQWpFIiwiZmlsZSI6Im5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvJC5pdGVyLWRlZmluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuLyQubGlicmFyeScpLFxuICAgICRleHBvcnQgPSByZXF1aXJlKCcuLyQuZXhwb3J0JyksXG4gICAgcmVkZWZpbmUgPSByZXF1aXJlKCcuLyQucmVkZWZpbmUnKSxcbiAgICBoaWRlID0gcmVxdWlyZSgnLi8kLmhpZGUnKSxcbiAgICBoYXMgPSByZXF1aXJlKCcuLyQuaGFzJyksXG4gICAgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi8kLml0ZXJhdG9ycycpLFxuICAgICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi8kLml0ZXItY3JlYXRlJyksXG4gICAgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLyQuc2V0LXRvLXN0cmluZy10YWcnKSxcbiAgICBnZXRQcm90byA9IHJlcXVpcmUoJy4vJCcpLmdldFByb3RvLFxuICAgIElURVJBVE9SID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpLFxuICAgIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpLFxuICAgIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InLFxuICAgIEtFWVMgPSAna2V5cycsXG4gICAgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKVxuICAgICAgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpO1xuICAgICAgICB9O1xuICAgICAgY2FzZSBWQUxVRVM6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpO1xuICAgIH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcicsXG4gICAgICBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVMsXG4gICAgICBWQUxVRVNfQlVHID0gZmFsc2UsXG4gICAgICBwcm90byA9IEJhc2UucHJvdG90eXBlLFxuICAgICAgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXSxcbiAgICAgICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCksXG4gICAgICBtZXRob2RzLFxuICAgICAga2V5O1xuICBpZiAoJG5hdGl2ZSkge1xuICAgIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvKCRkZWZhdWx0LmNhbGwobmV3IEJhc2UpKTtcbiAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICBpZiAoIUxJQlJBUlkgJiYgaGFzKHByb3RvLCBGRl9JVEVSQVRPUikpXG4gICAgICBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRClcbiAgICAgIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSlcbiAgICAgICAgICByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgICAgfVxuICAgIGVsc2VcbiAgICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
