/* */
'use strict';

System.register([], function (_export, _context) {
  var $, ctx, $export, createDesc, assign, keyOf, aFunction, forOf, isIterable, $iterCreate, step, isObject, toIObject, DESCRIPTORS, has, getKeys, createDictMethod, findKey, createDictIter, DictIterator;

  function Dict(iterable) {
    var dict = $.create(null);
    if (iterable != undefined) {
      if (isIterable(iterable)) {
        forOf(iterable, true, function (key, value) {
          dict[key] = value;
        });
      } else assign(dict, iterable);
    }
    return dict;
  }

  function reduce(object, mapfn, init) {
    aFunction(mapfn);
    var O = toIObject(object),
        keys = getKeys(O),
        length = keys.length,
        i = 0,
        memo,
        key;
    if (arguments.length < 3) {
      if (!length) throw TypeError('Reduce of empty object with no initial value');
      memo = O[keys[i++]];
    } else memo = Object(init);
    while (length > i) {
      if (has(O, key = keys[i++])) {
        memo = mapfn(memo, O[key], key, object);
      }
    }return memo;
  }
  function includes(object, el) {
    return (el == el ? keyOf(object, el) : findKey(object, function (it) {
      return it != it;
    })) !== undefined;
  }
  function get(object, key) {
    if (has(object, key)) return object[key];
  }
  function set(object, key, value) {
    if (DESCRIPTORS && key in Object) $.setDesc(object, key, createDesc(0, value));else object[key] = value;
    return object;
  }
  function isDict(it) {
    return isObject(it) && $.getProto(it) === Dict.prototype;
  }
  return {
    setters: [],
    execute: function () {
      $ = require('./$');
      ctx = require('./$.ctx');
      $export = require('./$.export');
      createDesc = require('./$.property-desc');
      assign = require('./$.object-assign');
      keyOf = require('./$.keyof');
      aFunction = require('./$.a-function');
      forOf = require('./$.for-of');
      isIterable = require('./core.is-iterable');
      $iterCreate = require('./$.iter-create');
      step = require('./$.iter-step');
      isObject = require('./$.is-object');
      toIObject = require('./$.to-iobject');
      DESCRIPTORS = require('./$.descriptors');
      has = require('./$.has');
      getKeys = $.getKeys;

      createDictMethod = function createDictMethod(TYPE) {
        var IS_MAP = TYPE == 1,
            IS_EVERY = TYPE == 4;
        return function (object, callbackfn, that) {
          var f = ctx(callbackfn, that, 3),
              O = toIObject(object),
              result = IS_MAP || TYPE == 7 || TYPE == 2 ? new (typeof this == 'function' ? this : Dict)() : undefined,
              key,
              val,
              res;
          for (key in O) {
            if (has(O, key)) {
              val = O[key];
              res = f(val, key, object);
              if (TYPE) {
                if (IS_MAP) result[key] = res;else if (res) switch (TYPE) {
                  case 2:
                    result[key] = val;
                    break;
                  case 3:
                    return true;
                  case 5:
                    return val;
                  case 6:
                    return key;
                  case 7:
                    result[res[0]] = res[1];
                } else if (IS_EVERY) return false;
              }
            }
          }return TYPE == 3 || IS_EVERY ? IS_EVERY : result;
        };
      };

      findKey = createDictMethod(6);

      createDictIter = function createDictIter(kind) {
        return function (it) {
          return new DictIterator(it, kind);
        };
      };

      DictIterator = function DictIterator(iterated, kind) {
        this._t = toIObject(iterated);
        this._a = getKeys(iterated);
        this._i = 0;
        this._k = kind;
      };

      $iterCreate(DictIterator, 'Dict', function () {
        var that = this,
            O = that._t,
            keys = that._a,
            kind = that._k,
            key;
        do {
          if (that._i >= keys.length) {
            that._t = undefined;
            return step(1);
          }
        } while (!has(O, key = keys[that._i++]));
        if (kind == 'keys') return step(0, key);
        if (kind == 'values') return step(0, O[key]);
        return step(0, [key, O[key]]);
      });Dict.prototype = null;$export($export.G + $export.F, { Dict: Dict });
      $export($export.S, 'Dict', {
        keys: createDictIter('keys'),
        values: createDictIter('values'),
        entries: createDictIter('entries'),
        forEach: createDictMethod(0),
        map: createDictMethod(1),
        filter: createDictMethod(2),
        some: createDictMethod(3),
        every: createDictMethod(4),
        find: createDictMethod(5),
        findKey: findKey,
        mapPairs: createDictMethod(7),
        reduce: reduce,
        keyOf: keyOf,
        includes: includes,
        has: has,
        get: get,
        set: set,
        isDict: isDict
      });
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvY29yZS5kaWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7QUFxRkEsV0FBUyxJQUFULENBQWMsUUFBZCxFQUF3QjtBQUN0QixRQUFJLE9BQU8sRUFBRSxNQUFGLENBQVMsSUFBVCxDQUFQLENBRGtCO0FBRXRCLFFBQUksWUFBWSxTQUFaLEVBQXVCO0FBQ3pCLFVBQUksV0FBVyxRQUFYLENBQUosRUFBMEI7QUFDeEIsY0FBTSxRQUFOLEVBQWdCLElBQWhCLEVBQXNCLFVBQVMsR0FBVCxFQUFjLEtBQWQsRUFBcUI7QUFDekMsZUFBSyxHQUFMLElBQVksS0FBWixDQUR5QztTQUFyQixDQUF0QixDQUR3QjtPQUExQixNQUtFLE9BQU8sSUFBUCxFQUFhLFFBQWIsRUFMRjtLQURGO0FBUUEsV0FBTyxJQUFQLENBVnNCO0dBQXhCOztBQWFBLFdBQVMsTUFBVCxDQUFnQixNQUFoQixFQUF3QixLQUF4QixFQUErQixJQUEvQixFQUFxQztBQUNuQyxjQUFVLEtBQVYsRUFEbUM7QUFFbkMsUUFBSSxJQUFJLFVBQVUsTUFBVixDQUFKO1FBQ0EsT0FBTyxRQUFRLENBQVIsQ0FBUDtRQUNBLFNBQVMsS0FBSyxNQUFMO1FBQ1QsSUFBSSxDQUFKO1FBQ0EsSUFKSjtRQUtJLEdBTEosQ0FGbUM7QUFRbkMsUUFBSSxVQUFVLE1BQVYsR0FBbUIsQ0FBbkIsRUFBc0I7QUFDeEIsVUFBSSxDQUFDLE1BQUQsRUFDRixNQUFNLFVBQVUsOENBQVYsQ0FBTixDQURGO0FBRUEsYUFBTyxFQUFFLEtBQUssR0FBTCxDQUFGLENBQVAsQ0FId0I7S0FBMUIsTUFLRSxPQUFPLE9BQU8sSUFBUCxDQUFQLENBTEY7QUFNQSxXQUFPLFNBQVMsQ0FBVDtBQUNMLFVBQUksSUFBSSxDQUFKLEVBQU8sTUFBTSxLQUFLLEdBQUwsQ0FBTixDQUFYLEVBQTZCO0FBQzNCLGVBQU8sTUFBTSxJQUFOLEVBQVksRUFBRSxHQUFGLENBQVosRUFB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RUFBTyxNQUFNLEtBQUssS0FBSyxFQUFMLEVBQUwsQ0FBTixDQUFSLEVBWGtDO0FBWTNDLFlBQUksUUFBUSxNQUFSLEVBQ0YsT0FBTyxLQUFLLENBQUwsRUFBUSxHQUFSLENBQVAsQ0FERjtBQUVBLFlBQUksUUFBUSxRQUFSLEVBQ0YsT0FBTyxLQUFLLENBQUwsRUFBUSxFQUFFLEdBQUYsQ0FBUixDQUFQLENBREY7QUFFQSxlQUFPLEtBQUssQ0FBTCxFQUFRLENBQUMsR0FBRCxFQUFNLEVBQUUsR0FBRixDQUFOLENBQVIsQ0FBUCxDQWhCMkM7T0FBWCxDQUFsQyxDQThCQSxLQUFLLFNBQUwsR0FBaUIsSUFBakIsQ0F3Q0EsUUFBUSxRQUFRLENBQVIsR0FBWSxRQUFRLENBQVIsRUFBVyxFQUFDLE1BQU0sSUFBTixFQUFoQztBQUNBLGNBQVEsUUFBUSxDQUFSLEVBQVcsTUFBbkIsRUFBMkI7QUFDekIsY0FBTSxlQUFlLE1BQWYsQ0FBTjtBQUNBLGdCQUFRLGVBQWUsUUFBZixDQUFSO0FBQ0EsaUJBQVMsZUFBZSxTQUFmLENBQVQ7QUFDQSxpQkFBUyxpQkFBaUIsQ0FBakIsQ0FBVDtBQUNBLGFBQUssaUJBQWlCLENBQWpCLENBQUw7QUFDQSxnQkFBUSxpQkFBaUIsQ0FBakIsQ0FBUjtBQUNBLGNBQU0saUJBQWlCLENBQWpCLENBQU47QUFDQSxlQUFPLGlCQUFpQixDQUFqQixDQUFQO0FBQ0EsY0FBTSxpQkFBaUIsQ0FBakIsQ0FBTjtBQUNBLGlCQUFTLE9BQVQ7QUFDQSxrQkFBVSxpQkFBaUIsQ0FBakIsQ0FBVjtBQUNBLGdCQUFRLE1BQVI7QUFDQSxlQUFPLEtBQVA7QUFDQSxrQkFBVSxRQUFWO0FBQ0EsYUFBSyxHQUFMO0FBQ0EsYUFBSyxHQUFMO0FBQ0EsYUFBSyxHQUFMO0FBQ0EsZ0JBQVEsTUFBUjtPQWxCRiIsImZpbGUiOiJucG0vY29yZS1qc0AxLjIuNi9tb2R1bGVzL2NvcmUuZGljdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLyQnKSxcbiAgICBjdHggPSByZXF1aXJlKCcuLyQuY3R4JyksXG4gICAgJGV4cG9ydCA9IHJlcXVpcmUoJy4vJC5leHBvcnQnKSxcbiAgICBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi8kLnByb3BlcnR5LWRlc2MnKSxcbiAgICBhc3NpZ24gPSByZXF1aXJlKCcuLyQub2JqZWN0LWFzc2lnbicpLFxuICAgIGtleU9mID0gcmVxdWlyZSgnLi8kLmtleW9mJyksXG4gICAgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi8kLmEtZnVuY3Rpb24nKSxcbiAgICBmb3JPZiA9IHJlcXVpcmUoJy4vJC5mb3Itb2YnKSxcbiAgICBpc0l0ZXJhYmxlID0gcmVxdWlyZSgnLi9jb3JlLmlzLWl0ZXJhYmxlJyksXG4gICAgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuLyQuaXRlci1jcmVhdGUnKSxcbiAgICBzdGVwID0gcmVxdWlyZSgnLi8kLml0ZXItc3RlcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmlzLW9iamVjdCcpLFxuICAgIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vJC50by1pb2JqZWN0JyksXG4gICAgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLyQuZGVzY3JpcHRvcnMnKSxcbiAgICBoYXMgPSByZXF1aXJlKCcuLyQuaGFzJyksXG4gICAgZ2V0S2V5cyA9ICQuZ2V0S2V5cztcbnZhciBjcmVhdGVEaWN0TWV0aG9kID0gZnVuY3Rpb24oVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxLFxuICAgICAgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKSxcbiAgICAgICAgTyA9IHRvSU9iamVjdChvYmplY3QpLFxuICAgICAgICByZXN1bHQgPSBJU19NQVAgfHwgVFlQRSA9PSA3IHx8IFRZUEUgPT0gMiA/IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBEaWN0KSA6IHVuZGVmaW5lZCxcbiAgICAgICAga2V5LFxuICAgICAgICB2YWwsXG4gICAgICAgIHJlcztcbiAgICBmb3IgKGtleSBpbiBPKVxuICAgICAgaWYgKGhhcyhPLCBrZXkpKSB7XG4gICAgICAgIHZhbCA9IE9ba2V5XTtcbiAgICAgICAgcmVzID0gZih2YWwsIGtleSwgb2JqZWN0KTtcbiAgICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgICBpZiAoSVNfTUFQKVxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSByZXM7XG4gICAgICAgICAgZWxzZSBpZiAocmVzKVxuICAgICAgICAgICAgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICByZXN1bHRbcmVzWzBdXSA9IHJlc1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChJU19FVkVSWSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIHJldHVybiBUWVBFID09IDMgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG52YXIgZmluZEtleSA9IGNyZWF0ZURpY3RNZXRob2QoNik7XG52YXIgY3JlYXRlRGljdEl0ZXIgPSBmdW5jdGlvbihraW5kKSB7XG4gIHJldHVybiBmdW5jdGlvbihpdCkge1xuICAgIHJldHVybiBuZXcgRGljdEl0ZXJhdG9yKGl0LCBraW5kKTtcbiAgfTtcbn07XG52YXIgRGljdEl0ZXJhdG9yID0gZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7XG4gIHRoaXMuX2EgPSBnZXRLZXlzKGl0ZXJhdGVkKTtcbiAgdGhpcy5faSA9IDA7XG4gIHRoaXMuX2sgPSBraW5kO1xufTtcbiRpdGVyQ3JlYXRlKERpY3RJdGVyYXRvciwgJ0RpY3QnLCBmdW5jdGlvbigpIHtcbiAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgTyA9IHRoYXQuX3QsXG4gICAgICBrZXlzID0gdGhhdC5fYSxcbiAgICAgIGtpbmQgPSB0aGF0Ll9rLFxuICAgICAga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICB9XG4gIH0gd2hpbGUgKCFoYXMoTywga2V5ID0ga2V5c1t0aGF0Ll9pKytdKSk7XG4gIGlmIChraW5kID09ICdrZXlzJylcbiAgICByZXR1cm4gc3RlcCgwLCBrZXkpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJylcbiAgICByZXR1cm4gc3RlcCgwLCBPW2tleV0pO1xuICByZXR1cm4gc3RlcCgwLCBba2V5LCBPW2tleV1dKTtcbn0pO1xuZnVuY3Rpb24gRGljdChpdGVyYWJsZSkge1xuICB2YXIgZGljdCA9ICQuY3JlYXRlKG51bGwpO1xuICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGlzSXRlcmFibGUoaXRlcmFibGUpKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgdHJ1ZSwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBkaWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZVxuICAgICAgYXNzaWduKGRpY3QsIGl0ZXJhYmxlKTtcbiAgfVxuICByZXR1cm4gZGljdDtcbn1cbkRpY3QucHJvdG90eXBlID0gbnVsbDtcbmZ1bmN0aW9uIHJlZHVjZShvYmplY3QsIG1hcGZuLCBpbml0KSB7XG4gIGFGdW5jdGlvbihtYXBmbik7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCksXG4gICAgICBrZXlzID0gZ2V0S2V5cyhPKSxcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgaSA9IDAsXG4gICAgICBtZW1vLFxuICAgICAga2V5O1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICBpZiAoIWxlbmd0aClcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IG9iamVjdCB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICBtZW1vID0gT1trZXlzW2krK11dO1xuICB9IGVsc2VcbiAgICBtZW1vID0gT2JqZWN0KGluaXQpO1xuICB3aGlsZSAobGVuZ3RoID4gaSlcbiAgICBpZiAoaGFzKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgIG1lbW8gPSBtYXBmbihtZW1vLCBPW2tleV0sIGtleSwgb2JqZWN0KTtcbiAgICB9XG4gIHJldHVybiBtZW1vO1xufVxuZnVuY3Rpb24gaW5jbHVkZXMob2JqZWN0LCBlbCkge1xuICByZXR1cm4gKGVsID09IGVsID8ga2V5T2Yob2JqZWN0LCBlbCkgOiBmaW5kS2V5KG9iamVjdCwgZnVuY3Rpb24oaXQpIHtcbiAgICByZXR1cm4gaXQgIT0gaXQ7XG4gIH0pKSAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZ2V0KG9iamVjdCwga2V5KSB7XG4gIGlmIChoYXMob2JqZWN0LCBrZXkpKVxuICAgIHJldHVybiBvYmplY3Rba2V5XTtcbn1cbmZ1bmN0aW9uIHNldChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKERFU0NSSVBUT1JTICYmIGtleSBpbiBPYmplY3QpXG4gICAgJC5zZXREZXNjKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2VcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufVxuZnVuY3Rpb24gaXNEaWN0KGl0KSB7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgJC5nZXRQcm90byhpdCkgPT09IERpY3QucHJvdG90eXBlO1xufVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYsIHtEaWN0OiBEaWN0fSk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ0RpY3QnLCB7XG4gIGtleXM6IGNyZWF0ZURpY3RJdGVyKCdrZXlzJyksXG4gIHZhbHVlczogY3JlYXRlRGljdEl0ZXIoJ3ZhbHVlcycpLFxuICBlbnRyaWVzOiBjcmVhdGVEaWN0SXRlcignZW50cmllcycpLFxuICBmb3JFYWNoOiBjcmVhdGVEaWN0TWV0aG9kKDApLFxuICBtYXA6IGNyZWF0ZURpY3RNZXRob2QoMSksXG4gIGZpbHRlcjogY3JlYXRlRGljdE1ldGhvZCgyKSxcbiAgc29tZTogY3JlYXRlRGljdE1ldGhvZCgzKSxcbiAgZXZlcnk6IGNyZWF0ZURpY3RNZXRob2QoNCksXG4gIGZpbmQ6IGNyZWF0ZURpY3RNZXRob2QoNSksXG4gIGZpbmRLZXk6IGZpbmRLZXksXG4gIG1hcFBhaXJzOiBjcmVhdGVEaWN0TWV0aG9kKDcpLFxuICByZWR1Y2U6IHJlZHVjZSxcbiAga2V5T2Y6IGtleU9mLFxuICBpbmNsdWRlczogaW5jbHVkZXMsXG4gIGhhczogaGFzLFxuICBnZXQ6IGdldCxcbiAgc2V0OiBzZXQsXG4gIGlzRGljdDogaXNEaWN0XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
