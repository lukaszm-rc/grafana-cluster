/* */
'use strict';

System.register([], function (_export, _context) {
  var $, global, $export, fails, hide, redefineAll, forOf, strictNew, isObject, setToStringTag, DESCRIPTORS;
  return {
    setters: [],
    execute: function () {
      $ = require('./$');
      global = require('./$.global');
      $export = require('./$.export');
      fails = require('./$.fails');
      hide = require('./$.hide');
      redefineAll = require('./$.redefine-all');
      forOf = require('./$.for-of');
      strictNew = require('./$.strict-new');
      isObject = require('./$.is-object');
      setToStringTag = require('./$.set-to-string-tag');
      DESCRIPTORS = require('./$.descriptors');

      module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
        var Base = global[NAME],
            C = Base,
            ADDER = IS_MAP ? 'set' : 'add',
            proto = C && C.prototype,
            O = {};
        if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
          new C().entries().next();
        }))) {
          C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
          redefineAll(C.prototype, methods);
        } else {
          C = wrapper(function (target, iterable) {
            strictNew(target, C, NAME);
            target._c = new Base();
            if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
          });
          $.each.call('add,clear,delete,forEach,get,has,set,keys,values,entries'.split(','), function (KEY) {
            var IS_ADDER = KEY == 'add' || KEY == 'set';
            if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
              if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
              var result = this._c[KEY](a === 0 ? 0 : a, b);
              return IS_ADDER ? this : result;
            });
          });
          if ('size' in proto) $.setDesc(C.prototype, 'size', { get: function get() {
              return this._c.size;
            } });
        }
        setToStringTag(C, NAME);
        O[NAME] = C;
        $export($export.G + $export.W + $export.F, O);
        if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
        return C;
      };
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvbGlicmFyeS8kLmNvbGxlY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBOzs7Ozs7O0FBQ0ksVUFBSSxRQUFRLEtBQVI7QUFDSixlQUFTLFFBQVEsWUFBUjtBQUNULGdCQUFVLFFBQVEsWUFBUjtBQUNWLGNBQVEsUUFBUSxXQUFSO0FBQ1IsYUFBTyxRQUFRLFVBQVI7QUFDUCxvQkFBYyxRQUFRLGtCQUFSO0FBQ2QsY0FBUSxRQUFRLFlBQVI7QUFDUixrQkFBWSxRQUFRLGdCQUFSO0FBQ1osaUJBQVcsUUFBUSxlQUFSO0FBQ1gsdUJBQWlCLFFBQVEsdUJBQVI7QUFDakIsb0JBQWMsUUFBUSxpQkFBUjs7QUFDbEIsYUFBTyxPQUFQLEdBQWlCLFVBQVMsSUFBVCxFQUFlLE9BQWYsRUFBd0IsT0FBeEIsRUFBaUMsTUFBakMsRUFBeUMsTUFBekMsRUFBaUQsT0FBakQsRUFBMEQ7QUFDekUsWUFBSSxPQUFPLE9BQU8sSUFBUCxDQUFQO1lBQ0EsSUFBSSxJQUFKO1lBQ0EsUUFBUSxTQUFTLEtBQVQsR0FBaUIsS0FBakI7WUFDUixRQUFRLEtBQUssRUFBRSxTQUFGO1lBQ2IsSUFBSSxFQUFKLENBTHFFO0FBTXpFLFlBQUksQ0FBQyxXQUFELElBQWdCLE9BQU8sQ0FBUCxJQUFZLFVBQVosSUFBMEIsRUFBRSxXQUFXLE1BQU0sT0FBTixJQUFpQixDQUFDLE1BQU0sWUFBVztBQUM1RixjQUFJLENBQUosR0FBUSxPQUFSLEdBQWtCLElBQWxCLEdBRDRGO1NBQVgsQ0FBUCxDQUE5QixFQUV6QztBQUNILGNBQUksT0FBTyxjQUFQLENBQXNCLE9BQXRCLEVBQStCLElBQS9CLEVBQXFDLE1BQXJDLEVBQTZDLEtBQTdDLENBQUosQ0FERztBQUVILHNCQUFZLEVBQUUsU0FBRixFQUFhLE9BQXpCLEVBRkc7U0FGTCxNQUtPO0FBQ0wsY0FBSSxRQUFRLFVBQVMsTUFBVCxFQUFpQixRQUFqQixFQUEyQjtBQUNyQyxzQkFBVSxNQUFWLEVBQWtCLENBQWxCLEVBQXFCLElBQXJCLEVBRHFDO0FBRXJDLG1CQUFPLEVBQVAsR0FBWSxJQUFJLElBQUosRUFBWixDQUZxQztBQUdyQyxnQkFBSSxZQUFZLFNBQVosRUFDRixNQUFNLFFBQU4sRUFBZ0IsTUFBaEIsRUFBd0IsT0FBTyxLQUFQLENBQXhCLEVBQXVDLE1BQXZDLEVBREY7V0FIVSxDQUFaLENBREs7QUFPTCxZQUFFLElBQUYsQ0FBTyxJQUFQLENBQVksMkRBQTJELEtBQTNELENBQWlFLEdBQWpFLENBQVosRUFBbUYsVUFBUyxHQUFULEVBQWM7QUFDL0YsZ0JBQUksV0FBVyxPQUFPLEtBQVAsSUFBZ0IsT0FBTyxLQUFQLENBRGdFO0FBRS9GLGdCQUFJLE9BQU8sS0FBUCxJQUFnQixFQUFFLFdBQVcsT0FBTyxPQUFQLENBQWIsRUFDbEIsS0FBSyxFQUFFLFNBQUYsRUFBYSxHQUFsQixFQUF1QixVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDcEMsa0JBQUksQ0FBQyxRQUFELElBQWEsT0FBYixJQUF3QixDQUFDLFNBQVMsQ0FBVCxDQUFELEVBQzFCLE9BQU8sT0FBTyxLQUFQLEdBQWUsU0FBZixHQUEyQixLQUEzQixDQURUO0FBRUEsa0JBQUksU0FBUyxLQUFLLEVBQUwsQ0FBUSxHQUFSLEVBQWEsTUFBTSxDQUFOLEdBQVUsQ0FBVixHQUFjLENBQWQsRUFBaUIsQ0FBOUIsQ0FBVCxDQUhnQztBQUlwQyxxQkFBTyxXQUFXLElBQVgsR0FBa0IsTUFBbEIsQ0FKNkI7YUFBZixDQUF2QixDQURGO1dBRmlGLENBQW5GLENBUEs7QUFpQkwsY0FBSSxVQUFVLEtBQVYsRUFDRixFQUFFLE9BQUYsQ0FBVSxFQUFFLFNBQUYsRUFBYSxNQUF2QixFQUErQixFQUFDLEtBQUssZUFBVztBQUM1QyxxQkFBTyxLQUFLLEVBQUwsQ0FBUSxJQUFSLENBRHFDO2FBQVgsRUFBckMsRUFERjtTQXRCRjtBQTJCQSx1QkFBZSxDQUFmLEVBQWtCLElBQWxCLEVBakN5RTtBQWtDekUsVUFBRSxJQUFGLElBQVUsQ0FBVixDQWxDeUU7QUFtQ3pFLGdCQUFRLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBUixFQUFXLENBQTNDLEVBbkN5RTtBQW9DekUsWUFBSSxDQUFDLE9BQUQsRUFDRixPQUFPLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0IsSUFBcEIsRUFBMEIsTUFBMUIsRUFERjtBQUVBLGVBQU8sQ0FBUCxDQXRDeUU7T0FBMUQiLCJmaWxlIjoibnBtL2NvcmUtanNAMS4yLjYvbW9kdWxlcy9saWJyYXJ5LyQuY29sbGVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLyQnKSxcbiAgICBnbG9iYWwgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJyksXG4gICAgJGV4cG9ydCA9IHJlcXVpcmUoJy4vJC5leHBvcnQnKSxcbiAgICBmYWlscyA9IHJlcXVpcmUoJy4vJC5mYWlscycpLFxuICAgIGhpZGUgPSByZXF1aXJlKCcuLyQuaGlkZScpLFxuICAgIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi8kLnJlZGVmaW5lLWFsbCcpLFxuICAgIGZvck9mID0gcmVxdWlyZSgnLi8kLmZvci1vZicpLFxuICAgIHN0cmljdE5ldyA9IHJlcXVpcmUoJy4vJC5zdHJpY3QtbmV3JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuLyQuaXMtb2JqZWN0JyksXG4gICAgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLyQuc2V0LXRvLXN0cmluZy10YWcnKSxcbiAgICBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vJC5kZXNjcmlwdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXSxcbiAgICAgIEMgPSBCYXNlLFxuICAgICAgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnLFxuICAgICAgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlLFxuICAgICAgTyA9IHt9O1xuICBpZiAoIURFU0NSSVBUT1JTIHx8IHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIH0gZWxzZSB7XG4gICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgc3RyaWN0TmV3KHRhcmdldCwgQywgTkFNRSk7XG4gICAgICB0YXJnZXQuX2MgPSBuZXcgQmFzZTtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpXG4gICAgICAgIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRhcmdldFtBRERFUl0sIHRhcmdldCk7XG4gICAgfSk7XG4gICAgJC5lYWNoLmNhbGwoJ2FkZCxjbGVhcixkZWxldGUsZm9yRWFjaCxnZXQsaGFzLHNldCxrZXlzLHZhbHVlcyxlbnRyaWVzJy5zcGxpdCgnLCcpLCBmdW5jdGlvbihLRVkpIHtcbiAgICAgIHZhciBJU19BRERFUiA9IEtFWSA9PSAnYWRkJyB8fCBLRVkgPT0gJ3NldCc7XG4gICAgICBpZiAoS0VZIGluIHByb3RvICYmICEoSVNfV0VBSyAmJiBLRVkgPT0gJ2NsZWFyJykpXG4gICAgICAgIGhpZGUoQy5wcm90b3R5cGUsIEtFWSwgZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIGlmICghSVNfQURERVIgJiYgSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkpXG4gICAgICAgICAgICByZXR1cm4gS0VZID09ICdnZXQnID8gdW5kZWZpbmVkIDogZmFsc2U7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2NbS0VZXShhID09PSAwID8gMCA6IGEsIGIpO1xuICAgICAgICAgIHJldHVybiBJU19BRERFUiA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmICgnc2l6ZScgaW4gcHJvdG8pXG4gICAgICAkLnNldERlc2MoQy5wcm90b3R5cGUsICdzaXplJywge2dldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Muc2l6ZTtcbiAgICAgICAgfX0pO1xuICB9XG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYsIE8pO1xuICBpZiAoIUlTX1dFQUspXG4gICAgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuICByZXR1cm4gQztcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
