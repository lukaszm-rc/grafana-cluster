/* */
'use strict';

System.register([], function (_export, _context) {
  var $, global, has, cof, toPrimitive, fails, $trim, NUMBER, $Number, Base, proto, BROKEN_COF, TRIM, toNumber;
  return {
    setters: [],
    execute: function () {
      $ = require('./$');
      global = require('./$.global');
      has = require('./$.has');
      cof = require('./$.cof');
      toPrimitive = require('./$.to-primitive');
      fails = require('./$.fails');
      $trim = require('./$.string-trim').trim;
      NUMBER = 'Number';
      $Number = global[NUMBER];
      Base = $Number;
      proto = $Number.prototype;
      BROKEN_COF = cof($.create(proto)) == NUMBER;
      TRIM = 'trim' in String.prototype;

      toNumber = function toNumber(argument) {
        var it = toPrimitive(argument, false);
        if (typeof it == 'string' && it.length > 2) {
          it = TRIM ? it.trim() : $trim(it, 3);
          var first = it.charCodeAt(0),
              third,
              radix,
              maxCode;
          if (first === 43 || first === 45) {
            third = it.charCodeAt(2);
            if (third === 88 || third === 120) return NaN;
          } else if (first === 48) {
            switch (it.charCodeAt(1)) {
              case 66:
              case 98:
                radix = 2;
                maxCode = 49;
                break;
              case 79:
              case 111:
                radix = 8;
                maxCode = 55;
                break;
              default:
                return +it;
            }
            for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
              code = digits.charCodeAt(i);
              if (code < 48 || code > maxCode) return NaN;
            }
            return parseInt(digits, radix);
          }
        }
        return +it;
      };

      if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
        $Number = function Number(value) {
          var it = arguments.length < 1 ? 0 : value,
              that = this;
          return that instanceof $Number && (BROKEN_COF ? fails(function () {
            proto.valueOf.call(that);
          }) : cof(that) != NUMBER) ? new Base(toNumber(it)) : toNumber(it);
        };
        $.each.call(require('./$.descriptors') ? $.getNames(Base) : ('MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + 'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), function (key) {
          if (has(Base, key) && !has($Number, key)) {
            $.setDesc($Number, key, $.getDesc(Base, key));
          }
        });
        $Number.prototype = proto;
        proto.constructor = $Number;
        require('./$.redefine')(global, NUMBER, $Number);
      }
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7Ozs7Ozs7QUFDSSxVQUFJLFFBQVEsS0FBUjtBQUNKLGVBQVMsUUFBUSxZQUFSO0FBQ1QsWUFBTSxRQUFRLFNBQVI7QUFDTixZQUFNLFFBQVEsU0FBUjtBQUNOLG9CQUFjLFFBQVEsa0JBQVI7QUFDZCxjQUFRLFFBQVEsV0FBUjtBQUNSLGNBQVEsUUFBUSxpQkFBUixFQUEyQixJQUEzQjtBQUNSLGVBQVM7QUFDVCxnQkFBVSxPQUFPLE1BQVA7QUFDVixhQUFPO0FBQ1AsY0FBUSxRQUFRLFNBQVI7QUFDUixtQkFBYSxJQUFJLEVBQUUsTUFBRixDQUFTLEtBQVQsQ0FBSixLQUF3QixNQUF4QjtBQUNiLGFBQU8sVUFBVSxPQUFPLFNBQVA7O0FBQ2pCLGlCQUFXLFNBQVgsUUFBVyxDQUFTLFFBQVQsRUFBbUI7QUFDaEMsWUFBSSxLQUFLLFlBQVksUUFBWixFQUFzQixLQUF0QixDQUFMLENBRDRCO0FBRWhDLFlBQUksT0FBTyxFQUFQLElBQWEsUUFBYixJQUF5QixHQUFHLE1BQUgsR0FBWSxDQUFaLEVBQWU7QUFDMUMsZUFBSyxPQUFPLEdBQUcsSUFBSCxFQUFQLEdBQW1CLE1BQU0sRUFBTixFQUFVLENBQVYsQ0FBbkIsQ0FEcUM7QUFFMUMsY0FBSSxRQUFRLEdBQUcsVUFBSCxDQUFjLENBQWQsQ0FBUjtjQUNBLEtBREo7Y0FFSSxLQUZKO2NBR0ksT0FISixDQUYwQztBQU0xQyxjQUFJLFVBQVUsRUFBVixJQUFnQixVQUFVLEVBQVYsRUFBYztBQUNoQyxvQkFBUSxHQUFHLFVBQUgsQ0FBYyxDQUFkLENBQVIsQ0FEZ0M7QUFFaEMsZ0JBQUksVUFBVSxFQUFWLElBQWdCLFVBQVUsR0FBVixFQUNsQixPQUFPLEdBQVAsQ0FERjtXQUZGLE1BSU8sSUFBSSxVQUFVLEVBQVYsRUFBYztBQUN2QixvQkFBUSxHQUFHLFVBQUgsQ0FBYyxDQUFkLENBQVI7QUFDRSxtQkFBSyxFQUFMLENBREY7QUFFRSxtQkFBSyxFQUFMO0FBQ0Usd0JBQVEsQ0FBUixDQURGO0FBRUUsMEJBQVUsRUFBVixDQUZGO0FBR0Usc0JBSEY7QUFGRixtQkFNTyxFQUFMLENBTkY7QUFPRSxtQkFBSyxHQUFMO0FBQ0Usd0JBQVEsQ0FBUixDQURGO0FBRUUsMEJBQVUsRUFBVixDQUZGO0FBR0Usc0JBSEY7QUFQRjtBQVlJLHVCQUFPLENBQUMsRUFBRCxDQURUO0FBWEYsYUFEdUI7QUFldkIsaUJBQUssSUFBSSxTQUFTLEdBQUcsS0FBSCxDQUFTLENBQVQsQ0FBVCxFQUNMLElBQUksQ0FBSixFQUNBLElBQUksT0FBTyxNQUFQLEVBQ0osSUFIQyxFQUdLLElBQUksQ0FBSixFQUFPLEdBSGpCLEVBR3NCO0FBQ3BCLHFCQUFPLE9BQU8sVUFBUCxDQUFrQixDQUFsQixDQUFQLENBRG9CO0FBRXBCLGtCQUFJLE9BQU8sRUFBUCxJQUFhLE9BQU8sT0FBUCxFQUNmLE9BQU8sR0FBUCxDQURGO2FBTEY7QUFRQSxtQkFBTyxTQUFTLE1BQVQsRUFBaUIsS0FBakIsQ0FBUCxDQXZCdUI7V0FBbEI7U0FWVDtBQW9DQSxlQUFPLENBQUMsRUFBRCxDQXRDeUI7T0FBbkI7O0FBd0NmLFVBQUksQ0FBQyxRQUFRLE1BQVIsQ0FBRCxJQUFvQixDQUFDLFFBQVEsS0FBUixDQUFELElBQW1CLFFBQVEsTUFBUixDQUF2QyxFQUF3RDtBQUMxRCxrQkFBVSxTQUFTLE1BQVQsQ0FBZ0IsS0FBaEIsRUFBdUI7QUFDL0IsY0FBSSxLQUFLLFVBQVUsTUFBVixHQUFtQixDQUFuQixHQUF1QixDQUF2QixHQUEyQixLQUEzQjtjQUNMLE9BQU8sSUFBUCxDQUYyQjtBQUcvQixpQkFBTyxnQkFBZ0IsT0FBaEIsS0FBNEIsYUFBYSxNQUFNLFlBQVc7QUFDL0Qsa0JBQU0sT0FBTixDQUFjLElBQWQsQ0FBbUIsSUFBbkIsRUFEK0Q7V0FBWCxDQUFuQixHQUU5QixJQUFJLElBQUosS0FBYSxNQUFiLENBRkUsR0FFcUIsSUFBSSxJQUFKLENBQVMsU0FBUyxFQUFULENBQVQsQ0FGckIsR0FFOEMsU0FBUyxFQUFULENBRjlDLENBSHdCO1NBQXZCLENBRGdEO0FBUTFELFVBQUUsSUFBRixDQUFPLElBQVAsQ0FBWSxRQUFRLGlCQUFSLElBQTZCLEVBQUUsUUFBRixDQUFXLElBQVgsQ0FBN0IsR0FBZ0QsQ0FBQyxpRUFBaUUsa0VBQWpFLEdBQXNJLGdEQUF0SSxDQUFELENBQXlMLEtBQXpMLENBQStMLEdBQS9MLENBQWhELEVBQXFQLFVBQVMsR0FBVCxFQUFjO0FBQzdRLGNBQUksSUFBSSxJQUFKLEVBQVUsR0FBVixLQUFrQixDQUFDLElBQUksT0FBSixFQUFhLEdBQWIsQ0FBRCxFQUFvQjtBQUN4QyxjQUFFLE9BQUYsQ0FBVSxPQUFWLEVBQW1CLEdBQW5CLEVBQXdCLEVBQUUsT0FBRixDQUFVLElBQVYsRUFBZ0IsR0FBaEIsQ0FBeEIsRUFEd0M7V0FBMUM7U0FEK1AsQ0FBalEsQ0FSMEQ7QUFhMUQsZ0JBQVEsU0FBUixHQUFvQixLQUFwQixDQWIwRDtBQWMxRCxjQUFNLFdBQU4sR0FBb0IsT0FBcEIsQ0FkMEQ7QUFlMUQsZ0JBQVEsY0FBUixFQUF3QixNQUF4QixFQUFnQyxNQUFoQyxFQUF3QyxPQUF4QyxFQWYwRDtPQUE1RCIsImZpbGUiOiJucG0vY29yZS1qc0AxLjIuNi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi8kJyksXG4gICAgZ2xvYmFsID0gcmVxdWlyZSgnLi8kLmdsb2JhbCcpLFxuICAgIGhhcyA9IHJlcXVpcmUoJy4vJC5oYXMnKSxcbiAgICBjb2YgPSByZXF1aXJlKCcuLyQuY29mJyksXG4gICAgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLyQudG8tcHJpbWl0aXZlJyksXG4gICAgZmFpbHMgPSByZXF1aXJlKCcuLyQuZmFpbHMnKSxcbiAgICAkdHJpbSA9IHJlcXVpcmUoJy4vJC5zdHJpbmctdHJpbScpLnRyaW0sXG4gICAgTlVNQkVSID0gJ051bWJlcicsXG4gICAgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdLFxuICAgIEJhc2UgPSAkTnVtYmVyLFxuICAgIHByb3RvID0gJE51bWJlci5wcm90b3R5cGUsXG4gICAgQlJPS0VOX0NPRiA9IGNvZigkLmNyZWF0ZShwcm90bykpID09IE5VTUJFUixcbiAgICBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbihhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKSxcbiAgICAgICAgdGhpcmQsXG4gICAgICAgIHJhZGl4LFxuICAgICAgICBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApXG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OlxuICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgIHJhZGl4ID0gMjtcbiAgICAgICAgICBtYXhDb2RlID0gNDk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzk6XG4gICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgIHJhZGl4ID0gODtcbiAgICAgICAgICBtYXhDb2RlID0gNTU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLFxuICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgIGwgPSBkaWdpdHMubGVuZ3RoLFxuICAgICAgICAgIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKVxuICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiAraXQ7XG59O1xuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWUsXG4gICAgICAgIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlciAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uKCkge1xuICAgICAgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpO1xuICAgIH0pIDogY29mKHRoYXQpICE9IE5VTUJFUikgPyBuZXcgQmFzZSh0b051bWJlcihpdCkpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICAkLmVhY2guY2FsbChyZXF1aXJlKCcuLyQuZGVzY3JpcHRvcnMnKSA/ICQuZ2V0TmFtZXMoQmFzZSkgOiAoJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgKyAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgKyAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcicpLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChoYXMoQmFzZSwga2V5KSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgICQuc2V0RGVzYygkTnVtYmVyLCBrZXksICQuZ2V0RGVzYyhCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH0pO1xuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vJC5yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
