/* */
'use strict';

System.register([], function (_export, _context) {
  var global, $export, redefine, redefineAll, forOf, strictNew, isObject, fails, $iterDetect, setToStringTag;
  return {
    setters: [],
    execute: function () {
      global = require('./$.global');
      $export = require('./$.export');
      redefine = require('./$.redefine');
      redefineAll = require('./$.redefine-all');
      forOf = require('./$.for-of');
      strictNew = require('./$.strict-new');
      isObject = require('./$.is-object');
      fails = require('./$.fails');
      $iterDetect = require('./$.iter-detect');
      setToStringTag = require('./$.set-to-string-tag');

      module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
        var Base = global[NAME],
            C = Base,
            ADDER = IS_MAP ? 'set' : 'add',
            proto = C && C.prototype,
            O = {};
        var fixMethod = function fixMethod(KEY) {
          var fn = proto[KEY];
          redefine(proto, KEY, KEY == 'delete' ? function (a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'has' ? function has(a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'get' ? function get(a) {
            return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'add' ? function add(a) {
            fn.call(this, a === 0 ? 0 : a);
            return this;
          } : function set(a, b) {
            fn.call(this, a === 0 ? 0 : a, b);
            return this;
          });
        };
        if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
          new C().entries().next();
        }))) {
          C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
          redefineAll(C.prototype, methods);
        } else {
          var instance = new C(),
              HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance,
              THROWS_ON_PRIMITIVES = fails(function () {
            instance.has(1);
          }),
              ACCEPT_ITERABLES = $iterDetect(function (iter) {
            new C(iter);
          }),
              BUGGY_ZERO;
          if (!ACCEPT_ITERABLES) {
            C = wrapper(function (target, iterable) {
              strictNew(target, C, NAME);
              var that = new Base();
              if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
              return that;
            });
            C.prototype = proto;
            proto.constructor = C;
          }
          IS_WEAK || instance.forEach(function (val, key) {
            BUGGY_ZERO = 1 / key === -Infinity;
          });
          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod('delete');
            fixMethod('has');
            IS_MAP && fixMethod('get');
          }
          if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
          if (IS_WEAK && proto.clear) delete proto.clear;
        }
        setToStringTag(C, NAME);
        O[NAME] = C;
        $export($export.G + $export.W + $export.F * (C != Base), O);
        if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
        return C;
      };
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9jb3JlLWpzQDEuMi42L21vZHVsZXMvJC5jb2xsZWN0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7OztBQUNJLGVBQVMsUUFBUSxZQUFSO0FBQ1QsZ0JBQVUsUUFBUSxZQUFSO0FBQ1YsaUJBQVcsUUFBUSxjQUFSO0FBQ1gsb0JBQWMsUUFBUSxrQkFBUjtBQUNkLGNBQVEsUUFBUSxZQUFSO0FBQ1Isa0JBQVksUUFBUSxnQkFBUjtBQUNaLGlCQUFXLFFBQVEsZUFBUjtBQUNYLGNBQVEsUUFBUSxXQUFSO0FBQ1Isb0JBQWMsUUFBUSxpQkFBUjtBQUNkLHVCQUFpQixRQUFRLHVCQUFSOztBQUNyQixhQUFPLE9BQVAsR0FBaUIsVUFBUyxJQUFULEVBQWUsT0FBZixFQUF3QixPQUF4QixFQUFpQyxNQUFqQyxFQUF5QyxNQUF6QyxFQUFpRCxPQUFqRCxFQUEwRDtBQUN6RSxZQUFJLE9BQU8sT0FBTyxJQUFQLENBQVA7WUFDQSxJQUFJLElBQUo7WUFDQSxRQUFRLFNBQVMsS0FBVCxHQUFpQixLQUFqQjtZQUNSLFFBQVEsS0FBSyxFQUFFLFNBQUY7WUFDYixJQUFJLEVBQUosQ0FMcUU7QUFNekUsWUFBSSxZQUFZLFNBQVosU0FBWSxDQUFTLEdBQVQsRUFBYztBQUM1QixjQUFJLEtBQUssTUFBTSxHQUFOLENBQUwsQ0FEd0I7QUFFNUIsbUJBQVMsS0FBVCxFQUFnQixHQUFoQixFQUFxQixPQUFPLFFBQVAsR0FBa0IsVUFBUyxDQUFULEVBQVk7QUFDakQsbUJBQU8sV0FBVyxDQUFDLFNBQVMsQ0FBVCxDQUFELEdBQWUsS0FBMUIsR0FBa0MsR0FBRyxJQUFILENBQVEsSUFBUixFQUFjLE1BQU0sQ0FBTixHQUFVLENBQVYsR0FBYyxDQUFkLENBQWhELENBRDBDO1dBQVosR0FFbkMsT0FBTyxLQUFQLEdBQWUsU0FBUyxHQUFULENBQWEsQ0FBYixFQUFnQjtBQUNqQyxtQkFBTyxXQUFXLENBQUMsU0FBUyxDQUFULENBQUQsR0FBZSxLQUEx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ZSxDQUFmLEVBQWtCLElBQWxCLEVBN0R5RTtBQThEekUsVUFBRSxJQUFGLElBQVUsQ0FBVixDQTlEeUU7QUErRHpFLGdCQUFRLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBUixHQUFZLFFBQVEsQ0FBUixJQUFhLEtBQUssSUFBTCxDQUFiLEVBQXlCLENBQXpELEVBL0R5RTtBQWdFekUsWUFBSSxDQUFDLE9BQUQsRUFDRixPQUFPLFNBQVAsQ0FBaUIsQ0FBakIsRUFBb0IsSUFBcEIsRUFBMEIsTUFBMUIsRUFERjtBQUVBLGVBQU8sQ0FBUCxDQWxFeUU7T0FBMUQiLCJmaWxlIjoibnBtL2NvcmUtanNAMS4yLjYvbW9kdWxlcy8kLmNvbGxlY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJyksXG4gICAgJGV4cG9ydCA9IHJlcXVpcmUoJy4vJC5leHBvcnQnKSxcbiAgICByZWRlZmluZSA9IHJlcXVpcmUoJy4vJC5yZWRlZmluZScpLFxuICAgIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi8kLnJlZGVmaW5lLWFsbCcpLFxuICAgIGZvck9mID0gcmVxdWlyZSgnLi8kLmZvci1vZicpLFxuICAgIHN0cmljdE5ldyA9IHJlcXVpcmUoJy4vJC5zdHJpY3QtbmV3JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuLyQuaXMtb2JqZWN0JyksXG4gICAgZmFpbHMgPSByZXF1aXJlKCcuLyQuZmFpbHMnKSxcbiAgICAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vJC5pdGVyLWRldGVjdCcpLFxuICAgIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi8kLnNldC10by1zdHJpbmctdGFnJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdLFxuICAgICAgQyA9IEJhc2UsXG4gICAgICBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCcsXG4gICAgICBwcm90byA9IEMgJiYgQy5wcm90b3R5cGUsXG4gICAgICBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbihLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uKGEpIHtcbiAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7XG4gICAgICBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IDogZnVuY3Rpb24gc2V0KGEsIGIpIHtcbiAgICAgIGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0pO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQyxcbiAgICAgICAgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlLFxuICAgICAgICBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGluc3RhbmNlLmhhcygxKTtcbiAgICAgICAgfSksXG4gICAgICAgIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKSB7XG4gICAgICAgICAgbmV3IEMoaXRlcik7XG4gICAgICAgIH0pLFxuICAgICAgICBCVUdHWV9aRVJPO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBzdHJpY3ROZXcodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBuZXcgQmFzZTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClcbiAgICAgICAgICBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBJU19XRUFLIHx8IGluc3RhbmNlLmZvckVhY2goZnVuY3Rpb24odmFsLCBrZXkpIHtcbiAgICAgIEJVR0dZX1pFUk8gPSAxIC8ga2V5ID09PSAtSW5maW5pdHk7XG4gICAgfSk7XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKVxuICAgICAgZml4TWV0aG9kKEFEREVSKTtcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcilcbiAgICAgIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuICBpZiAoIUlTX1dFQUspXG4gICAgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuICByZXR1cm4gQztcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
