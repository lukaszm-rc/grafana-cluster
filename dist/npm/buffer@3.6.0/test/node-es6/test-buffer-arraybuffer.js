'use strict';

System.register([], function (_export, _context) {
  return {
    setters: [],
    execute: function () {
      /* */
      (function (process) {
        'use strict';

        if (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;
        var Buffer = require('../../index').Buffer;
        var common = {};
        var assert = require('assert');
        var Buffer = require('../../index').Buffer;
        var LENGTH = 16;
        var ab = new ArrayBuffer(LENGTH);
        var dv = new DataView(ab);
        var ui = new Uint8Array(ab);
        var buf = new Buffer(ab);
        assert.ok(Buffer.isBuffer(buf));
        assert.equal(buf.parent, undefined);
        assert.equal(buf.buffer, ab);
        assert.equal(buf.length, ab.byteLength);
        buf.fill(0xC);
        for (var i = 0; i < LENGTH; i++) {
          assert.equal(ui[i], 0xC);
          ui[i] = 0xF;
          assert.equal(buf[i], 0xF);
        }
        buf.writeUInt32LE(0xF00, 0);
        buf.writeUInt32BE(0xB47, 4);
        buf.writeDoubleLE(3.1415, 8);
        assert.equal(dv.getUint32(0, true), 0xF00);
        assert.equal(dv.getUint32(4), 0xB47);
        assert.equal(dv.getFloat64(8, true), 3.1415);
        assert.throws(function () {
          function AB() {}
          AB.__proto__ = ArrayBuffer;
          AB.prototype.__proto__ = ArrayBuffer.prototype;
          new Buffer(new AB());
        }, TypeError);
      })(require('process'));
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9idWZmZXJAMy42LjAvdGVzdC9ub2RlLWVzNi90ZXN0LWJ1ZmZlci1hcnJheWJ1ZmZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsT0FBQyxVQUFTLE9BQVQsRUFBa0I7QUFDakIscUJBRGlCOztBQUVqQixZQUFJLFFBQVEsR0FBUixDQUFZLFdBQVosRUFDRixPQUFPLG1CQUFQLEdBQTZCLEtBQTdCLENBREY7QUFFQSxZQUFJLFNBQVMsUUFBUSxhQUFSLEVBQXVCLE1BQXZCLENBSkk7QUFLakIsWUFBSSxTQUFTLEVBQVQsQ0FMYTtBQU1qQixZQUFJLFNBQVMsUUFBUSxRQUFSLENBQVQsQ0FOYTtBQU9qQixZQUFJLFNBQVMsUUFBUSxhQUFSLEVBQXVCLE1BQXZCLENBUEk7QUFRakIsWUFBSSxTQUFTLEVBQVQsQ0FSYTtBQVNqQixZQUFJLEtBQUssSUFBSSxXQUFKLENBQWdCLE1BQWhCLENBQUwsQ0FUYTtBQVVqQixZQUFJLEtBQUssSUFBSSxRQUFKLENBQWEsRUFBYixDQUFMLENBVmE7QUFXakIsWUFBSSxLQUFLLElBQUksVUFBSixDQUFlLEVBQWYsQ0FBTCxDQVhhO0FBWWpCLFlBQUksTUFBTSxJQUFJLE1BQUosQ0FBVyxFQUFYLENBQU4sQ0FaYTtBQWFqQixlQUFPLEVBQVAsQ0FBVSxPQUFPLFFBQVAsQ0FBZ0IsR0FBaEIsQ0FBVixFQWJpQjtBQWNqQixlQUFPLEtBQVAsQ0FBYSxJQUFJLE1BQUosRUFBWSxTQUF6QixFQWRpQjtBQWVqQixlQUFPLEtBQVAsQ0FBYSxJQUFJLE1BQUosRUFBWSxFQUF6QixFQWZpQjtBQWdCakIsZUFBTyxLQUFQLENBQWEsSUFBSSxNQUFKLEVBQVksR0FBRyxVQUFILENBQXpCLENBaEJpQjtBQWlCakIsWUFBSSxJQUFKLENBQVMsR0FBVCxFQWpCaUI7QUFrQmpCLGFBQUssSUFBSSxJQUFJLENBQUosRUFBTyxJQUFJLE1BQUosRUFBWSxHQUE1QixFQUFpQztBQUMvQixpQkFBTyxLQUFQLENBQWEsR0FBRyxDQUFILENBQWIsRUFBb0IsR0FBcEIsRUFEK0I7QUFFL0IsYUFBRyxDQUFILElBQVEsR0FBUixDQUYrQjtBQUcvQixpQkFBTyxLQUFQLENBQWEsSUFBSSxDQUFKLENBQWIsRUFBcUIsR0FBckIsRUFIK0I7U0FBakM7QUFLQSxZQUFJLGFBQUosQ0FBa0IsS0FBbEIsRUFBeUIsQ0FBekIsRUF2QmlCO0FBd0JqQixZQUFJLGFBQUosQ0FBa0IsS0FBbEIsRUFBeUIsQ0FBekIsRUF4QmlCO0FBeUJqQixZQUFJLGFBQUosQ0FBa0IsTUFBbEIsRUFBMEIsQ0FBMUIsRUF6QmlCO0FBMEJqQixlQUFPLEtBQVAsQ0FBYSxHQUFHLFNBQUgsQ0FBYSxDQUFiLEVBQWdCLElBQWhCLENBQWIsRUFBb0MsS0FBcEMsRUExQmlCO0FBMkJqQixlQUFPLEtBQVAsQ0FBYSxHQUFHLFNBQUgsQ0FBYSxDQUFiLENBQWIsRUFBOEIsS0FBOUIsRUEzQmlCO0FBNEJqQixlQUFPLEtBQVAsQ0FBYSxHQUFHLFVBQUgsQ0FBYyxDQUFkLEVBQWlCLElBQWpCLENBQWIsRUFBcUMsTUFBckMsRUE1QmlCO0FBNkJqQixlQUFPLE1BQVAsQ0FBYyxZQUFXO0FBQ3ZCLG1CQUFTLEVBQVQsR0FBYyxFQUFkO0FBQ0EsYUFBRyxTQUFILEdBQWUsV0FBZixDQUZ1QjtBQUd2QixhQUFHLFNBQUgsQ0FBYSxTQUFiLEdBQXlCLFlBQVksU0FBWixDQUhGO0FBSXZCLGNBQUksTUFBSixDQUFXLElBQUksRUFBSixFQUFYLEVBSnVCO1NBQVgsRUFLWCxTQUxILEVBN0JpQjtPQUFsQixDQUFELENBbUNHLFFBQVEsU0FBUixDQW5DSCIsImZpbGUiOiJucG0vYnVmZmVyQDMuNi4wL3Rlc3Qvbm9kZS1lczYvdGVzdC1idWZmZXItYXJyYXlidWZmZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHByb2Nlc3MuZW52Lk9CSkVDVF9JTVBMKVxuICAgIGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZmFsc2U7XG4gIHZhciBCdWZmZXIgPSByZXF1aXJlKCcuLi8uLi9pbmRleCcpLkJ1ZmZlcjtcbiAgdmFyIGNvbW1vbiA9IHt9O1xuICB2YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG4gIHZhciBCdWZmZXIgPSByZXF1aXJlKCcuLi8uLi9pbmRleCcpLkJ1ZmZlcjtcbiAgdmFyIExFTkdUSCA9IDE2O1xuICB2YXIgYWIgPSBuZXcgQXJyYXlCdWZmZXIoTEVOR1RIKTtcbiAgdmFyIGR2ID0gbmV3IERhdGFWaWV3KGFiKTtcbiAgdmFyIHVpID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihhYik7XG4gIGFzc2VydC5vayhCdWZmZXIuaXNCdWZmZXIoYnVmKSk7XG4gIGFzc2VydC5lcXVhbChidWYucGFyZW50LCB1bmRlZmluZWQpO1xuICBhc3NlcnQuZXF1YWwoYnVmLmJ1ZmZlciwgYWIpO1xuICBhc3NlcnQuZXF1YWwoYnVmLmxlbmd0aCwgYWIuYnl0ZUxlbmd0aCk7XG4gIGJ1Zi5maWxsKDB4Qyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgTEVOR1RIOyBpKyspIHtcbiAgICBhc3NlcnQuZXF1YWwodWlbaV0sIDB4Qyk7XG4gICAgdWlbaV0gPSAweEY7XG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZltpXSwgMHhGKTtcbiAgfVxuICBidWYud3JpdGVVSW50MzJMRSgweEYwMCwgMCk7XG4gIGJ1Zi53cml0ZVVJbnQzMkJFKDB4QjQ3LCA0KTtcbiAgYnVmLndyaXRlRG91YmxlTEUoMy4xNDE1LCA4KTtcbiAgYXNzZXJ0LmVxdWFsKGR2LmdldFVpbnQzMigwLCB0cnVlKSwgMHhGMDApO1xuICBhc3NlcnQuZXF1YWwoZHYuZ2V0VWludDMyKDQpLCAweEI0Nyk7XG4gIGFzc2VydC5lcXVhbChkdi5nZXRGbG9hdDY0KDgsIHRydWUpLCAzLjE0MTUpO1xuICBhc3NlcnQudGhyb3dzKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEFCKCkge31cbiAgICBBQi5fX3Byb3RvX18gPSBBcnJheUJ1ZmZlcjtcbiAgICBBQi5wcm90b3R5cGUuX19wcm90b19fID0gQXJyYXlCdWZmZXIucHJvdG90eXBlO1xuICAgIG5ldyBCdWZmZXIobmV3IEFCKCkpO1xuICB9LCBUeXBlRXJyb3IpO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
