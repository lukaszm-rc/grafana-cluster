'use strict';

System.register([], function (_export, _context) {
  return {
    setters: [],
    execute: function () {
      /* */
      (function (process) {
        if (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;
        var B = require('../index').Buffer;
        var test = require('tape');
        test('buffer.compare', function (t) {
          var b = new B(1).fill('a');
          var c = new B(1).fill('c');
          var d = new B(2).fill('aa');
          t.equal(b.compare(c), -1);
          t.equal(c.compare(d), 1);
          t.equal(d.compare(b), 1);
          t.equal(b.compare(d), -1);
          t.equal(B.compare(b, c), -1);
          t.equal(B.compare(c, d), 1);
          t.equal(B.compare(d, b), 1);
          t.equal(B.compare(b, d), -1);
          t.end();
        });
        test('buffer.compare argument validation', function (t) {
          t.throws(function () {
            var b = new B(1);
            B.compare(b, 'abc');
          });
          t.throws(function () {
            var b = new B(1);
            B.compare('abc', b);
          });
          t.throws(function () {
            var b = new B(1);
            b.compare('abc');
          });
          t.end();
        });
        test('buffer.equals', function (t) {
          var b = new B(5).fill('abcdf');
          var c = new B(5).fill('abcdf');
          var d = new B(5).fill('abcde');
          var e = new B(6).fill('abcdef');
          t.ok(b.equals(c));
          t.ok(!c.equals(d));
          t.ok(!d.equals(e));
          t.end();
        });
        test('buffer.equals argument validation', function (t) {
          t.throws(function () {
            var b = new B(1);
            b.equals('abc');
          });
          t.end();
        });
      })(require('process'));
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9idWZmZXJAMy42LjAvdGVzdC9jb21wYXJlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxPQUFDLFVBQVMsT0FBVCxFQUFrQjtBQUNqQixZQUFJLFFBQVEsR0FBUixDQUFZLFdBQVosRUFDRixPQUFPLG1CQUFQLEdBQTZCLEtBQTdCLENBREY7QUFFQSxZQUFJLElBQUksUUFBUSxVQUFSLEVBQW9CLE1BQXBCLENBSFM7QUFJakIsWUFBSSxPQUFPLFFBQVEsTUFBUixDQUFQLENBSmE7QUFLakIsYUFBSyxnQkFBTCxFQUF1QixVQUFTLENBQVQsRUFBWTtBQUNqQyxjQUFJLElBQUksSUFBSSxDQUFKLENBQU0sQ0FBTixFQUFTLElBQVQsQ0FBYyxHQUFkLENBQUosQ0FENkI7QUFFakMsY0FBSSxJQUFJLElBQUksQ0FBSixDQUFNLENBQU4sRUFBUyxJQUFULENBQWMsR0FBZCxDQUFKLENBRjZCO0FBR2pDLGNBQUksSUFBSSxJQUFJLENBQUosQ0FBTSxDQUFOLEVBQVMsSUFBVCxDQUFjLElBQWQsQ0FBSixDQUg2QjtBQUlqQyxZQUFFLEtBQUYsQ0FBUSxFQUFFLE9BQUYsQ0FBVSxDQUFWLENBQVIsRUFBc0IsQ0FBQyxDQUFELENBQXRCLENBSmlDO0FBS2pDLFlBQUUsS0FBRixDQUFRLEVBQUUsT0FBRixDQUFVLENBQVYsQ0FBUixFQUFzQixDQUF0QixFQUxpQztBQU1qQyxZQUFFLEtBQUYsQ0FBUSxFQUFFLE9BQUYsQ0FBVSxDQUFWLENBQVIsRUFBc0IsQ0FBdEIsRUFOaUM7QUFPakMsWUFBRSxLQUFGLENBQVEsRUFBRSxPQUFGLENBQVUsQ0FBVixDQUFSLEVBQXNCLENBQUMsQ0FBRCxDQUF0QixDQVBpQztBQVFqQyxZQUFFLEtBQUYsQ0FBUSxFQUFFLE9BQUYsQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUFSLEVBQXlCLENBQUMsQ0FBRCxDQUF6QixDQVJpQztBQVNqQyxZQUFFLEtBQUYsQ0FBUSxFQUFFLE9BQUYsQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUFSLEVBQXlCLENBQXpCLEVBVGlDO0FBVWpDLFlBQUUsS0FBRixDQUFRLEVBQUUsT0FBRixDQUFVLENBQVYsRUFBYSxDQUFiLENBQVIsRUFBeUIsQ0FBekIsRUFWaUM7QUFXakMsWUFBRSxLQUFGLENBQVEsRUFBRSxPQUFGLENBQVUsQ0FBVixFQUFhLENBQWIsQ0FBUixFQUF5QixDQUFDLENBQUQsQ0FBekIsQ0FYaUM7QUFZakMsWUFBRSxHQUFGLEdBWmlDO1NBQVosQ0FBdkIsQ0FMaUI7QUFtQmpCLGFBQUssb0NBQUwsRUFBMkMsVUFBUyxDQUFULEVBQVk7QUFDckQsWUFBRSxNQUFGLENBQVMsWUFBVztBQUNsQixnQkFBSSxJQUFJLElBQUksQ0FBSixDQUFNLENBQU4sQ0FBSixDQURjO0FBRWxCLGNBQUUsT0FBRixDQUFVLENBQVYsRUFBYSxLQUFiLEVBRmtCO1dBQVgsQ0FBVCxDQURxRDtBQUtyRCxZQUFFLE1BQUYsQ0FBUyxZQUFXO0FBQ2xCLGdCQUFJLElBQUksSUFBSSxDQUFKLENBQU0sQ0FBTixDQUFKLENBRGM7QUFFbEIsY0FBRSxPQUFGLENBQVUsS0FBVixFQUFpQixDQUFqQixFQUZrQjtXQUFYLENBQVQsQ0FMcUQ7QUFTckQsWUFBRSxNQUFGLENBQVMsWUFBVztBQUNsQixnQkFBSSxJQUFJLElBQUksQ0FBSixDQUFNLENBQU4sQ0FBSixDQURjO0FBRWxCLGNBQUUsT0FBRixDQUFVLEtBQVYsRUFGa0I7V0FBWCxDQUFULENBVHFEO0FBYXJELFlBQUUsR0FBRixHQWJxRDtTQUFaLENBQTNDLENBbkJpQjtBQWtDakIsYUFBSyxlQUFMLEVBQXNCLFVBQVMsQ0FBVCxFQUFZO0FBQ2hDLGNBQUksSUFBSSxJQUFJLENBQUosQ0FBTSxDQUFOLEVBQVMsSUFBVCxDQUFjLE9BQWQsQ0FBSixDQUQ0QjtBQUVoQyxjQUFJLElBQUksSUFBSSxDQUFKLENBQU0sQ0FBTixFQUFTLElBQVQsQ0FBYyxPQUFkLENBQUosQ0FGNEI7QUFHaEMsY0FBSSxJQUFJLElBQUksQ0FBSixDQUFNLENBQU4sRUFBUyxJQUFULENBQWMsT0FBZCxDQUFKLENBSDRCO0FBSWhDLGNBQUksSUFBSSxJQUFJLENBQUosQ0FBTSxDQUFOLEVBQVMsSUFBVCxDQUFjLFFBQWQsQ0FBSixDQUo0QjtBQUtoQyxZQUFFLEVBQUYsQ0FBSyxFQUFFLE1BQUYsQ0FBUyxDQUFULENBQUwsRUFMZ0M7QUFNaEMsWUFBRSxFQUFGLENBQUssQ0FBQyxFQUFFLE1BQUYsQ0FBUyxDQUFULENBQUQsQ0FBTCxDQU5nQztBQU9oQyxZQUFFLEVBQUYsQ0FBSyxDQUFDLEVBQUUsTUFBRixDQUFTLENBQVQsQ0FBRCxDQUFMLENBUGdDO0FBUWhDLFlBQUUsR0FBRixHQVJnQztTQUFaLENBQXRCLENBbENpQjtBQTRDakIsYUFBSyxtQ0FBTCxFQUEwQyxVQUFTLENBQVQsRUFBWTtBQUNwRCxZQUFFLE1BQUYsQ0FBUyxZQUFXO0FBQ2xCLGdCQUFJLElBQUksSUFBSSxDQUFKLENBQU0sQ0FBTixDQUFKLENBRGM7QUFFbEIsY0FBRSxNQUFGLENBQVMsS0FBVCxFQUZrQjtXQUFYLENBQVQsQ0FEb0Q7QUFLcEQsWUFBRSxHQUFGLEdBTG9EO1NBQVosQ0FBMUMsQ0E1Q2lCO09BQWxCLENBQUQsQ0FtREcsUUFBUSxTQUFSLENBbkRIIiwiZmlsZSI6Im5wbS9idWZmZXJAMy42LjAvdGVzdC9jb21wYXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICBpZiAocHJvY2Vzcy5lbnYuT0JKRUNUX0lNUEwpXG4gICAgZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBmYWxzZTtcbiAgdmFyIEIgPSByZXF1aXJlKCcuLi9pbmRleCcpLkJ1ZmZlcjtcbiAgdmFyIHRlc3QgPSByZXF1aXJlKCd0YXBlJyk7XG4gIHRlc3QoJ2J1ZmZlci5jb21wYXJlJywgZnVuY3Rpb24odCkge1xuICAgIHZhciBiID0gbmV3IEIoMSkuZmlsbCgnYScpO1xuICAgIHZhciBjID0gbmV3IEIoMSkuZmlsbCgnYycpO1xuICAgIHZhciBkID0gbmV3IEIoMikuZmlsbCgnYWEnKTtcbiAgICB0LmVxdWFsKGIuY29tcGFyZShjKSwgLTEpO1xuICAgIHQuZXF1YWwoYy5jb21wYXJlKGQpLCAxKTtcbiAgICB0LmVxdWFsKGQuY29tcGFyZShiKSwgMSk7XG4gICAgdC5lcXVhbChiLmNvbXBhcmUoZCksIC0xKTtcbiAgICB0LmVxdWFsKEIuY29tcGFyZShiLCBjKSwgLTEpO1xuICAgIHQuZXF1YWwoQi5jb21wYXJlKGMsIGQpLCAxKTtcbiAgICB0LmVxdWFsKEIuY29tcGFyZShkLCBiKSwgMSk7XG4gICAgdC5lcXVhbChCLmNvbXBhcmUoYiwgZCksIC0xKTtcbiAgICB0LmVuZCgpO1xuICB9KTtcbiAgdGVzdCgnYnVmZmVyLmNvbXBhcmUgYXJndW1lbnQgdmFsaWRhdGlvbicsIGZ1bmN0aW9uKHQpIHtcbiAgICB0LnRocm93cyhmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiID0gbmV3IEIoMSk7XG4gICAgICBCLmNvbXBhcmUoYiwgJ2FiYycpO1xuICAgIH0pO1xuICAgIHQudGhyb3dzKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGIgPSBuZXcgQigxKTtcbiAgICAgIEIuY29tcGFyZSgnYWJjJywgYik7XG4gICAgfSk7XG4gICAgdC50aHJvd3MoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYiA9IG5ldyBCKDEpO1xuICAgICAgYi5jb21wYXJlKCdhYmMnKTtcbiAgICB9KTtcbiAgICB0LmVuZCgpO1xuICB9KTtcbiAgdGVzdCgnYnVmZmVyLmVxdWFscycsIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgYiA9IG5ldyBCKDUpLmZpbGwoJ2FiY2RmJyk7XG4gICAgdmFyIGMgPSBuZXcgQig1KS5maWxsKCdhYmNkZicpO1xuICAgIHZhciBkID0gbmV3IEIoNSkuZmlsbCgnYWJjZGUnKTtcbiAgICB2YXIgZSA9IG5ldyBCKDYpLmZpbGwoJ2FiY2RlZicpO1xuICAgIHQub2soYi5lcXVhbHMoYykpO1xuICAgIHQub2soIWMuZXF1YWxzKGQpKTtcbiAgICB0Lm9rKCFkLmVxdWFscyhlKSk7XG4gICAgdC5lbmQoKTtcbiAgfSk7XG4gIHRlc3QoJ2J1ZmZlci5lcXVhbHMgYXJndW1lbnQgdmFsaWRhdGlvbicsIGZ1bmN0aW9uKHQpIHtcbiAgICB0LnRocm93cyhmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiID0gbmV3IEIoMSk7XG4gICAgICBiLmVxdWFscygnYWJjJyk7XG4gICAgfSk7XG4gICAgdC5lbmQoKTtcbiAgfSk7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
