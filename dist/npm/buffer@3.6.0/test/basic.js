'use strict';

System.register([], function (_export, _context) {
  return {
    setters: [],
    execute: function () {
      /* */
      (function (process) {
        if (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;
        var B = require('../index').Buffer;
        var test = require('tape');
        test('buf.constructor is Buffer', function (t) {
          var buf = new B([1, 2]);
          t.strictEqual(buf.constructor, B);
          t.end();
        });
        test('instanceof Buffer', function (t) {
          var buf = new B([1, 2]);
          t.ok(buf instanceof B);
          t.end();
        });
        test('convert to Uint8Array in modern browsers', function (t) {
          if (B.TYPED_ARRAY_SUPPORT) {
            var buf = new B([1, 2]);
            var uint8array = new Uint8Array(buf.buffer);
            t.ok(uint8array instanceof Uint8Array);
            t.equal(uint8array[0], 1);
            t.equal(uint8array[1], 2);
          } else {
            t.pass('object impl: skipping test');
          }
          t.end();
        });
        test('indexes from a string', function (t) {
          var buf = new B('abc');
          t.equal(buf[0], 97);
          t.equal(buf[1], 98);
          t.equal(buf[2], 99);
          t.end();
        });
        test('indexes from an array', function (t) {
          var buf = new B([97, 98, 99]);
          t.equal(buf[0], 97);
          t.equal(buf[1], 98);
          t.equal(buf[2], 99);
          t.end();
        });
        test('setting index value should modify buffer contents', function (t) {
          var buf = new B([97, 98, 99]);
          t.equal(buf[2], 99);
          t.equal(buf.toString(), 'abc');
          buf[2] += 10;
          t.equal(buf[2], 109);
          t.equal(buf.toString(), 'abm');
          t.end();
        });
        test('storing negative number should cast to unsigned', function (t) {
          var buf = new B(1);
          if (B.TYPED_ARRAY_SUPPORT) {
            buf[0] = -3;
            t.equal(buf[0], 253);
          }
          buf = new B(1);
          buf.writeInt8(-3, 0);
          t.equal(buf[0], 253);
          t.end();
        });
        test('test that memory is copied from array-like', function (t) {
          if (B.TYPED_ARRAY_SUPPORT) {
            var u = new Uint8Array(4);
            var b = new B(u);
            b[0] = 1;
            b[1] = 2;
            b[2] = 3;
            b[3] = 4;
            t.equal(u[0], 0);
            t.equal(u[1], 0);
            t.equal(u[2], 0);
            t.equal(u[3], 0);
          } else {
            t.pass('object impl: skipping test');
          }
          t.end();
        });
      })(require('process'));
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9idWZmZXJAMy42LjAvdGVzdC9iYXNpYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsT0FBQyxVQUFTLE9BQVQsRUFBa0I7QUFDakIsWUFBSSxRQUFRLEdBQVIsQ0FBWSxXQUFaLEVBQ0YsT0FBTyxtQkFBUCxHQUE2QixLQUE3QixDQURGO0FBRUEsWUFBSSxJQUFJLFFBQVEsVUFBUixFQUFvQixNQUFwQixDQUhTO0FBSWpCLFlBQUksT0FBTyxRQUFRLE1BQVIsQ0FBUCxDQUphO0FBS2pCLGFBQUssMkJBQUwsRUFBa0MsVUFBUyxDQUFULEVBQVk7QUFDNUMsY0FBSSxNQUFNLElBQUksQ0FBSixDQUFNLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBTixDQUFOLENBRHdDO0FBRTVDLFlBQUUsV0FBRixDQUFjLElBQUksV0FBSixFQUFpQixDQUEvQixFQUY0QztBQUc1QyxZQUFFLEdBQUYsR0FINEM7U0FBWixDQUFsQyxDQUxpQjtBQVVqQixhQUFLLG1CQUFMLEVBQTBCLFVBQVMsQ0FBVCxFQUFZO0FBQ3BDLGNBQUksTUFBTSxJQUFJLENBQUosQ0FBTSxDQUFDLENBQUQsRUFBSSxDQUFKLENBQU4sQ0FBTixDQURnQztBQUVwQyxZQUFFLEVBQUYsQ0FBSyxlQUFlLENBQWYsQ0FBTCxDQUZvQztBQUdwQyxZQUFFLEdBQUYsR0FIb0M7U0FBWixDQUExQixDQVZpQjtBQWVqQixhQUFLLDBDQUFMLEVBQWlELFVBQVMsQ0FBVCxFQUFZO0FBQzNELGNBQUksRUFBRSxtQkFBRixFQUF1QjtBQUN6QixnQkFBSSxNQUFNLElBQUksQ0FBSixDQUFNLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBTixDQUFOLENBRHFCO0FBRXpCLGdCQUFJLGFBQWEsSUFBSSxVQUFKLENBQWUsSUFBSSxNQUFKLENBQTVCLENBRnFCO0FBR3pCLGNBQUUsRUFBRixDQUFLLHNCQUFzQixVQUF0QixDQUFMLENBSHlCO0FBSXpCLGNBQUUsS0FBRixDQUFRLFdBQVcsQ0FBWCxDQUFSLEVBQXVCLENBQXZCLEVBSnlCO0FBS3pCLGNBQUUsS0FBRixDQUFRLFdBQVcsQ0FBWCxDQUFSLEVBQXVCLENBQXZCLEVBTHlCO1dBQTNCLE1BTU87QUFDTCxjQUFFLElBQUYsQ0FBTyw0QkFBUCxFQURLO1dBTlA7QUFTQSxZQUFFLEdBQUYsR0FWMkQ7U0FBWixDQUFqRCxDQWZpQjtBQTJCakIsYUFBSyx1QkFBTCxFQUE4QixVQUFTLENBQVQsRUFBWTtBQUN4QyxjQUFJLE1BQU0sSUFBSSxDQUFKLENBQU0sS0FBTixDQUFOLENBRG9DO0FBRXhDLFlBQUUsS0FBRixDQUFRLElBQUksQ0FBSixDQUFSLEVBQWdCLEVBQWhCLEVBRndDO0FBR3hDLFlBQUUsS0FBRixDQUFRLElBQUksQ0FBSixDQUFSLEVBQWdCLEVBQWhCLEVBSHdDO0FBSXhDLFlBQUUsS0FBRixDQUFRLElBQUksQ0FBSixDQUFSLEVBQWdCLEVBQWhCLEVBSndDO0FBS3hDLFlBQUUsR0FBRixHQUx3QztTQUFaLENBQTlCLENBM0JpQjtBQWtDakIsYUFBSyx1QkFBTCxFQUE4QixVQUFTLENBQVQsRUFBWTtBQUN4QyxjQUFJLE1BQU0sSUFBSSxDQUFKLENBQU0sQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLEVBQVQsQ0FBTixDQUFOLENBRG9DO0FBRXhDLFlBQUUsS0FBRixDQUFRLElBQUksQ0FBSixDQUFSLEVBQWdCLEVBQWhCLEVBRndDO0FBR3hDLFlBQUUsS0FBRixDQUFRLElBQUksQ0FBSixDQUFSLEVBQWdCLEVBQWhCLEVBSHdDO0FBSXhDLFlBQUUsS0FBRixDQUFRLElBQUksQ0FBSixDQUFSLEVBQWdCLEVBQWhCLEVBSndDO0FBS3hDLFlBQUUsR0FBRixHQUx3QztTQUFaLENBQTlCLENBbENpQjtBQXlDakIsYUFBSyxtREFBTCxFQUEwRCxVQUFTLENBQVQsRUFBWTtBQUNwRSxjQUFJLE1BQU0sSUFBSSxDQUFKLENBQU0sQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLEVBQVQsQ0FBTixDQUFOLENBRGdFO0FBRXBFLFlBQUUsS0FBRixDQUFRLElBQUksQ0FBSixDQUFSLEVBQWdCLEVBQWhCLEVBRm9FO0FBR3BFLFlBQUUsS0FBRixDQUFRLElBQUksUUFBSixFQUFSLEVBQXdCLEtBQXhCLEVBSG9FO0FBSXBFLGNBQUksQ0FBSixLQUFVLEVBQVYsQ0FKb0U7QUFLcEUsWUFBRSxLQUFGLENBQVEsSUFBSSxDQUFKLENBQVIsRUFBZ0IsR0FBaEIsRUFMb0U7QUFNcEUsWUFBRSxLQUFGLENBQVEsSUFBSSxRQUFKLEVBQVIsRUFBd0IsS0FBeEIsRUFOb0U7QUFPcEUsWUFBRSxHQUFGLEdBUG9FO1NBQVosQ0FBMUQsQ0F6Q2lCO0FBa0RqQixhQUFLLGlEQUFMLEVBQXdELFVBQVMsQ0FBVCxFQUFZO0FBQ2xFLGNBQUksTUFBTSxJQUFJLENBQUosQ0FBTSxDQUFOLENBQU4sQ0FEOEQ7QUFFbEUsY0FBSSxFQUFFLG1CQUFGLEVBQXVCO0FBQ3pCLGdCQUFJLENBQUosSUFBUyxDQUFDLENBQUQsQ0FEZ0I7QUFFekIsY0FBRSxLQUFGLENBQVEsSUFBSSxDQUFKLENBQVIsRUFBZ0IsR0FBaEIsRUFGeUI7V0FBM0I7QUFJQSxnQkFBTSxJQUFJLENBQUosQ0FBTSxDQUFOLENBQU4sQ0FOa0U7QUFPbEUsY0FBSSxTQUFKLENBQWMsQ0FBQyxDQUFELEVBQUksQ0FBbEIsRUFQa0U7QUFRbEUsWUFBRSxLQUFGLENBQVEsSUFBSSxDQUFKLENBQVIsRUFBZ0IsR0FBaEIsRUFSa0U7QUFTbEUsWUFBRSxHQUFGLEdBVGtFO1NBQVosQ0FBeEQsQ0FsRGlCO0FBNkRqQixhQUFLLDRDQUFMLEVBQW1ELFVBQVMsQ0FBVCxFQUFZO0FBQzdELGNBQUksRUFBRSxtQkFBRixFQUF1QjtBQUN6QixnQkFBSSxJQUFJLElBQUksVUFBSixDQUFlLENBQWYsQ0FBSixDQURxQjtBQUV6QixnQkFBSSxJQUFJLElBQUksQ0FBSixDQUFNLENBQU4sQ0FBSixDQUZxQjtBQUd6QixjQUFFLENBQUYsSUFBTyxDQUFQLENBSHlCO0FBSXpCLGNBQUUsQ0FBRixJQUFPLENBQVAsQ0FKeUI7QUFLekIsY0FBRSxDQUFGLElBQU8sQ0FBUCxDQUx5QjtBQU16QixjQUFFLENBQUYsSUFBTyxDQUFQLENBTnlCO0FBT3pCLGNBQUUsS0FBRixDQUFRLEVBQUUsQ0FBRixDQUFSLEVBQWMsQ0FBZCxFQVB5QjtBQVF6QixjQUFFLEtBQUYsQ0FBUSxFQUFFLENBQUYsQ0FBUixFQUFjLENBQWQsRUFSeUI7QUFTekIsY0FBRSxLQUFGLENBQVEsRUFBRSxDQUFGLENBQVIsRUFBYyxDQUFkLEVBVHlCO0FBVXpCLGNBQUUsS0FBRixDQUFRLEVBQUUsQ0FBRixDQUFSLEVBQWMsQ0FBZCxFQVZ5QjtXQUEzQixNQVdPO0FBQ0wsY0FBRSxJQUFGLENBQU8sNEJBQVAsRUFESztXQVhQO0FBY0EsWUFBRSxHQUFGLEdBZjZEO1NBQVosQ0FBbkQsQ0E3RGlCO09BQWxCLENBQUQsQ0E4RUcsUUFBUSxTQUFSLENBOUVIIiwiZmlsZSI6Im5wbS9idWZmZXJAMy42LjAvdGVzdC9iYXNpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk9CSkVDVF9JTVBMKVxuICAgIGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZmFsc2U7XG4gIHZhciBCID0gcmVxdWlyZSgnLi4vaW5kZXgnKS5CdWZmZXI7XG4gIHZhciB0ZXN0ID0gcmVxdWlyZSgndGFwZScpO1xuICB0ZXN0KCdidWYuY29uc3RydWN0b3IgaXMgQnVmZmVyJywgZnVuY3Rpb24odCkge1xuICAgIHZhciBidWYgPSBuZXcgQihbMSwgMl0pO1xuICAgIHQuc3RyaWN0RXF1YWwoYnVmLmNvbnN0cnVjdG9yLCBCKTtcbiAgICB0LmVuZCgpO1xuICB9KTtcbiAgdGVzdCgnaW5zdGFuY2VvZiBCdWZmZXInLCBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGJ1ZiA9IG5ldyBCKFsxLCAyXSk7XG4gICAgdC5vayhidWYgaW5zdGFuY2VvZiBCKTtcbiAgICB0LmVuZCgpO1xuICB9KTtcbiAgdGVzdCgnY29udmVydCB0byBVaW50OEFycmF5IGluIG1vZGVybiBicm93c2VycycsIGZ1bmN0aW9uKHQpIHtcbiAgICBpZiAoQi5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgICB2YXIgYnVmID0gbmV3IEIoWzEsIDJdKTtcbiAgICAgIHZhciB1aW50OGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ1ZmZlcik7XG4gICAgICB0Lm9rKHVpbnQ4YXJyYXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KTtcbiAgICAgIHQuZXF1YWwodWludDhhcnJheVswXSwgMSk7XG4gICAgICB0LmVxdWFsKHVpbnQ4YXJyYXlbMV0sIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0LnBhc3MoJ29iamVjdCBpbXBsOiBza2lwcGluZyB0ZXN0Jyk7XG4gICAgfVxuICAgIHQuZW5kKCk7XG4gIH0pO1xuICB0ZXN0KCdpbmRleGVzIGZyb20gYSBzdHJpbmcnLCBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGJ1ZiA9IG5ldyBCKCdhYmMnKTtcbiAgICB0LmVxdWFsKGJ1ZlswXSwgOTcpO1xuICAgIHQuZXF1YWwoYnVmWzFdLCA5OCk7XG4gICAgdC5lcXVhbChidWZbMl0sIDk5KTtcbiAgICB0LmVuZCgpO1xuICB9KTtcbiAgdGVzdCgnaW5kZXhlcyBmcm9tIGFuIGFycmF5JywgZnVuY3Rpb24odCkge1xuICAgIHZhciBidWYgPSBuZXcgQihbOTcsIDk4LCA5OV0pO1xuICAgIHQuZXF1YWwoYnVmWzBdLCA5Nyk7XG4gICAgdC5lcXVhbChidWZbMV0sIDk4KTtcbiAgICB0LmVxdWFsKGJ1ZlsyXSwgOTkpO1xuICAgIHQuZW5kKCk7XG4gIH0pO1xuICB0ZXN0KCdzZXR0aW5nIGluZGV4IHZhbHVlIHNob3VsZCBtb2RpZnkgYnVmZmVyIGNvbnRlbnRzJywgZnVuY3Rpb24odCkge1xuICAgIHZhciBidWYgPSBuZXcgQihbOTcsIDk4LCA5OV0pO1xuICAgIHQuZXF1YWwoYnVmWzJdLCA5OSk7XG4gICAgdC5lcXVhbChidWYudG9TdHJpbmcoKSwgJ2FiYycpO1xuICAgIGJ1ZlsyXSArPSAxMDtcbiAgICB0LmVxdWFsKGJ1ZlsyXSwgMTA5KTtcbiAgICB0LmVxdWFsKGJ1Zi50b1N0cmluZygpLCAnYWJtJyk7XG4gICAgdC5lbmQoKTtcbiAgfSk7XG4gIHRlc3QoJ3N0b3JpbmcgbmVnYXRpdmUgbnVtYmVyIHNob3VsZCBjYXN0IHRvIHVuc2lnbmVkJywgZnVuY3Rpb24odCkge1xuICAgIHZhciBidWYgPSBuZXcgQigxKTtcbiAgICBpZiAoQi5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgICBidWZbMF0gPSAtMztcbiAgICAgIHQuZXF1YWwoYnVmWzBdLCAyNTMpO1xuICAgIH1cbiAgICBidWYgPSBuZXcgQigxKTtcbiAgICBidWYud3JpdGVJbnQ4KC0zLCAwKTtcbiAgICB0LmVxdWFsKGJ1ZlswXSwgMjUzKTtcbiAgICB0LmVuZCgpO1xuICB9KTtcbiAgdGVzdCgndGVzdCB0aGF0IG1lbW9yeSBpcyBjb3BpZWQgZnJvbSBhcnJheS1saWtlJywgZnVuY3Rpb24odCkge1xuICAgIGlmIChCLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAgIHZhciB1ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICB2YXIgYiA9IG5ldyBCKHUpO1xuICAgICAgYlswXSA9IDE7XG4gICAgICBiWzFdID0gMjtcbiAgICAgIGJbMl0gPSAzO1xuICAgICAgYlszXSA9IDQ7XG4gICAgICB0LmVxdWFsKHVbMF0sIDApO1xuICAgICAgdC5lcXVhbCh1WzFdLCAwKTtcbiAgICAgIHQuZXF1YWwodVsyXSwgMCk7XG4gICAgICB0LmVxdWFsKHVbM10sIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0LnBhc3MoJ29iamVjdCBpbXBsOiBza2lwcGluZyB0ZXN0Jyk7XG4gICAgfVxuICAgIHQuZW5kKCk7XG4gIH0pO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
