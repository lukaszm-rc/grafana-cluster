'use strict';

System.register([], function (_export, _context) {
  return {
    setters: [],
    execute: function () {
      /* */
      (function (process) {
        'use strict';

        if (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;
        var Buffer = require('../../index').Buffer;
        var common = {};
        var assert = require('assert');
        var Buffer = require('../../index').Buffer;
        assert.equal(Buffer.byteLength(32, 'raw'), 2);
        assert.equal(Buffer.byteLength(NaN, 'utf8'), 3);
        assert.equal(Buffer.byteLength({}, 'raws'), 15);
        assert.equal(Buffer.byteLength(), 9);
        assert.equal(Buffer.byteLength('', 'ascii'), 0);
        assert.equal(Buffer.byteLength('', 'HeX'), 0);
        assert.equal(Buffer.byteLength('∑éllö wørl∂!', 'utf-8'), 19);
        assert.equal(Buffer.byteLength('κλμνξο', 'utf8'), 12);
        assert.equal(Buffer.byteLength('挵挶挷挸挹', 'utf-8'), 15);
        assert.equal(Buffer.byteLength('𠝹𠱓𠱸', 'UTF8'), 12);
        assert.equal(Buffer.byteLength('hey there'), 9);
        assert.equal(Buffer.byteLength('𠱸挶νξ#xx :)'), 17);
        assert.equal(Buffer.byteLength('hello world', ''), 11);
        assert.equal(Buffer.byteLength('hello world', 'abc'), 11);
        assert.equal(Buffer.byteLength('ßœ∑≈', 'unkn0wn enc0ding'), 10);
        assert.equal(Buffer.byteLength('aGVsbG8gd29ybGQ=', 'base64'), 11);
        assert.equal(Buffer.byteLength('bm9kZS5qcyByb2NrcyE=', 'base64'), 14);
        assert.equal(Buffer.byteLength('aGkk', 'base64'), 3);
        assert.equal(Buffer.byteLength('bHNrZGZsa3NqZmtsc2xrZmFqc2RsZmtqcw==', 'base64'), 25);
        assert.equal(Buffer.byteLength('aaa=', 'base64'), 2);
        assert.equal(Buffer.byteLength('aaaa==', 'base64'), 3);
        assert.equal(Buffer.byteLength('Il était tué'), 14);
        assert.equal(Buffer.byteLength('Il était tué', 'utf8'), 14);
        assert.equal(Buffer.byteLength('Il était tué', 'ascii'), 12);
        assert.equal(Buffer.byteLength('Il était tué', 'binary'), 12);
        ['ucs2', 'ucs-2', 'utf16le', 'utf-16le'].forEach(function (encoding) {
          assert.equal(24, Buffer.byteLength('Il était tué', encoding));
        });
      })(require('process'));
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9idWZmZXJAMy42LjAvdGVzdC9ub2RlL3Rlc3QtYnVmZmVyLWJ5dGVsZW5ndGguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBLE9BQUMsVUFBUyxPQUFULEVBQWtCO0FBQ2pCLHFCQURpQjs7QUFFakIsWUFBSSxRQUFRLEdBQVIsQ0FBWSxXQUFaLEVBQ0YsT0FBTyxtQkFBUCxHQUE2QixLQUE3QixDQURGO0FBRUEsWUFBSSxTQUFTLFFBQVEsYUFBUixFQUF1QixNQUF2QixDQUpJO0FBS2pCLFlBQUksU0FBUyxFQUFULENBTGE7QUFNakIsWUFBSSxTQUFTLFFBQVEsUUFBUixDQUFULENBTmE7QUFPakIsWUFBSSxTQUFTLFFBQVEsYUFBUixFQUF1QixNQUF2QixDQVBJO0FBUWpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixFQUFsQixFQUFzQixLQUF0QixDQUFiLEVBQTJDLENBQTNDLEVBUmlCO0FBU2pCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixHQUFsQixFQUF1QixNQUF2QixDQUFiLEVBQTZDLENBQTdDLEVBVGlCO0FBVWpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixFQUFsQixFQUFzQixNQUF0QixDQUFiLEVBQTRDLEVBQTVDLEVBVmlCO0FBV2pCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxFQUFiLEVBQWtDLENBQWxDLEVBWGlCO0FBWWpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixFQUFsQixFQUFzQixPQUF0QixDQUFiLEVBQTZDLENBQTdDLEVBWmlCO0FBYWpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixFQUFsQixFQUFzQixLQUF0QixDQUFiLEVBQTJDLENBQTNDLEVBYmlCO0FBY2pCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixjQUFsQixFQUFrQyxPQUFsQyxDQUFiLEVBQXlELEVBQXpELEVBZGlCO0FBZWpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixRQUFsQixFQUE0QixNQUE1QixDQUFiLEVBQWtELEVBQWxELEVBZmlCO0FBZ0JqQixlQUFPLEtBQVAsQ0FBYSxPQUFPLFVBQVAsQ0FBa0IsT0FBbEIsRUFBMkIsT0FBM0IsQ0FBYixFQUFrRCxFQUFsRCxFQWhCaUI7QUFpQmpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixRQUFsQixFQUE0QixNQUE1QixDQUFiLEVBQWtELEVBQWxELEVBakJpQjtBQWtCakIsZUFBTyxLQUFQLENBQWEsT0FBTyxVQUFQLENBQWtCLFdBQWxCLENBQWIsRUFBNkMsQ0FBN0MsRUFsQmlCO0FBbUJqQixlQUFPLEtBQVAsQ0FBYSxPQUFPLFVBQVAsQ0FBa0IsYUFBbEIsQ0FBYixFQUErQyxFQUEvQyxFQW5CaUI7QUFvQmpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixhQUFsQixFQUFpQyxFQUFqQyxDQUFiLEVBQW1ELEVBQW5ELEVBcEJpQjtBQXFCakIsZUFBTyxLQUFQLENBQWEsT0FBTyxVQUFQLENBQWtCLGFBQWxCLEVBQWlDLEtBQWpDLENBQWIsRUFBc0QsRUFBdEQsRUFyQmlCO0FBc0JqQixlQUFPLEtBQVAsQ0FBYSxPQUFPLFVBQVAsQ0FBa0IsTUFBbEIsRUFBMEIsa0JBQTFCLENBQWIsRUFBNEQsRUFBNUQsRUF0QmlCO0FBdUJqQixlQUFPLEtBQVAsQ0FBYSxPQUFPLFVBQVAsQ0FBa0Isa0JBQWxCLEVBQXNDLFFBQXRDLENBQWIsRUFBOEQsRUFBOUQsRUF2QmlCO0FBd0JqQixlQUFPLEtBQVAsQ0FBYSxPQUFPLFVBQVAsQ0FBa0Isc0JBQWxCLEVBQTBDLFFBQTFDLENBQWIsRUFBa0UsRUFBbEUsRUF4QmlCO0FBeUJqQixlQUFPLEtBQVAsQ0FBYSxPQUFPLFVBQVAsQ0FBa0IsTUFBbEIsRUFBMEIsUUFBMUIsQ0FBYixFQUFrRCxDQUFsRCxFQXpCaUI7QUEwQmpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixzQ0FBbEIsRUFBMEQsUUFBMUQsQ0FBYixFQUFrRixFQUFsRixFQTFCaUI7QUEyQmpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixNQUFsQixFQUEwQixRQUExQixDQUFiLEVBQWtELENBQWxELEVBM0JpQjtBQTRCakIsZUFBTyxLQUFQLENBQWEsT0FBTyxVQUFQLENBQWtCLFFBQWxCLEVBQTRCLFFBQTVCLENBQWIsRUFBb0QsQ0FBcEQsRUE1QmlCO0FBNkJqQixlQUFPLEtBQVAsQ0FBYSxPQUFPLFVBQVAsQ0FBa0IsY0FBbEIsQ0FBYixFQUFnRCxFQUFoRCxFQTdCaUI7QUE4QmpCLGVBQU8sS0FBUCxDQUFhLE9BQU8sVUFBUCxDQUFrQixjQUFsQixFQUFrQyxNQUFsQyxDQUFiLEVBQXdELEVBQXhELEVBOUJpQjtBQStCakIsZUFBTyxLQUFQLENBQWEsT0FBTyxVQUFQLENBQWtCLGNBQWxCLEVBQWtDLE9BQWxDLENBQWIsRUFBeUQsRUFBekQsRUEvQmlCO0FBZ0NqQixlQUFPLEtBQVAsQ0FBYSxPQUFPLFVBQVAsQ0FBa0IsY0FBbEIsRUFBa0MsUUFBbEMsQ0FBYixFQUEwRCxFQUExRCxFQWhDaUI7QUFpQ2pCLFNBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsU0FBbEIsRUFBNkIsVUFBN0IsRUFBeUMsT0FBekMsQ0FBaUQsVUFBUyxRQUFULEVBQW1CO0FBQ2xFLGlCQUFPLEtBQVAsQ0FBYSxFQUFiLEVBQWlCLE9BQU8sVUFBUCxDQUFrQixjQUFsQixFQUFrQyxRQUFsQyxDQUFqQixFQURrRTtTQUFuQixDQUFqRCxDQWpDaUI7T0FBbEIsQ0FBRCxDQW9DRyxRQUFRLFNBQVIsQ0FwQ0giLCJmaWxlIjoibnBtL2J1ZmZlckAzLjYuMC90ZXN0L25vZGUvdGVzdC1idWZmZXItYnl0ZWxlbmd0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAocHJvY2Vzcy5lbnYuT0JKRUNUX0lNUEwpXG4gICAgZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBmYWxzZTtcbiAgdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJy4uLy4uL2luZGV4JykuQnVmZmVyO1xuICB2YXIgY29tbW9uID0ge307XG4gIHZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbiAgdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJy4uLy4uL2luZGV4JykuQnVmZmVyO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoMzIsICdyYXcnKSwgMik7XG4gIGFzc2VydC5lcXVhbChCdWZmZXIuYnl0ZUxlbmd0aChOYU4sICd1dGY4JyksIDMpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoe30sICdyYXdzJyksIDE1KTtcbiAgYXNzZXJ0LmVxdWFsKEJ1ZmZlci5ieXRlTGVuZ3RoKCksIDkpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJycsICdhc2NpaScpLCAwKTtcbiAgYXNzZXJ0LmVxdWFsKEJ1ZmZlci5ieXRlTGVuZ3RoKCcnLCAnSGVYJyksIDApO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ+KIkcOpbGzDtiB3w7hybOKIgiEnLCAndXRmLTgnKSwgMTkpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ866zrvOvM69zr7OvycsICd1dGY4JyksIDEyKTtcbiAgYXNzZXJ0LmVxdWFsKEJ1ZmZlci5ieXRlTGVuZ3RoKCfmjLXmjLbmjLfmjLjmjLknLCAndXRmLTgnKSwgMTUpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ/CgnbnwoLGT8KCxuCcsICdVVEY4JyksIDEyKTtcbiAgYXNzZXJ0LmVxdWFsKEJ1ZmZlci5ieXRlTGVuZ3RoKCdoZXkgdGhlcmUnKSwgOSk7XG4gIGFzc2VydC5lcXVhbChCdWZmZXIuYnl0ZUxlbmd0aCgn8KCxuOaMts69zr4jeHggOiknKSwgMTcpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ2hlbGxvIHdvcmxkJywgJycpLCAxMSk7XG4gIGFzc2VydC5lcXVhbChCdWZmZXIuYnl0ZUxlbmd0aCgnaGVsbG8gd29ybGQnLCAnYWJjJyksIDExKTtcbiAgYXNzZXJ0LmVxdWFsKEJ1ZmZlci5ieXRlTGVuZ3RoKCfDn8WT4oiR4omIJywgJ3Vua24wd24gZW5jMGRpbmcnKSwgMTApO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ2FHVnNiRzhnZDI5eWJHUT0nLCAnYmFzZTY0JyksIDExKTtcbiAgYXNzZXJ0LmVxdWFsKEJ1ZmZlci5ieXRlTGVuZ3RoKCdibTlrWlM1cWN5QnliMk5yY3lFPScsICdiYXNlNjQnKSwgMTQpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ2FHa2snLCAnYmFzZTY0JyksIDMpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ2JITnJaR1pzYTNOcVptdHNjMnhyWm1GcWMyUnNabXRxY3c9PScsICdiYXNlNjQnKSwgMjUpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ2FhYT0nLCAnYmFzZTY0JyksIDIpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ2FhYWE9PScsICdiYXNlNjQnKSwgMyk7XG4gIGFzc2VydC5lcXVhbChCdWZmZXIuYnl0ZUxlbmd0aCgnSWwgw6l0YWl0IHR1w6knKSwgMTQpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ0lsIMOpdGFpdCB0dcOpJywgJ3V0ZjgnKSwgMTQpO1xuICBhc3NlcnQuZXF1YWwoQnVmZmVyLmJ5dGVMZW5ndGgoJ0lsIMOpdGFpdCB0dcOpJywgJ2FzY2lpJyksIDEyKTtcbiAgYXNzZXJ0LmVxdWFsKEJ1ZmZlci5ieXRlTGVuZ3RoKCdJbCDDqXRhaXQgdHXDqScsICdiaW5hcnknKSwgMTIpO1xuICBbJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZSddLmZvckVhY2goZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgICBhc3NlcnQuZXF1YWwoMjQsIEJ1ZmZlci5ieXRlTGVuZ3RoKCdJbCDDqXRhaXQgdHXDqScsIGVuY29kaW5nKSk7XG4gIH0pO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
