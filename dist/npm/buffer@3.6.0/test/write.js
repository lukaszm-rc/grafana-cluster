'use strict';

System.register([], function (_export, _context) {
  return {
    setters: [],
    execute: function () {
      /* */
      (function (process) {
        if (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;
        var B = require('../index').Buffer;
        var test = require('tape');
        var isnan = require('is-nan');
        test('buffer.write string should get parsed as number', function (t) {
          var b = new B(64);
          b.writeUInt16LE('1003', 0);
          t.equal(b.readUInt16LE(0), 1003);
          t.end();
        });
        test('buffer.writeUInt8 a fractional number will get Math.floored', function (t) {
          var b = new B(1);
          b.writeInt8(5.5, 0);
          t.equal(b[0], 5);
          t.end();
        });
        test('writeUint8 with a negative number throws', function (t) {
          var buf = new B(1);
          t.throws(function () {
            buf.writeUInt8(-3, 0);
          });
          t.end();
        });
        test('hex of write{Uint,Int}{8,16,32}{LE,BE}', function (t) {
          t.plan(2 * (2 * 2 * 2 + 2));
          var hex = ['03', '0300', '0003', '03000000', '00000003', 'fd', 'fdff', 'fffd', 'fdffffff', 'fffffffd'];
          var reads = [3, 3, 3, 3, 3, -3, -3, -3, -3, -3];
          var xs = ['UInt', 'Int'];
          var ys = [8, 16, 32];
          for (var i = 0; i < xs.length; i++) {
            var x = xs[i];
            for (var j = 0; j < ys.length; j++) {
              var y = ys[j];
              var endianesses = y === 8 ? [''] : ['LE', 'BE'];
              for (var k = 0; k < endianesses.length; k++) {
                var z = endianesses[k];
                var v1 = new B(y / 8);
                var writefn = 'write' + x + y + z;
                var val = x === 'Int' ? -3 : 3;
                v1[writefn](val, 0);
                t.equal(v1.toString('hex'), hex.shift());
                var readfn = 'read' + x + y + z;
                t.equal(v1[readfn](0), reads.shift());
              }
            }
          }
          t.end();
        });
        test('hex of write{Uint,Int}{8,16,32}{LE,BE} with overflow', function (t) {
          if (!B.TYPED_ARRAY_SUPPORT) {
            t.pass('object impl: skipping overflow test');
            t.end();
            return;
          }
          t.plan(3 * (2 * 2 * 2 + 2));
          var hex = ['', '03', '00', '030000', '000000', '', 'fd', 'ff', 'fdffff', 'ffffff'];
          var reads = [undefined, 3, 0, NaN, 0, undefined, 253, -256, 16777213, -256];
          var xs = ['UInt', 'Int'];
          var ys = [8, 16, 32];
          for (var i = 0; i < xs.length; i++) {
            var x = xs[i];
            for (var j = 0; j < ys.length; j++) {
              var y = ys[j];
              var endianesses = y === 8 ? [''] : ['LE', 'BE'];
              for (var k = 0; k < endianesses.length; k++) {
                var z = endianesses[k];
                var v1 = new B(y / 8 - 1);
                var next = new B(4);
                next.writeUInt32BE(0, 0);
                var writefn = 'write' + x + y + z;
                var val = x === 'Int' ? -3 : 3;
                v1[writefn](val, 0, true);
                t.equal(v1.toString('hex'), hex.shift());
                t.equal(next.readUInt32BE(0), 0);
                next.writeInt32BE(~0, 0);
                var readfn = 'read' + x + y + z;
                var r = reads.shift();
                if (isnan(r)) t.pass('equal');else t.equal(v1[readfn](0, true), r);
              }
            }
          }
          t.end();
        });
        test('large values do not imporoperly roll over (ref #80)', function (t) {
          var nums = [-25589992, -633756690, -898146932];
          var out = new B(12);
          out.fill(0);
          out.writeInt32BE(nums[0], 0);
          var newNum = out.readInt32BE(0);
          t.equal(nums[0], newNum);
          out.writeInt32BE(nums[1], 4);
          newNum = out.readInt32BE(4);
          t.equal(nums[1], newNum);
          out.writeInt32BE(nums[2], 8);
          newNum = out.readInt32BE(8);
          t.equal(nums[2], newNum);
          t.end();
        });
      })(require('process'));
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbS9idWZmZXJAMy42LjAvdGVzdC93cml0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsT0FBQyxVQUFTLE9BQVQsRUFBa0I7QUFDakIsWUFBSSxRQUFRLEdBQVIsQ0FBWSxXQUFaLEVBQ0YsT0FBTyxtQkFBUCxHQUE2QixLQUE3QixDQURGO0FBRUEsWUFBSSxJQUFJLFFBQVEsVUFBUixFQUFvQixNQUFwQixDQUhTO0FBSWpCLFlBQUksT0FBTyxRQUFRLE1BQVIsQ0FBUCxDQUphO0FBS2pCLFlBQUksUUFBUSxRQUFRLFFBQVIsQ0FBUixDQUxhO0FBTWpCLGFBQUssaURBQUwsRUFBd0QsVUFBUyxDQUFULEVBQVk7QUFDbEUsY0FBSSxJQUFJLElBQUksQ0FBSixDQUFNLEVBQU4sQ0FBSixDQUQ4RDtBQUVsRSxZQUFFLGFBQUYsQ0FBZ0IsTUFBaEIsRUFBd0IsQ0FBeEIsRUFGa0U7QUFHbEUsWUFBRSxLQUFGLENBQVEsRUFBRSxZQUFGLENBQWUsQ0FBZixDQUFSLEVBQTJCLElBQTNCLEVBSGtFO0FBSWxFLFlBQUUsR0FBRixHQUprRTtTQUFaLENBQXhELENBTmlCO0FBWWpCLGFBQUssNkRBQUwsRUFBb0UsVUFBUyxDQUFULEVBQVk7QUFDOUUsY0FBSSxJQUFJLElBQUksQ0FBSixDQUFNLENBQU4sQ0FBSixDQUQwRTtBQUU5RSxZQUFFLFNBQUYsQ0FBWSxHQUFaLEVBQWlCLENBQWpCLEVBRjhFO0FBRzlFLFlBQUUsS0FBRixDQUFRLEVBQUUsQ0FBRixDQUFSLEVBQWMsQ0FBZCxFQUg4RTtBQUk5RSxZQUFFLEdBQUYsR0FKOEU7U0FBWixDQUFwRSxDQVppQjtBQWtCakIsYUFBSywwQ0FBTCxFQUFpRCxVQUFTLENBQVQsRUFBWTtBQUMzRCxjQUFJLE1BQU0sSUFBSSxDQUFKLENBQU0sQ0FBTixDQUFOLENBRHVEO0FBRTNELFlBQUUsTUFBRixDQUFTLFlBQVc7QUFDbEIsZ0JBQUksVUFBSixDQUFlLENBQUMsQ0FBRCxFQUFJLENBQW5C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akIsRUFOc0U7QUFPdEUsY0FBSSxZQUFKLENBQWlCLEtBQUssQ0FBTCxDQUFqQixFQUEwQixDQUExQixFQVBzRTtBQVF0RSxtQkFBUyxJQUFJLFdBQUosQ0FBZ0IsQ0FBaEIsQ0FBVCxDQVJzRTtBQVN0RSxZQUFFLEtBQUYsQ0FBUSxLQUFLLENBQUwsQ0FBUixFQUFpQixNQUFqQixFQVRzRTtBQVV0RSxjQUFJLFlBQUosQ0FBaUIsS0FBSyxDQUFMLENBQWpCLEVBQTBCLENBQTFCLEVBVnNFO0FBV3RFLG1CQUFTLElBQUksV0FBSixDQUFnQixDQUFoQixDQUFULENBWHNFO0FBWXRFLFlBQUUsS0FBRixDQUFRLEtBQUssQ0FBTCxDQUFSLEVBQWlCLE1BQWpCLEVBWnNFO0FBYXRFLFlBQUUsR0FBRixHQWJzRTtTQUFaLENBQTVELENBeEZpQjtPQUFsQixDQUFELENBdUdHLFFBQVEsU0FBUixDQXZHSCIsImZpbGUiOiJucG0vYnVmZmVyQDMuNi4wL3Rlc3Qvd3JpdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5PQkpFQ1RfSU1QTClcbiAgICBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGZhbHNlO1xuICB2YXIgQiA9IHJlcXVpcmUoJy4uL2luZGV4JykuQnVmZmVyO1xuICB2YXIgdGVzdCA9IHJlcXVpcmUoJ3RhcGUnKTtcbiAgdmFyIGlzbmFuID0gcmVxdWlyZSgnaXMtbmFuJyk7XG4gIHRlc3QoJ2J1ZmZlci53cml0ZSBzdHJpbmcgc2hvdWxkIGdldCBwYXJzZWQgYXMgbnVtYmVyJywgZnVuY3Rpb24odCkge1xuICAgIHZhciBiID0gbmV3IEIoNjQpO1xuICAgIGIud3JpdGVVSW50MTZMRSgnMTAwMycsIDApO1xuICAgIHQuZXF1YWwoYi5yZWFkVUludDE2TEUoMCksIDEwMDMpO1xuICAgIHQuZW5kKCk7XG4gIH0pO1xuICB0ZXN0KCdidWZmZXIud3JpdGVVSW50OCBhIGZyYWN0aW9uYWwgbnVtYmVyIHdpbGwgZ2V0IE1hdGguZmxvb3JlZCcsIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgYiA9IG5ldyBCKDEpO1xuICAgIGIud3JpdGVJbnQ4KDUuNSwgMCk7XG4gICAgdC5lcXVhbChiWzBdLCA1KTtcbiAgICB0LmVuZCgpO1xuICB9KTtcbiAgdGVzdCgnd3JpdGVVaW50OCB3aXRoIGEgbmVnYXRpdmUgbnVtYmVyIHRocm93cycsIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgYnVmID0gbmV3IEIoMSk7XG4gICAgdC50aHJvd3MoZnVuY3Rpb24oKSB7XG4gICAgICBidWYud3JpdGVVSW50OCgtMywgMCk7XG4gICAgfSk7XG4gICAgdC5lbmQoKTtcbiAgfSk7XG4gIHRlc3QoJ2hleCBvZiB3cml0ZXtVaW50LEludH17OCwxNiwzMn17TEUsQkV9JywgZnVuY3Rpb24odCkge1xuICAgIHQucGxhbigyICogKDIgKiAyICogMiArIDIpKTtcbiAgICB2YXIgaGV4ID0gWycwMycsICcwMzAwJywgJzAwMDMnLCAnMDMwMDAwMDAnLCAnMDAwMDAwMDMnLCAnZmQnLCAnZmRmZicsICdmZmZkJywgJ2ZkZmZmZmZmJywgJ2ZmZmZmZmZkJ107XG4gICAgdmFyIHJlYWRzID0gWzMsIDMsIDMsIDMsIDMsIC0zLCAtMywgLTMsIC0zLCAtM107XG4gICAgdmFyIHhzID0gWydVSW50JywgJ0ludCddO1xuICAgIHZhciB5cyA9IFs4LCAxNiwgMzJdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB4ID0geHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciB5ID0geXNbal07XG4gICAgICAgIHZhciBlbmRpYW5lc3NlcyA9ICh5ID09PSA4KSA/IFsnJ10gOiBbJ0xFJywgJ0JFJ107XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgZW5kaWFuZXNzZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICB2YXIgeiA9IGVuZGlhbmVzc2VzW2tdO1xuICAgICAgICAgIHZhciB2MSA9IG5ldyBCKHkgLyA4KTtcbiAgICAgICAgICB2YXIgd3JpdGVmbiA9ICd3cml0ZScgKyB4ICsgeSArIHo7XG4gICAgICAgICAgdmFyIHZhbCA9ICh4ID09PSAnSW50JykgPyAtMyA6IDM7XG4gICAgICAgICAgdjFbd3JpdGVmbl0odmFsLCAwKTtcbiAgICAgICAgICB0LmVxdWFsKHYxLnRvU3RyaW5nKCdoZXgnKSwgaGV4LnNoaWZ0KCkpO1xuICAgICAgICAgIHZhciByZWFkZm4gPSAncmVhZCcgKyB4ICsgeSArIHo7XG4gICAgICAgICAgdC5lcXVhbCh2MVtyZWFkZm5dKDApLCByZWFkcy5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0LmVuZCgpO1xuICB9KTtcbiAgdGVzdCgnaGV4IG9mIHdyaXRle1VpbnQsSW50fXs4LDE2LDMyfXtMRSxCRX0gd2l0aCBvdmVyZmxvdycsIGZ1bmN0aW9uKHQpIHtcbiAgICBpZiAoIUIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgICAgdC5wYXNzKCdvYmplY3QgaW1wbDogc2tpcHBpbmcgb3ZlcmZsb3cgdGVzdCcpO1xuICAgICAgdC5lbmQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdC5wbGFuKDMgKiAoMiAqIDIgKiAyICsgMikpO1xuICAgIHZhciBoZXggPSBbJycsICcwMycsICcwMCcsICcwMzAwMDAnLCAnMDAwMDAwJywgJycsICdmZCcsICdmZicsICdmZGZmZmYnLCAnZmZmZmZmJ107XG4gICAgdmFyIHJlYWRzID0gW3VuZGVmaW5lZCwgMywgMCwgTmFOLCAwLCB1bmRlZmluZWQsIDI1MywgLTI1NiwgMTY3NzcyMTMsIC0yNTZdO1xuICAgIHZhciB4cyA9IFsnVUludCcsICdJbnQnXTtcbiAgICB2YXIgeXMgPSBbOCwgMTYsIDMyXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgeCA9IHhzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB5cy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgeSA9IHlzW2pdO1xuICAgICAgICB2YXIgZW5kaWFuZXNzZXMgPSAoeSA9PT0gOCkgPyBbJyddIDogWydMRScsICdCRSddO1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGVuZGlhbmVzc2VzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgdmFyIHogPSBlbmRpYW5lc3Nlc1trXTtcbiAgICAgICAgICB2YXIgdjEgPSBuZXcgQih5IC8gOCAtIDEpO1xuICAgICAgICAgIHZhciBuZXh0ID0gbmV3IEIoNCk7XG4gICAgICAgICAgbmV4dC53cml0ZVVJbnQzMkJFKDAsIDApO1xuICAgICAgICAgIHZhciB3cml0ZWZuID0gJ3dyaXRlJyArIHggKyB5ICsgejtcbiAgICAgICAgICB2YXIgdmFsID0gKHggPT09ICdJbnQnKSA/IC0zIDogMztcbiAgICAgICAgICB2MVt3cml0ZWZuXSh2YWwsIDAsIHRydWUpO1xuICAgICAgICAgIHQuZXF1YWwodjEudG9TdHJpbmcoJ2hleCcpLCBoZXguc2hpZnQoKSk7XG4gICAgICAgICAgdC5lcXVhbChuZXh0LnJlYWRVSW50MzJCRSgwKSwgMCk7XG4gICAgICAgICAgbmV4dC53cml0ZUludDMyQkUofjAsIDApO1xuICAgICAgICAgIHZhciByZWFkZm4gPSAncmVhZCcgKyB4ICsgeSArIHo7XG4gICAgICAgICAgdmFyIHIgPSByZWFkcy5zaGlmdCgpO1xuICAgICAgICAgIGlmIChpc25hbihyKSlcbiAgICAgICAgICAgIHQucGFzcygnZXF1YWwnKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB0LmVxdWFsKHYxW3JlYWRmbl0oMCwgdHJ1ZSksIHIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHQuZW5kKCk7XG4gIH0pO1xuICB0ZXN0KCdsYXJnZSB2YWx1ZXMgZG8gbm90IGltcG9yb3Blcmx5IHJvbGwgb3ZlciAocmVmICM4MCknLCBmdW5jdGlvbih0KSB7XG4gICAgdmFyIG51bXMgPSBbLTI1NTg5OTkyLCAtNjMzNzU2NjkwLCAtODk4MTQ2OTMyXTtcbiAgICB2YXIgb3V0ID0gbmV3IEIoMTIpO1xuICAgIG91dC5maWxsKDApO1xuICAgIG91dC53cml0ZUludDMyQkUobnVtc1swXSwgMCk7XG4gICAgdmFyIG5ld051bSA9IG91dC5yZWFkSW50MzJCRSgwKTtcbiAgICB0LmVxdWFsKG51bXNbMF0sIG5ld051bSk7XG4gICAgb3V0LndyaXRlSW50MzJCRShudW1zWzFdLCA0KTtcbiAgICBuZXdOdW0gPSBvdXQucmVhZEludDMyQkUoNCk7XG4gICAgdC5lcXVhbChudW1zWzFdLCBuZXdOdW0pO1xuICAgIG91dC53cml0ZUludDMyQkUobnVtc1syXSwgOCk7XG4gICAgbmV3TnVtID0gb3V0LnJlYWRJbnQzMkJFKDgpO1xuICAgIHQuZXF1YWwobnVtc1syXSwgbmV3TnVtKTtcbiAgICB0LmVuZCgpO1xuICB9KTtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
