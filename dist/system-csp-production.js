"use strict";

System.register([], function (_export, _context) {
  var _typeof;

  return {
    setters: [],
    execute: function () {
      _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
      };
      /*
       * SystemJS v0.19.23
       */
      !function () {
        function e() {
          !function (e) {
            function t(e, t) {
              var n = new Error((e.message || e) + "\n	" + t, e.fileName, e.lineNumber);return L || (n.stack = (e.stack || e.message || e) + "\n	" + t), n.originalErr = e.originalErr || e, n;
            }function n(e, n, r) {
              try {
                new Function(e).call(r);
              } catch (a) {
                throw t(a, "Evaluating " + n);
              }
            }function r() {}function a(t) {
              this._loader = { loaderObj: this, loads: [], modules: {}, importPromises: {}, moduleRecords: {} }, D(this, "global", { get: function get() {
                  return e;
                } });
            }function o() {
              a.call(this), this.paths = {};
            }function s(e, t) {
              var n,
                  r = "",
                  a = 0;for (var o in e) {
                var s = o.split("*");if (s.length > 2) throw new TypeError("Only one wildcard in a path is permitted");if (1 == s.length) {
                  if (t == o) return e[o];if (t.substr(0, o.length - 1) == o.substr(0, o.length - 1) && (t.length < o.length || t[o.length - 1] == o[o.length - 1]) && "/" == e[o][e[o].length - 1]) return e[o].substr(0, e[o].length - 1) + (t.length > o.length ? "/" + t.substr(o.length) : "");
                } else {
                  var i = s[0].length;i >= a && t.substr(0, s[0].length) == s[0] && t.substr(t.length - s[1].length) == s[1] && (a = i, r = o, n = t.substr(s[0].length, t.length - s[1].length - s[0].length));
                }
              }var l = e[r];return "string" == typeof n && (l = l.replace("*", n)), l;
            }function i() {}function l() {
              o.call(this), $.call(this);
            }function u() {}function d(e, t) {
              l.prototype[e] = t(l.prototype[e] || function () {});
            }function c(e) {
              $ = e($ || function () {});
            }function f(e) {
              for (var t = [], n = [], r = 0, a = e.length; a > r; r++) {
                var o = C.call(t, e[r]);-1 === o ? (t.push(e[r]), n.push([r])) : n[o].push(r);
              }return { names: t, indices: n };
            }function m(e) {
              var t = {};if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) || "function" == typeof e) if (B) {
                var n;for (var r in e) {
                  (n = Object.getOwnPropertyDescriptor(e, r)) && D(t, r, n);
                }
              } else {
                var a = e && e.hasOwnProperty;for (var r in e) {
                  (!a || e.hasOwnProperty(r)) && (t[r] = e[r]);
                }
              }return t["default"] = e, D(t, "__useDefault", { value: !0 }), t;
            }function p(e, t, n) {
              for (var r in t) {
                n && r in e || (e[r] = t[r]);
              }return e;
            }function h(e, t, n) {
              for (var r in t) {
                var a = t[r];r in e ? a instanceof Array && e[r] instanceof Array ? e[r] = [].concat(n ? a : e[r]).concat(n ? e[r] : a) : "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && "object" == _typeof(e[r]) ? e[r] = p(p({}, e[r]), a, n) : n || (e[r] = a) : e[r] = a;
              }
            }function g(e) {
              this.warnings && "undefined" != typeof console && console.warn;
            }function v(e, t) {
              for (var n = e.split("."); n.length;) {
                t = t[n.shift()];
              }return t;
            }function b() {
              if (V[this.baseURL]) return V[this.baseURL];"/" != this.baseURL[this.baseURL.length - 1] && (this.baseURL += "/");var e = new q(this.baseURL, J);return this.baseURL = e.href, V[this.baseURL] = e;
            }function y(e, t) {
              var n,
                  r = 0;for (var a in e) {
                if (t.substr(0, a.length) == a && (t.length == a.length || "/" == t[a.length])) {
                  var o = a.split("/").length;if (r >= o) continue;n = a, r = o;
                }
              }return n;
            }function w(e) {
              this.set("@system-env", this.newModule({ browser: L, node: !!this._nodeRequire, production: e }));
            }function x(e) {
              return "." != e[0] && "/" != e[0] && !e.match(G);
            }function S(e, t) {
              return t && (t = t.replace(/#/g, "%05")), new q(e, t || Y).href.replace(/%05/g, "#");
            }function E(e, t) {
              return new q(t, b.call(e)).href;
            }function k(e, t) {
              if (!x(e)) return S(e, t);var n = y(this.map, e);if (n && (e = this.map[n] + e.substr(n.length), !x(e))) return S(e);if (this.has(e)) return e;if ("@node/" == e.substr(0, 6) && -1 != Z.indexOf(e.substr(6))) {
                if (!this._nodeRequire) throw new TypeError("Error loading " + e + ". Can only load node core modules in Node.");return this.set(e, this.newModule(m(this._nodeRequire(e.substr(6))))), e;
              }var r = s(this.paths, e);return r && !x(r) ? S(r) : E(this, r || e);
            }function j(e) {
              var t = e.match(Q);return t && "System.register" == e.substr(t[0].length, 15);
            }function P() {
              return { name: null, deps: null, originalIndices: null, declare: null, execute: null, executingRequire: !1, declarative: !1, normalizedDeps: null, groupIndex: null, evaluated: !1, module: null, esModule: null, esmExports: !1 };
            }function O(e) {
              var t,
                  n,
                  r,
                  r = "~" == e[0],
                  a = e.lastIndexOf("|");return -1 != a ? (t = e.substr(a + 1), n = e.substr(r, a - r) || "@system-env") : (t = null, n = e.substr(r)), { module: n, prop: t, negate: r };
            }function R(e) {
              return (e.negate ? "~" : "") + e.module + (e.prop ? "|" + e.prop : "");
            }function _(e, t, n) {
              return this["import"](e.module, t).then(function (t) {
                if (e.prop ? t = v(e.prop, t) : "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t + "" == "Module" && (t = t["default"]), n && "boolean" != typeof t) throw new TypeError("Condition " + R(e) + " did not resolve to a boolean.");return e.negate ? !t : t;
              });
            }function z(e, t) {
              var n = e.match(W);if (!n) return Promise.resolve(e);var r = O(n[0].substr(2, n[0].length - 3));return this.builder ? this.normalize(r.module, t).then(function (t) {
                return r.module = t, e.replace(W, "#{" + R(r) + "}");
              }) : _.call(this, r, t, !1).then(function (n) {
                if ("string" != typeof n) throw new TypeError("The condition value for " + e + " doesn't resolve to a string.");if (-1 != n.indexOf("/")) throw new TypeError("Unabled to interpolate conditional " + e + (t ? " in " + t : "") + "\n	The condition value " + n + ' cannot contain a "/" separator.');return e.replace(W, n);
              });
            }function M(e, t) {
              var n = e.lastIndexOf("#?");if (-1 == n) return Promise.resolve(e);var r = O(e.substr(n + 2));return this.builder ? this.normalize(r.module, t).then(function (t) {
                return r.module = t, e.substr(0, n) + "#?" + R(r);
              }) : _.call(this, r, t, !0).then(function (t) {
                return t ? e.substr(0, n) : "@empty";
              });
            }var I = "undefined" == typeof window && "undefined" != typeof self && "undefined" != typeof importScripts,
                L = "undefined" != typeof window && "undefined" != typeof document,
                T = "undefined" != typeof process && "undefined" != typeof process.platform && !!process.platform.match(/^win/);e.console || (e.console = { assert: function assert() {} });var D,
                C = Array.prototype.indexOf || function (e) {
              for (var t = 0, n = this.length; n > t; t++) {
                if (this[t] === e) return t;
              }return -1;
            };!function () {
              try {
                Object.defineProperty({}, "a", {}) && (D = Object.defineProperty);
              } catch (e) {
                D = function D(e, t, n) {
                  try {
                    e[t] = n.value || n.get.call(e);
                  } catch (r) {}
                };
              }
            }();var J;if ("undefined" != typeof document && document.getElementsByTagName) {
              if (J = document.baseURI, !J) {
                var U = document.getElementsByTagName("base");J = U[0] && U[0].href || window.location.href;
              }J = J.split("#")[0].split("?")[0], J = J.substr(0, J.lastIndexOf("/") + 1);
            } else if ("undefined" != typeof process && process.cwd) J = "file://" + (T ? "/" : "") + process.cwd() + "/", T && (J = J.replace(/\\/g, "/"));else {
              if ("undefined" == typeof location) throw new TypeError("No environment baseURI");J = e.location.href;
            }var q = e.URLPolyfill || e.URL;D(r.prototype, "toString", { value: function value() {
                return "Module";
              } }), function () {
              function o(e) {
                return { status: "loading", name: e, linkSets: [], dependencies: [], metadata: {} };
              }function s(e, t, n) {
                return new Promise(c({ step: n.address ? "fetch" : "locate", loader: e, moduleName: t, moduleMetadata: n && n.metadata || {}, moduleSource: n.source, moduleAddress: n.address }));
              }function i(e, t, n, r) {
                return new Promise(function (a, o) {
                  a(e.loaderObj.normalize(t, n, r));
                }).then(function (t) {
                  var n;if (e.modules[t]) return n = o(t), n.status = "linked", n.module = e.modules[t], n;for (var r = 0, a = e.loads.length; a > r; r++) {
                    if (n = e.loads[r], n.name == t) return n;
                  }return n = o(t), e.loads.push(n), l(e, n), n;
                });
              }function l(e, t) {
                u(e, t, Promise.resolve().then(function () {
                  return e.loaderObj.locate({ name: t.name, metadata: t.metadata });
                }));
              }function u(e, t, n) {
                d(e, t, n.then(function (n) {
                  return "loading" == t.status ? (t.address = n, e.loaderObj.fetch({ name: t.name, metadata: t.metadata, address: n })) : void 0;
                }));
              }function d(t, r, a) {
                a.then(function (a) {
                  return "loading" == r.status ? Promise.resolve(t.loaderObj.translate({ name: r.name, metadata: r.metadata, address: r.address, source: a })).then(function (e) {
                    return r.source = e, t.loaderObj.instantiate({ name: r.name, metadata: r.metadata, address: r.address, source: e });
                  }).then(function (a) {
                    if (void 0 === a) return r.address = r.address || "<Anonymous Module " + ++k + ">", r.isDeclarative = !0, E.call(t.loaderObj, r).then(function (t) {
                      var a = e.System,
                          o = a.register;a.register = function (e, t, n) {
                        "string" != typeof e && (n = t, t = e), r.declare = n, r.depsList = t;
                      }, n(t, r.address, {}), a.register = o;
                    });if ("object" != (typeof a === "undefined" ? "undefined" : _typeof(a))) throw TypeError("Invalid instantiate return value");r.depsList = a.deps || [], r.execute = a.execute, r.isDeclarative = !1;
                  }).then(function () {
                    r.dependencies = [];for (var e = r.depsList, n = [], a = 0, o = e.length; o > a; a++) {
                      (function (e, a) {
                        n.push(i(t, e, r.name, r.address).then(function (t) {
                          if (r.dependencies[a] = { key: e, value: t.name }, "linked" != t.status) for (var n = r.linkSets.concat([]), o = 0, s = n.length; s > o; o++) {
                            m(n[o], t);
                          }
                        }));
                      })(e[a], a);
                    }return Promise.all(n);
                  }).then(function () {
                    r.status = "loaded";for (var e = r.linkSets.concat([]), t = 0, n = e.length; n > t; t++) {
                      h(e[t], r);
                    }
                  }) : void 0;
                })["catch"](function (e) {
                  r.status = "failed", r.exception = e;for (var t = r.linkSets.concat([]), n = 0, a = t.length; a > n; n++) {
                    g(t[n], r, e);
                  }
                });
              }function c(e) {
                return function (t, n) {
                  var r = e.loader,
                      a = e.moduleName,
                      s = e.step;if (r.modules[a]) throw new TypeError('"' + a + '" already exists in the module table');for (var i, c = 0, m = r.loads.length; m > c; c++) {
                    if (r.loads[c].name == a && (i = r.loads[c], "translate" != s || i.source || (i.address = e.moduleAddress, d(r, i, Promise.resolve(e.moduleSource))), i.linkSets.length && i.linkSets[0].loads[0].name == i.name)) return i.linkSets[0].done.then(function () {
                      t(i);
                    });
                  }var p = i || o(a);p.metadata = e.moduleMetadata;var h = f(r, p);r.loads.push(p), t(h.done), "locate" == s ? l(r, p) : "fetch" == s ? u(r, p, Promise.resolve(e.moduleAddress)) : (p.address = e.moduleAddress, d(r, p, Promise.resolve(e.moduleSource)));
                };
              }function f(e, t) {
                var n = { loader: e, loads: [], startingLoad: t, loadingCount: 0 };return n.done = new Promise(function (e, t) {
                  n.resolve = e, n.reject = t;
                }), m(n, t), n;
              }function m(e, t) {
                if ("failed" != t.status) {
                  for (var n = 0, r = e.loads.length; r > n; n++) {
                    if (e.loads[n] == t) return;
                  }e.loads.push(t), t.linkSets.push(e), "loaded" != t.status && e.loadingCount++;for (var a = e.loader, n = 0, r = t.dependencies.length; r > n; n++) {
                    if (t.dependencies[n]) {
                      var o = t.dependencies[n].value;if (!a.modules[o]) for (var s = 0, i = a.loads.length; i > s; s++) {
                        if (a.loads[s].name == o) {
                          m(e, a.loads[s]);break;
                        }
                      }
                    }
                  }
                }
              }function p(e) {
                var t = !1;try {
                  w(e, function (n, r) {
                    g(e, n, r), t = !0;
                  });
                } catch (n) {
                  g(e, null, n), t = !0;
                }return t;
              }function h(e, t) {
                if (e.loadingCount--, !(e.loadingCount > 0)) {
                  var n = e.startingLoad;if (e.loader.loaderObj.execute === !1) {
                    for (var r = [].concat(e.loads), a = 0, o = r.length; o > a; a++) {
                      var t = r[a];t.module = t.isDeclarative ? { name: t.name, module: j({}), evaluated: !0 } : { module: j({}) }, t.status = "linked", v(e.loader, t);
                    }return e.resolve(n);
                  }var s = p(e);s || e.resolve(n);
                }
              }function g(e, n, r) {
                var a = e.loader;e: if (n) {
                  if (e.loads[0].name == n.name) r = t(r, "Error loading " + n.name);else {
                    for (var o = 0; o < e.loads.length; o++) {
                      for (var s = e.loads[o], i = 0; i < s.dependencies.length; i++) {
                        var l = s.dependencies[i];if (l.value == n.name) {
                          r = t(r, "Error loading " + n.name + ' as "' + l.key + '" from ' + s.name);break e;
                        }
                      }
                    }r = t(r, "Error loading " + n.name + " from " + e.loads[0].name);
                  }
                } else r = t(r, "Error linking " + e.loads[0].name);for (var u = e.loads.concat([]), o = 0, d = u.length; d > o; o++) {
                  var n = u[o];a.loaderObj.failed = a.loaderObj.failed || [], -1 == C.call(a.loaderObj.failed, n) && a.loaderObj.failed.push(n);var c = C.call(n.linkSets, e);if (n.linkSets.splice(c, 1), 0 == n.linkSets.length) {
                    var f = C.call(e.loader.loads, n);-1 != f && e.loader.loads.splice(f, 1);
                  }
                }e.reject(r);
              }function v(e, t) {
                if (e.loaderObj.trace) {
                  e.loaderObj.loads || (e.loaderObj.loads = {});var n = {};t.dependencies.forEach(function (e) {
                    n[e.key] = e.value;
                  }), e.loaderObj.loads[t.name] = { name: t.name, deps: t.dependencies.map(function (e) {
                      return e.key;
                    }), depMap: n, address: t.address, metadata: t.metadata, source: t.source, kind: t.isDeclarative ? "declarative" : "dynamic" };
                }t.name && (e.modules[t.name] = t.module);var r = C.call(e.loads, t);-1 != r && e.loads.splice(r, 1);for (var a = 0, o = t.linkSets.length; o > a; a++) {
                  r = C.call(t.linkSets[a].loads, t), -1 != r && t.linkSets[a].loads.splice(r, 1);
                }t.linkSets.splice(0, t.linkSets.length);
              }function b(e, t, n) {
                try {
                  var a = t.execute();
                } catch (o) {
                  return void n(t, o);
                }return a && a instanceof r ? a : void n(t, new TypeError("Execution must define a Module instance"));
              }function y(e, t, n) {
                var r = e._loader.importPromises;return r[t] = n.then(function (e) {
                  return r[t] = void 0, e;
                }, function (e) {
                  throw r[t] = void 0, e;
                });
              }function w(e, t) {
                var n = e.loader;if (e.loads.length) for (var r = e.loads.concat([]), a = 0; a < r.length; a++) {
                  var o = r[a],
                      s = b(e, o, t);if (!s) return;o.module = { name: o.name, module: s }, o.status = "linked", v(n, o);
                }
              }function x(e, t) {
                return t.module.module;
              }function S() {}function E() {
                throw new TypeError("ES6 transpilation is only provided in the dev module loader build.");
              }var k = 0;a.prototype = { constructor: a, define: function define(e, t, n) {
                  if (this._loader.importPromises[e]) throw new TypeError("Module is already loading.");return y(this, e, new Promise(c({ step: "translate", loader: this._loader, moduleName: e, moduleMetadata: n && n.metadata || {}, moduleSource: t, moduleAddress: n && n.address })));
                }, "delete": function _delete(e) {
                  var t = this._loader;return delete t.importPromises[e], delete t.moduleRecords[e], t.modules[e] ? delete t.modules[e] : !1;
                }, get: function get(e) {
                  return this._loader.modules[e] ? (S(this._loader.modules[e], [], this), this._loader.modules[e].module) : void 0;
                }, has: function has(e) {
                  return !!this._loader.modules[e];
                }, "import": function _import(e, t, n) {
                  "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && (t = t.name);var r = this;return Promise.resolve(r.normalize(e, t)).then(function (e) {
                    var t = r._loader;return t.modules[e] ? (S(t.modules[e], [], t._loader), t.modules[e].module) : t.importPromises[e] || y(r, e, s(t, e, {}).then(function (n) {
                      return delete t.importPromises[e], x(t, n);
                    }));
                  });
                }, load: function load(e) {
                  var t = this._loader;return t.modules[e] ? Promise.resolve() : t.importPromises[e] || y(this, e, new Promise(c({ step: "locate", loader: t, moduleName: e, moduleMetadata: {}, moduleSource: void 0, moduleAddress: void 0 })).then(function () {
                    delete t.importPromises[e];
                  }));
                }, module: function module(e, t) {
                  var n = o();n.address = t && t.address;var r = f(this._loader, n),
                      a = Promise.resolve(e),
                      s = this._loader,
                      i = r.done.then(function () {
                    return x(s, n);
                  });return d(s, n, a), i;
                }, newModule: function newModule(e) {
                  if ("object" != (typeof e === "undefined" ? "undefined" : _typeof(e))) throw new TypeError("Expected object");var t = new r(),
                      n = [];if (Object.getOwnPropertyNames && null != e) n = Object.getOwnPropertyNames(e);else for (var a in e) {
                    n.push(a);
                  }for (var o = 0; o < n.length; o++) {
                    (function (n) {
                      D(t, n, { configurable: !1, enumerable: !0, get: function get() {
                          return e[n];
                        }, set: function set() {
                          throw new Error("Module exports cannot be changed externally.");
                        } });
                    })(n[o]);
                  }return Object.freeze && Object.freeze(t), t;
                }, set: function set(e, t) {
                  if (!(t instanceof r)) throw new TypeError("Loader.set(" + e + ", module) must be a module");this._loader.modules[e] = { module: t };
                }, normalize: function normalize(e, t, n) {
                  return e;
                }, locate: function locate(e) {
                  return e.name;
                }, fetch: function fetch(e) {}, translate: function translate(e) {
                  return e.source;
                }, instantiate: function instantiate(e) {} };var j = a.prototype.newModule;
            }();var A;i.prototype = a.prototype, o.prototype = new i();var N;if ("undefined" != typeof XMLHttpRequest) N = function N(e, t, n, r) {
              function a() {
                n(s.responseText);
              }function o() {
                r(new Error("XHR error" + (s.status ? " (" + s.status + (s.statusText ? " " + s.statusText : "") + ")" : "") + " loading " + e));
              }var s = new XMLHttpRequest(),
                  i = !0,
                  l = !1;if (!("withCredentials" in s)) {
                var u = /^(\w+:)?\/\/([^\/]+)/.exec(e);u && (i = u[2] === window.location.host, u[1] && (i &= u[1] === window.location.protocol));
              }i || "undefined" == typeof XDomainRequest || (s = new XDomainRequest(), s.onload = a, s.onerror = o, s.ontimeout = o, s.onprogress = function () {}, s.timeout = 0, l = !0), s.onreadystatechange = function () {
                4 === s.readyState && (0 == s.status ? s.responseText ? a() : (s.addEventListener("error", o), s.addEventListener("load", a)) : 200 === s.status ? a() : o());
              }, s.open("GET", e, !0), s.setRequestHeader && (s.setRequestHeader("Accept", "application/x-es-module, */*"), t && ("string" == typeof t && s.setRequestHeader("Authorization", t), s.withCredentials = !0)), l ? setTimeout(function () {
                s.send();
              }, 0) : s.send(null);
            };else if ("undefined" != typeof require && "undefined" != typeof process) {
              var F;N = function N(e, t, n, r) {
                if ("file:///" != e.substr(0, 8)) throw new Error('Unable to fetch "' + e + '". Only file URLs of the form file:/// allowed running in Node.');return F = F || require("fs"), e = T ? e.replace(/\//g, "\\").substr(8) : e.substr(7), F.readFile(e, function (e, t) {
                  if (e) return r(e);var a = t + "";"﻿" === a[0] && (a = a.substr(1)), n(a);
                });
              };
            } else {
              if ("undefined" == typeof self || "undefined" == typeof self.fetch) throw new TypeError("No environment fetch API available.");N = function N(e, t, n, r) {
                var a = { headers: { Accept: "application/x-es-module, */*" } };t && ("string" == typeof t && (a.headers.Authorization = t), a.credentials = "include"), fetch(e, a).then(function (e) {
                  if (e.ok) return e.text();throw new Error("Fetch error: " + e.status + " " + e.statusText);
                }).then(n, r);
              };
            }o.prototype.fetch = function (e) {
              return new Promise(function (t, n) {
                N(e.address, void 0, t, n);
              });
            }, u.prototype = o.prototype, l.prototype = new u(), l.prototype.constructor = l, l.prototype.instantiate = function () {};var $,
                B = !0;try {
              Object.getOwnPropertyDescriptor({ a: 0 }, "a");
            } catch (H) {
              B = !1;
            }var X = ["main", "format", "defaultExtension", "meta", "map", "basePath", "depCache"],
                G = /^[^\/]+:\/\//,
                V = {},
                Y = new q(J);c(function (e) {
              return function () {
                e.call(this), this.baseURL = J.substr(0, J.lastIndexOf("/") + 1), this.map = {}, this.paths = {}, this.warnings = !1, this.defaultJSExtensions = !1, this.pluginFirst = !1, this.set("@empty", this.newModule({})), w.call(this, !1);
              };
            }), "undefined" == typeof require || "undefined" == typeof process || process.browser || (l.prototype._nodeRequire = require);var Z = ["assert", "buffer", "child_process", "cluster", "console", "constants", "crypto", "dgram", "dns", "domain", "events", "fs", "http", "https", "module", "net", "os", "path", "process", "punycode", "querystring", "readline", "repl", "stream", "string_decoder", "sys", "timers", "tls", "tty", "url", "util", "vm", "zlib"];d("normalize", function (e) {
              return function (e, t, n) {
                var r = k.call(this, e, t);return n || !this.defaultJSExtensions || ".js" == r.substr(r.length - 3, 3) || x(r) || (r += ".js"), r;
              };
            });var K = "undefined" != typeof XMLHttpRequest;d("locate", function (e) {
              return function (t) {
                return Promise.resolve(e.call(this, t)).then(function (e) {
                  return K ? e.replace(/#/g, "%23") : e;
                });
              };
            }), d("fetch", function () {
              return function (e) {
                return new Promise(function (t, n) {
                  N(e.address, e.metadata.authorization, t, n);
                });
              };
            }), d("import", function (e) {
              return function (t, n, r) {
                return n && n.name && g.call(this, "SystemJS.import(name, { name: parentName }) is deprecated for SystemJS.import(name, parentName), while importing " + t + " from " + n.name), e.call(this, t, n, r).then(function (e) {
                  return e.__useDefault ? e["default"] : e;
                });
              };
            }), d("translate", function (e) {
              return function (t) {
                return "detect" == t.metadata.format && (t.metadata.format = void 0), e.call(this, t);
              };
            }), d("instantiate", function (e) {
              return function (e) {
                if ("json" == e.metadata.format && !this.builder) {
                  var t = e.metadata.entry = P();t.deps = [], t.execute = function () {
                    try {
                      return JSON.parse(e.source);
                    } catch (t) {
                      throw new Error("Invalid JSON file " + e.name);
                    }
                  };
                }
              };
            }), l.prototype.env = "development", l.prototype.config = function (e) {
              function t(e) {
                for (var t in e) {
                  if (hasOwnProperty.call(e, t)) return !0;
                }
              }var n = this;if ("warnings" in e && (n.warnings = e.warnings), e.transpilerRuntime === !1 && (n._loader.loadedTranspilerRuntime = !0), e.baseURL) {
                if (t(n.packages) || t(n.meta) || t(n.depCache) || t(n.bundles) || t(n.packageConfigPaths)) throw new TypeError("Incorrect configuration order. The baseURL must be configured with the first SystemJS.config call.");n.baseURL = e.baseURL, b.call(n);
              }if (e.defaultJSExtensions && (n.defaultJSExtensions = e.defaultJSExtensions, g.call(n, "The defaultJSExtensions configuration option is deprecated, use packages configuration instead.")), e.pluginFirst && (n.pluginFirst = e.pluginFirst), e.production && w.call(n, !0), e.paths) for (var r in e.paths) {
                n.paths[r] = e.paths[r];
              }if (e.map) {
                var a = "";for (var r in e.map) {
                  var o = e.map[r];if ("string" != typeof o) {
                    a += (a.length ? ", " : "") + '"' + r + '"';var s = n.defaultJSExtensions && ".js" != r.substr(r.length - 3, 3),
                        i = n.decanonicalize(r);s && ".js" == i.substr(i.length - 3, 3) && (i = i.substr(0, i.length - 3));var l = "";for (var u in n.packages) {
                      i.substr(0, u.length) == u && (!i[u.length] || "/" == i[u.length]) && l.split("/").length < u.split("/").length && (l = u);
                    }l && n.packages[l].main && (i = i.substr(0, i.length - n.packages[l].main.length - 1));var u = n.packages[i] = n.packages[i] || {};u.map = o;
                  } else n.map[r] = o;
                }a && g.call(n, "The map configuration for " + a + ' uses object submaps, which is deprecated in global map.\nUpdate this to use package contextual map with configs like SystemJS.config({ packages: { "' + r + '": { map: {...} } } }).');
              }if (e.packageConfigPaths) {
                for (var d = [], c = 0; c < e.packageConfigPaths.length; c++) {
                  var f = e.packageConfigPaths[c],
                      m = Math.max(f.lastIndexOf("*") + 1, f.lastIndexOf("/")),
                      s = n.defaultJSExtensions && ".js" != f.substr(m - 3, 3),
                      p = n.decanonicalize(f.substr(0, m));s && ".js" == p.substr(p.length - 3, 3) && (p = p.substr(0, p.length - 3)), d[c] = p + f.substr(m);
                }n.packageConfigPaths = d;
              }if (e.bundles) for (var r in e.bundles) {
                for (var v = [], c = 0; c < e.bundles[r].length; c++) {
                  var s = n.defaultJSExtensions && ".js" != e.bundles[r][c].substr(e.bundles[r][c].length - 3, 3),
                      y = n.decanonicalize(e.bundles[r][c]);s && ".js" == y.substr(y.length - 3, 3) && (y = y.substr(0, y.length - 3)), v.push(y);
                }n.bundles[r] = v;
              }if (e.packages) for (var r in e.packages) {
                if (r.match(/^([^\/]+:)?\/\/$/)) throw new TypeError('"' + r + '" is not a valid package name.');var s = n.defaultJSExtensions && ".js" != r.substr(r.length - 3, 3),
                    i = k.call(n, r);s && ".js" == i.substr(i.length - 3, 3) && (i = i.substr(0, i.length - 3)), "/" == i[i.length - 1] && (i = i.substr(0, i.length - 1)), n.packages[i] = n.packages[i] || {}, e.packages[r].modules && (g.call(n, "Package " + r + ' is configured with "modules", which is deprecated as it has been renamed to "meta".'), e.packages[r].meta = e.packages[r].modules, delete e.packages[r].modules);for (var x in e.packages[r]) {
                  -1 == C.call(X, x) && g.call(n, '"' + x + '" is not a valid package configuration option in package ' + r);
                }h(n.packages[i], e.packages[r]);
              }for (var S in e) {
                var o = e[S];if ("baseURL" != S && "map" != S && "packages" != S && "bundles" != S && "paths" != S && "warnings" != S && "packageConfigPaths" != S) if ("object" != (typeof o === "undefined" ? "undefined" : _typeof(o)) || o instanceof Array) n[S] = o;else {
                  n[S] = n[S] || {};for (var r in o) {
                    if ("meta" == S && "*" == r[0]) n[S][r] = o[r];else if ("meta" == S) n[S][k.call(n, r)] = o[r];else if ("depCache" == S) {
                      var s = n.defaultJSExtensions && ".js" != r.substr(r.length - 3, 3),
                          i = n.decanonicalize(r);s && ".js" == i.substr(i.length - 3, 3) && (i = i.substr(0, i.length - 3)), n[S][i] = o[r];
                    } else n[S][r] = o[r];
                  }
                }
              }
            }, function () {
              function e(e, t) {
                var n,
                    r,
                    a = 0;for (var o in e.packages) {
                  t.substr(0, o.length) !== o || t.length !== o.length && "/" !== t[o.length] || (r = o.split("/").length, r > a && (n = o, a = r));
                }return n;
              }function t(e) {
                var t = e.basePath && "." != e.basePath ? e.basePath : "";return t && ("./" == t.substr(0, 2) && (t = t.substr(2)), "/" != t[t.length - 1] && (t += "/")), t;
              }function n(e, t, n, r, a, o) {
                if (!a || "/" == a[a.length - 1] || o || t.defaultExtension === !1) return a;if (a.match(W)) return a;var s = !1;if (t.meta && p(t.meta, a, function (e, t, n) {
                  return 0 == n || e.lastIndexOf("*") != e.length - 1 ? s = !0 : void 0;
                }), !s && e.meta && p(e.meta, n + "/" + r + a, function (e, t, n) {
                  return 0 == n || e.lastIndexOf("*") != e.length - 1 ? s = !0 : void 0;
                }), s) return a;var i = "." + (t.defaultExtension || "js");return a.substr(a.length - i.length) != i ? a + i : a;
              }function r(e, r, o, s, i) {
                if (!s) {
                  if (!r.main) return o + (e.defaultJSExtensions ? ".js" : "");s = "./" == r.main.substr(0, 2) ? r.main.substr(2) : r.main;
                }var l = t(r);if (r.map) {
                  var u = "./" + s,
                      d = y(r.map, u);if (d || (u = "./" + n(e, r, o, l, s, i), u != "./" + s && (d = y(r.map, u))), d) return a(e, r, o, l, d, u, i);
                }return o + "/" + l + n(e, r, o, l, s, i);
              }function a(e, t, r, a, o, s, i) {
                var l = t.map[o];if ("string" != typeof l && (l = o = s), "." == l) l = r;else if ("./" == l.substr(0, 2)) return r + "/" + a + n(e, t, r, a, l.substr(2) + s.substr(o.length), i);return e.normalizeSync(l + s.substr(o.length), r + "/");
              }function o(e, r, a, o, s) {
                if (!o) {
                  if (!r.main) return Promise.resolve(a + (e.defaultJSExtensions ? ".js" : ""));o = "./" == r.main.substr(0, 2) ? r.main.substr(2) : r.main;
                }var l,
                    u,
                    d = t(r);return r.map && (l = "./" + o, u = y(r.map, l), u || (l = "./" + n(e, r, a, d, o, s), l != "./" + o && (u = y(r.map, l)))), (u ? i(e, r, a, d, u, l, s) : Promise.resolve()).then(function (t) {
                  return t ? Promise.resolve(t) : Promise.resolve(a + "/" + d + n(e, r, a, d, o, s));
                });
              }function s(e, t, r, a, o, s, i, l) {
                if ("." == s) s = r;else if ("./" == s.substr(0, 2)) return Promise.resolve(r + "/" + a + n(e, t, r, a, s.substr(2) + i.substr(o.length), l)).then(function (t) {
                  return z.call(e, t, r + "/");
                });return e.normalize(s + i.substr(o.length), r + "/");
              }function i(e, t, n, r, a, o, i) {
                var l = t.map[a];return "string" == typeof l ? s(e, t, n, r, a, l, o, i) : e.builder ? Promise.resolve(n + "/#:" + o) : e["import"](t.map["@env"] || "@system-env", n).then(function (e) {
                  for (var t in l) {
                    var n = "~" == t[0],
                        r = v(n ? t.substr(1) : t, e);if (!n && r || n && !r) return l[t];
                  }
                }).then(function (l) {
                  return l ? s(e, t, n, r, a, l, o, i) : void 0;
                });
              }function u(e) {
                var t = e.lastIndexOf("*"),
                    n = Math.max(t + 1, e.lastIndexOf("/"));return { length: n, regEx: new RegExp("^(" + e.substr(0, n).replace(/\*/g, "[^\\/]+") + ")(\\/|$)"), wildcard: -1 != t };
              }function f(e, t) {
                for (var n, r, a = !1, o = 0; o < e.packageConfigPaths.length; o++) {
                  var s = e.packageConfigPaths[o],
                      i = b[s] || (b[s] = u(s));if (!(t.length < i.length)) {
                    var l = t.match(i.regEx);!l || n && (a && i.wildcard || !(n.length < l[1].length)) || (n = l[1], a = !i.wildcard, r = n + s.substr(i.length));
                  }
                }return n ? { packageName: n, configPath: r } : void 0;
              }function m(e, n, r) {
                var a = e.pluginLoader || e;return (a.meta[r] = a.meta[r] || {}).format = "json", a.load(r).then(function () {
                  pkgConfig = a.get(r);var o = pkgConfig["default"];o.systemjs && (o = o.systemjs), o.modules && (o.meta = o.modules, g.call(e, "Package config file " + r + ' is configured with "modules", which is deprecated as it has been renamed to "meta".'));for (var s in o) {
                    -1 == C.call(X, s) && delete o[s];
                  }var i = e.packages[n] = e.packages[n] || {};h(i, o, !0);var l = t(i);if (o.depCache) {
                    for (var u in o.depCache) {
                      var d;d = "./" == u.substr(0, 2) ? n + "/" + l + u.substr(2) : k.call(e, u), e.depCache[d] = (e.depCache[d] || []).concat(o.depCache[u]);
                    }delete o.depCache;
                  }return i;
                });
              }function p(e, t, n) {
                var r;for (var a in e) {
                  var o = "./" == a.substr(0, 2) ? "./" : "";if (o && (a = a.substr(2)), r = a.indexOf("*"), -1 !== r && a.substr(0, r) == t.substr(0, r) && a.substr(r + 1) == t.substr(t.length - a.length + r + 1) && n(a, e[o + a], a.split("/").length)) return;
                }var s = e[t] || e["./" + t];s && n(s, s, 0);
              }c(function (e) {
                return function () {
                  e.call(this), this.packages = {}, this.packageConfigPaths = [];
                };
              }), l.prototype.normalizeSync = l.prototype.decanonicalize = l.prototype.normalize, d("decanonicalize", function (t) {
                return function (n, r) {
                  if (this.builder) return t.call(this, n, r, !0);var a = t.call(this, n, r);if (!this.defaultJSExtensions) return a;var o = e(this, a),
                      s = this.packages[o],
                      i = s && s.defaultExtension;return void 0 == i && s && s.meta && p(s.meta, a.substr(o), function (e, t, n) {
                    return 0 == n || e.lastIndexOf("*") != e.length - 1 ? (i = !1, !0) : void 0;
                  }), (i === !1 || i && ".js" != i) && ".js" != n.substr(n.length - 3, 3) && ".js" == a.substr(a.length - 3, 3) && (a = a.substr(0, a.length - 3)), a;
                };
              }), d("normalizeSync", function (n) {
                return function (o, s, i) {
                  g.call(this, "SystemJS.normalizeSync has been deprecated for SystemJS.decanonicalize.");var l = this;if (i = i === !0, s) var u = e(l, s) || l.defaultJSExtensions && ".js" == s.substr(s.length - 3, 3) && e(l, s.substr(0, s.length - 3));var d = u && l.packages[u];if (d) {
                    var c = t(d);c && s.substr(u.length + 1, c.length) == c && (s = u + s.substr(u.length + c.length));
                  }if (d && "." != o[0]) {
                    var m = d.map,
                        p = m && y(m, o);if (p && "string" == typeof m[p]) return a(l, d, u, t(d), p, o, i);
                  }var h = l.defaultJSExtensions && ".js" != o.substr(o.length - 3, 3),
                      v = n.call(l, o, s);h && ".js" != v.substr(v.length - 3, 3) && (h = !1), h && (v = v.substr(0, v.length - 3));var b = f(l, v),
                      w = b && b.packageName || e(l, v);if (!w) return v + (h ? ".js" : "");var x = v.substr(w.length + 1);return r(l, l.packages[w] || {}, w, x, i);
                };
              }), d("normalize", function (n) {
                return function (r, a, s) {
                  var l = this;return s = s === !0, Promise.resolve().then(function () {
                    if (a) var n = e(l, a) || l.defaultJSExtensions && ".js" == a.substr(a.length - 3, 3) && e(l, a.substr(0, a.length - 3));var o = n && l.packages[n];if (o) {
                      var u = t(o);u && a.substr(n.length + 1, u.length) == u && (a = n + a.substr(n.length + u.length));
                    }if (o && "./" != r.substr(0, 2)) {
                      var d = o.map,
                          c = d && y(d, r);if (c) return i(l, o, n, u, c, r, s);
                    }return Promise.resolve();
                  }).then(function (t) {
                    if (t) return t;var i = l.defaultJSExtensions && ".js" != r.substr(r.length - 3, 3),
                        u = n.call(l, r, a);i && ".js" != u.substr(u.length - 3, 3) && (i = !1), i && (u = u.substr(0, u.length - 3));var d = f(l, u),
                        c = d && d.packageName || e(l, u);if (!c) return Promise.resolve(u + (i ? ".js" : ""));var p = l.packages[c],
                        h = p && (p.configured || !d);return (h ? Promise.resolve(p) : m(l, c, d.configPath)).then(function (e) {
                      var t = u.substr(c.length + 1);return o(l, e, c, t, s);
                    });
                  });
                };
              });var b = {};d("locate", function (n) {
                return function (r) {
                  var a = this;return Promise.resolve(n.call(this, r)).then(function (n) {
                    var o = e(a, r.name);if (o) {
                      var s = a.packages[o],
                          i = t(s),
                          l = r.name.substr(o.length + i.length + 1);s.format && (r.metadata.format = r.metadata.format || s.format);var u = {};if (s.meta) {
                        var d = 0;p(s.meta, l, function (e, t, n) {
                          n > d && (d = n), h(u, t, n && d > n);
                        }), u.alias && "./" == u.alias.substr(0, 2) && (u.alias = o + u.alias.substr(1)), u.loader && "./" == u.loader.substr(0, 2) && (u.loader = o + u.loader.substr(1)), h(r.metadata, u);
                      }
                    }return n;
                  });
                };
              });
            }(), function () {
              function t() {
                if (o && "interactive" === o.script.readyState) return o.load;for (var e = 0; e < l.length; e++) {
                  if ("interactive" == l[e].script.readyState) return o = l[e], o.load;
                }
              }function n(e, t) {
                return new Promise(function (e, n) {
                  t.metadata.integrity && n(new Error("Subresource integrity checking is not supported in web workers.")), s = t;try {
                    importScripts(t.address);
                  } catch (r) {
                    s = null, n(r);
                  }s = null, t.metadata.entry || n(new Error(t.address + " did not call System.register or AMD define")), e("");
                });
              }if ("undefined" != typeof document) var r = document.getElementsByTagName("head")[0];var a,
                  o,
                  s = null,
                  i = r && function () {
                var e = document.createElement("script"),
                    t = "undefined" != typeof opera && "[object Opera]" === opera.toString();return e.attachEvent && !(e.attachEvent.toString && e.attachEvent.toString().indexOf("[native code") < 0) && !t;
              }(),
                  l = [],
                  u = 0,
                  c = [];d("pushRegister_", function (e) {
                return function (n) {
                  return e.call(this, n) ? !1 : (s ? this.reduceRegister_(s, n) : i ? this.reduceRegister_(t(), n) : u ? c.push(n) : this.reduceRegister_(null, n), !0);
                };
              }), d("fetch", function (t) {
                return function (s) {
                  var d = this;return "json" != s.metadata.format && s.metadata.scriptLoad && (L || I) ? I ? n(d, s) : new Promise(function (t, n) {
                    function f(e) {
                      if (!h.readyState || "loaded" == h.readyState || "complete" == h.readyState) {
                        if (u--, s.metadata.entry || c.length) {
                          if (!i) {
                            for (var r = 0; r < c.length; r++) {
                              d.reduceRegister_(s, c[r]);
                            }c = [];
                          }
                        } else d.reduceRegister_(s);p(), s.metadata.entry || s.metadata.bundle || n(new Error(s.name + " did not call System.register or AMD define. If loading a global module configure the global name via the meta exports property for script injection support.")), t("");
                      }
                    }function m(e) {
                      p(), n(new Error("Unable to load script " + s.address));
                    }function p() {
                      if (e.System = a, h.detachEvent) {
                        h.detachEvent("onreadystatechange", f);for (var t = 0; t < l.length; t++) {
                          l[t].script == h && (o && o.script == h && (o = null), l.splice(t, 1));
                        }
                      } else h.removeEventListener("load", f, !1), h.removeEventListener("error", m, !1);r.removeChild(h);
                    }var h = document.createElement("script");h.async = !0, s.metadata.integrity && h.setAttribute("integrity", s.metadata.integrity), i ? (h.attachEvent("onreadystatechange", f), l.push({ script: h, load: s })) : (h.addEventListener("load", f, !1), h.addEventListener("error", m, !1)), u++, a = e.System, h.src = s.address, r.appendChild(h);
                  }) : t.call(this, s);
                };
              });
            }();var Q = /^(\s*\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\s*\/\/[^\n]*|\s*"[^"]+"\s*;?|\s*'[^']+'\s*;?)*\s*/;!function () {
              function t(e, n, r) {
                if (r[e.groupIndex] = r[e.groupIndex] || [], -1 == C.call(r[e.groupIndex], e)) {
                  r[e.groupIndex].push(e);for (var a = 0, o = e.normalizedDeps.length; o > a; a++) {
                    var s = e.normalizedDeps[a],
                        i = n.defined[s];if (i && !i.evaluated) {
                      var l = e.groupIndex + (i.declarative != e.declarative);if (null === i.groupIndex || i.groupIndex < l) {
                        if (null !== i.groupIndex && (r[i.groupIndex].splice(C.call(r[i.groupIndex], i), 1), 0 == r[i.groupIndex].length)) throw new Error("Mixed dependency cycle detected");i.groupIndex = l;
                      }t(i, n, r);
                    }
                  }
                }
              }function n(e, n) {
                var r = n.defined[e];if (!r.module) {
                  r.groupIndex = 0;var a = [];t(r, n, a);for (var s = !!r.declarative == a.length % 2, l = a.length - 1; l >= 0; l--) {
                    for (var u = a[l], d = 0; d < u.length; d++) {
                      var c = u[d];s ? o(c, n) : i(c, n);
                    }s = !s;
                  }
                }
              }function r() {}function a(e, t) {
                return t[e] || (t[e] = { name: e, dependencies: [], exports: new r(), importers: [] });
              }function o(t, n) {
                if (!t.module) {
                  var r = n._loader.moduleRecords,
                      s = t.module = a(t.name, r),
                      i = t.module.exports,
                      l = t.declare.call(e, function (e, t) {
                    if (s.locked = !0, "object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) for (var n in e) {
                      i[n] = e[n];
                    } else i[e] = t;for (var r = 0, a = s.importers.length; a > r; r++) {
                      var o = s.importers[r];if (!o.locked) {
                        var l = C.call(o.dependencies, s);o.setters[l](i);
                      }
                    }return s.locked = !1, t;
                  }, { id: t.name });if (s.setters = l.setters, s.execute = l.execute, !s.setters || !s.execute) throw new TypeError("Invalid System.register form for " + t.name);for (var u = 0, d = t.normalizedDeps.length; d > u; u++) {
                    var c,
                        f = t.normalizedDeps[u],
                        m = n.defined[f],
                        p = r[f];p ? c = p.exports : m && !m.declarative ? c = m.esModule : m ? (o(m, n), p = m.module, c = p.exports) : c = n.get(f), p && p.importers ? (p.importers.push(s), s.dependencies.push(p)) : s.dependencies.push(null);for (var h = t.originalIndices[u], g = 0, v = h.length; v > g; ++g) {
                      var b = h[g];s.setters[b] && s.setters[b](c);
                    }
                  }
                }
              }function s(e, t) {
                var n,
                    r = t.defined[e];if (r) r.declarative ? u(e, [], t) : r.evaluated || i(r, t), n = r.module.exports;else if (n = t.get(e), !n) throw new Error("Unable to load dependency " + e + ".");return (!r || r.declarative) && n && n.__useDefault ? n["default"] : n;
              }function i(t, n) {
                if (!t.module) {
                  var r = {},
                      a = t.module = { exports: r, id: t.name };if (!t.executingRequire) for (var o = 0, l = t.normalizedDeps.length; l > o; o++) {
                    var u = t.normalizedDeps[o],
                        d = n.defined[u];d && i(d, n);
                  }t.evaluated = !0;var c = t.execute.call(e, function (e) {
                    for (var r = 0, a = t.deps.length; a > r; r++) {
                      if (t.deps[r] == e) return s(t.normalizedDeps[r], n);
                    }var o = n.normalizeSync(e, t.name);if (-1 != C.call(t.normalizedDeps, o)) return s(o, n);
                    throw new Error("Module " + e + " not declared as a dependency of " + t.name);
                  }, r, a);c && (a.exports = c), r = a.exports, r && r.__esModule ? t.esModule = r : t.esmExports && r !== e ? t.esModule = m(r) : t.esModule = { "default": r };
                }
              }function u(t, n, r) {
                var a = r.defined[t];if (a && !a.evaluated && a.declarative) {
                  n.push(t);for (var o = 0, s = a.normalizedDeps.length; s > o; o++) {
                    var i = a.normalizedDeps[o];-1 == C.call(n, i) && (r.defined[i] ? u(i, n, r) : r.get(i));
                  }a.evaluated || (a.evaluated = !0, a.module.execute.call(e));
                }
              }l.prototype.register = function (e, t, n) {
                if ("string" != typeof e && (n = t, t = e, e = null), "boolean" == typeof n) return this.registerDynamic.apply(this, arguments);var r = P();r.name = e && (this.decanonicalize || this.normalize).call(this, e), r.declarative = !0, r.deps = t, r.declare = n, this.pushRegister_({ amd: !1, entry: r });
              }, l.prototype.registerDynamic = function (e, t, n, r) {
                "string" != typeof e && (r = n, n = t, t = e, e = null);var a = P();a.name = e && (this.decanonicalize || this.normalize).call(this, e), a.deps = t, a.execute = r, a.executingRequire = n, this.pushRegister_({ amd: !1, entry: a });
              }, d("reduceRegister_", function () {
                return function (e, t) {
                  if (t) {
                    var n = t.entry,
                        r = e && e.metadata;if (n.name && (n.name in this.defined || (this.defined[n.name] = n), r && (r.bundle = !0)), !n.name || e && n.name == e.name) {
                      if (!r) throw new TypeError("Unexpected anonymous System.register call.");if (r.entry) throw "register" == r.format ? new Error("Multiple anonymous System.register calls in module " + e.name + ". If loading a bundle, ensure all the System.register calls are named.") : new Error("Module " + e.name + " interpreted as " + r.format + " module format, but called System.register.");r.format || (r.format = "register"), r.entry = n;
                    }
                  }
                };
              }), c(function (e) {
                return function () {
                  e.call(this), this.defined = {}, this._loader.moduleRecords = {};
                };
              }), D(r, "toString", { value: function value() {
                  return "Module";
                } }), d("delete", function (e) {
                return function (t) {
                  return delete this._loader.moduleRecords[t], delete this.defined[t], e.call(this, t);
                };
              }), d("fetch", function (e) {
                return function (t) {
                  return this.defined[t.name] ? (t.metadata.format = "defined", "") : (t.metadata.deps = t.metadata.deps || [], e.call(this, t));
                };
              }), d("translate", function (e) {
                return function (t) {
                  return t.metadata.deps = t.metadata.deps || [], Promise.resolve(e.call(this, t)).then(function (e) {
                    return ("register" == t.metadata.format || !t.metadata.format && j(t.source)) && (t.metadata.format = "register"), e;
                  });
                };
              }), d("instantiate", function (e) {
                return function (t) {
                  "detect" == t.metadata.format && (t.metadata.format = void 0), e.call(this, t);var r,
                      a = this;if (a.defined[t.name]) r = a.defined[t.name], r.declarative || (r.deps = r.deps.concat(t.metadata.deps));else if (t.metadata.entry) r = t.metadata.entry, r.deps = r.deps.concat(t.metadata.deps);else if (!(a.builder && t.metadata.bundle || "register" != t.metadata.format && "esm" != t.metadata.format && "es6" != t.metadata.format)) {
                    if ("undefined" != typeof __exec && __exec.call(a, t), !t.metadata.entry && !t.metadata.bundle) throw new Error(t.name + " detected as " + t.metadata.format + " but didn't execute.");r = t.metadata.entry, r && t.metadata.deps && (r.deps = r.deps.concat(t.metadata.deps));
                  }r || (r = P(), r.deps = t.metadata.deps, r.execute = function () {}), a.defined[t.name] = r;var o = f(r.deps);r.deps = o.names, r.originalIndices = o.indices, r.name = t.name, r.esmExports = t.metadata.esmExports !== !1;for (var s = [], i = 0, l = r.deps.length; l > i; i++) {
                    s.push(Promise.resolve(a.normalize(r.deps[i], t.name)));
                  }return Promise.all(s).then(function (e) {
                    return r.normalizedDeps = e, { deps: r.deps, execute: function execute() {
                        return n(t.name, a), u(t.name, [], a), a.defined[t.name] = void 0, a.newModule(r.declarative ? r.module.exports : r.esModule);
                      } };
                  });
                };
              });
            }(), d("reduceRegister_", function (t) {
              return function (n, r) {
                if (r || !n.metadata.exports) return t.call(this, n, r);n.metadata.format = "global";var a = n.metadata.entry = P();a.deps = n.metadata.deps;var o = v(n.metadata.exports, e);a.execute = function () {
                  return o;
                };
              };
            }), c(function (t) {
              return function () {
                function n(t) {
                  if (Object.keys) Object.keys(e).forEach(t);else for (var n in e) {
                    s.call(e, n) && t(n);
                  }
                }function r(t) {
                  n(function (n) {
                    if (-1 == C.call(i, n)) {
                      try {
                        var r = e[n];
                      } catch (a) {
                        i.push(n);
                      }t(n, r);
                    }
                  });
                }var a = this;t.call(a);var o,
                    s = Object.prototype.hasOwnProperty,
                    i = ["_g", "sessionStorage", "localStorage", "clipboardData", "frames", "frameElement", "external", "mozAnimationStartTime", "webkitStorageInfo", "webkitIndexedDB", "mozInnerScreenY", "mozInnerScreenX"];a.set("@@global-helpers", a.newModule({ prepareGlobal: function prepareGlobal(t, n, a) {
                    var s = e.define;e.define = void 0;var i;if (a) {
                      i = {};for (var l in a) {
                        i[l] = e[l], e[l] = a[l];
                      }
                    }return n || (o = {}, r(function (e, t) {
                      o[e] = t;
                    })), function () {
                      var t;if (n) t = v(n, e);else {
                        var a,
                            l,
                            u = {};r(function (e, t) {
                          o[e] !== t && "undefined" != typeof t && (u[e] = t, "undefined" != typeof a ? l || a === t || (l = !0) : a = t);
                        }), t = l ? u : a;
                      }if (i) for (var d in i) {
                        e[d] = i[d];
                      }return e.define = s, t;
                    };
                  } }));
              };
            }), c(function (e) {
              return function () {
                var t = this;if (e.call(t), "undefined" != typeof window && "undefined" != typeof document && window.location) var n = location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "");t.set("@@cjs-helpers", t.newModule({ getPathVars: function getPathVars(e) {
                    var t,
                        r = e.lastIndexOf("!");t = -1 != r ? e.substr(0, r) : e;var a = t.split("/");return a.pop(), a = a.join("/"), "file:///" == t.substr(0, 8) ? (t = t.substr(7), a = a.substr(7), T && (t = t.substr(1), a = a.substr(1))) : n && t.substr(0, n.length) === n && (t = t.substr(n.length), a = a.substr(n.length)), { filename: t, dirname: a };
                  } }));
              };
            }), d("fetch", function (t) {
              return function (n) {
                return n.metadata.scriptLoad && L && (e.define = this.amdDefine), t.call(this, n);
              };
            }), c(function (t) {
              return function () {
                function n(e, t) {
                  e = e.replace(s, "");var n = e.match(u),
                      r = (n[1].split(",")[t] || "require").replace(c, ""),
                      a = f[r] || (f[r] = new RegExp(i + r + l, "g"));a.lastIndex = 0;for (var o, d = []; o = a.exec(e);) {
                    d.push(o[2] || o[3]);
                  }return d;
                }function r(e, t, n, a) {
                  if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && !(e instanceof Array)) return r.apply(null, Array.prototype.splice.call(arguments, 1, arguments.length - 1));if ("string" == typeof e && "function" == typeof t && (e = [e]), !(e instanceof Array)) {
                    if ("string" == typeof e) {
                      var s = o.defaultJSExtensions && ".js" != e.substr(e.length - 3, 3),
                          i = o.decanonicalize(e, a);s && ".js" == i.substr(i.length - 3, 3) && (i = i.substr(0, i.length - 3));var l = o.get(i);if (!l) throw new Error('Module not already loaded loading "' + e + '" from "' + a + '".');return l.__useDefault ? l["default"] : l;
                    }throw new TypeError("Invalid require");
                  }for (var u = [], d = 0; d < e.length; d++) {
                    u.push(o["import"](e[d], a));
                  }Promise.all(u).then(function (e) {
                    t && t.apply(null, e);
                  }, n);
                }function a(t, a, s) {
                  function i(t, n, i) {
                    function c(e, n, a) {
                      return "string" == typeof e && "function" != typeof n ? t(e) : r.call(o, e, n, a, i.id);
                    }for (var f = [], m = 0; m < a.length; m++) {
                      f.push(t(a[m]));
                    }i.uri = i.id, i.config = function () {}, -1 != d && f.splice(d, 0, i), -1 != u && f.splice(u, 0, n), -1 != l && (c.toUrl = function (e) {
                      var t = o.defaultJSExtensions && ".js" != e.substr(e.length - 3, 3),
                          n = o.decanonicalize(e, i.id);return t && ".js" == n.substr(n.length - 3, 3) && (n = n.substr(0, n.length - 3)), n;
                    }, f.splice(l, 0, c));var p = e.require;e.require = r;var h = s.apply(-1 == u ? e : n, f);return e.require = p, "undefined" == typeof h && i && (h = i.exports), "undefined" != typeof h ? h : void 0;
                  }"string" != typeof t && (s = a, a = t, t = null), a instanceof Array || (s = a, a = ["require", "exports", "module"].splice(0, s.length)), "function" != typeof s && (s = function (e) {
                    return function () {
                      return e;
                    };
                  }(s)), void 0 === a[a.length - 1] && a.pop();var l, u, d;-1 != (l = C.call(a, "require")) && (a.splice(l, 1), t || (a = a.concat(n(s.toString(), l)))), -1 != (u = C.call(a, "exports")) && a.splice(u, 1), -1 != (d = C.call(a, "module")) && a.splice(d, 1);var c = P();c.name = t && (o.decanonicalize || o.normalize).call(o, t), c.deps = a, c.execute = i, o.pushRegister_({ amd: !0, entry: c });
                }var o = this;t.call(this);var s = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,
                    i = "(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",
                    l = "\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",
                    u = /\(([^\)]*)\)/,
                    c = /^\s+|\s+$/g,
                    f = {};a.amd = {}, d("reduceRegister_", function (e) {
                  return function (t, n) {
                    if (!n || !n.amd) return e.call(this, t, n);var r = t && t.metadata,
                        a = n.entry;if (r && (r.format = "amd"), a.name) r && (r.entry || r.bundle ? r.entry && r.entry.name && (r.entry = void 0) : r.entry = a, r.bundle = !0), a.name in this.defined || (this.defined[a.name] = a);else {
                      if (!r) throw new TypeError("Unexpected anonymous AMD define.");if (r.entry && !r.entry.name) throw new Error("Multiple anonymous defines in module " + t.name);r.entry = a;
                    }
                  };
                }), o.amdDefine = a, o.amdRequire = r;
              };
            }), function () {
              function e(e, t) {
                if (t) {
                  var n;if (e.pluginFirst) {
                    if (-1 != (n = t.lastIndexOf("!"))) return t.substr(n + 1);
                  } else if (-1 != (n = t.indexOf("!"))) return t.substr(0, n);return t;
                }
              }function t(e, t) {
                var n,
                    r,
                    a = t.lastIndexOf("!");return -1 != a ? (e.pluginFirst ? (n = t.substr(a + 1), r = t.substr(0, a)) : (n = t.substr(0, a), r = t.substr(a + 1) || n.substr(n.lastIndexOf(".") + 1)), { argument: n, plugin: r }) : void 0;
              }function n(e, t, n, r) {
                return r && ".js" == t.substr(t.length - 3, 3) && (t = t.substr(0, t.length - 3)), e.pluginFirst ? n + "!" + t : t + "!" + n;
              }function r(e, t) {
                return e.defaultJSExtensions && ".js" != t.substr(t.length - 3, 3);
              }function a(a) {
                return function (o, s, i) {
                  var l = this;s = e(this, s);var u = t(l, o);if (!u) return a.call(this, o, s, i);var d = l.normalizeSync(u.argument, s, !0),
                      c = l.normalizeSync(u.plugin, s, !0);return n(l, d, c, r(l, u.argument));
                };
              }d("decanonicalize", a), d("normalizeSync", a), d("normalize", function (a) {
                return function (o, s, i) {
                  var l = this;s = e(this, s);var u = t(l, o);return u ? Promise.all([l.normalize(u.argument, s, !0), l.normalize(u.plugin, s)]).then(function (e) {
                    return n(l, e[0], e[1], r(l, u.argument));
                  }) : a.call(l, o, s, i);
                };
              }), d("locate", function (e) {
                return function (t) {
                  var n,
                      r = this,
                      a = t.name;return r.pluginFirst ? -1 != (n = a.indexOf("!")) && (t.metadata.loader = a.substr(0, n), t.name = a.substr(n + 1)) : -1 != (n = a.lastIndexOf("!")) && (t.metadata.loader = a.substr(n + 1), t.name = a.substr(0, n)), e.call(r, t).then(function (e) {
                    var n = t.metadata.loader;if (!n) return e;if (r.defined && r.defined[a]) return e;var o = r.pluginLoader || r;return o["import"](n).then(function (n) {
                      return t.metadata.loaderModule = n, t.address = e, n.locate ? n.locate.call(r, t) : e;
                    });
                  });
                };
              }), d("fetch", function (e) {
                return function (t) {
                  var n = this;return t.metadata.loaderModule && t.metadata.loaderModule.fetch && "defined" != t.metadata.format ? (t.metadata.scriptLoad = !1, t.metadata.loaderModule.fetch.call(n, t, function (t) {
                    return e.call(n, t);
                  })) : e.call(n, t);
                };
              }), d("translate", function (e) {
                return function (t) {
                  var n = this;return t.metadata.loaderModule && t.metadata.loaderModule.translate && "defined" != t.metadata.format ? Promise.resolve(t.metadata.loaderModule.translate.call(n, t)).then(function (r) {
                    var a = t.metadata.sourceMap;if (a) {
                      if ("object" != (typeof a === "undefined" ? "undefined" : _typeof(a))) throw new Error("load.metadata.sourceMap must be set to an object.");var o = t.name.split("!")[0];a.file = o + "!transpiled", (!a.sources || a.sources.length <= 1) && (a.sources = [o]);
                    }return "string" == typeof r ? t.source = r : g.call(this, "Plugin " + t.metadata.loader + " should return the source in translate, instead of setting load.source directly. This support will be deprecated."), e.call(n, t);
                  }) : e.call(n, t);
                };
              }), d("instantiate", function (e) {
                return function (t) {
                  var n = this;return t.metadata.loaderModule && t.metadata.loaderModule.instantiate && !n.builder && "defined" != t.metadata.format ? Promise.resolve(t.metadata.loaderModule.instantiate.call(n, t)).then(function (r) {
                    return t.metadata.entry = P(), t.metadata.entry.execute = function () {
                      return r;
                    }, t.metadata.entry.deps = t.metadata.deps, t.metadata.format = "defined", e.call(n, t);
                  }) : e.call(n, t);
                };
              });
            }();var W = /#\{[^\}]+\}/;d("normalize", function (e) {
              return function (t, n, r) {
                var a = this;return M.call(a, t, n).then(function (t) {
                  return e.call(a, t, n, r);
                }).then(function (e) {
                  return z.call(a, e, n);
                });
              };
            }), function () {
              d("fetch", function (e) {
                return function (t) {
                  var n = t.metadata.alias,
                      r = t.metadata.deps || [];if (n) {
                    t.metadata.format = "defined";var a = P();return this.defined[t.name] = a, a.declarative = !0, a.deps = r.concat([n]), a.declare = function (e) {
                      return { setters: [function (t) {
                          for (var n in t) {
                            e(n, t[n]);
                          }t.__useDefault && (a.module.exports.__useDefault = !0);
                        }], execute: function execute() {} };
                    }, "";
                  }return e.call(this, t);
                };
              });
            }(), function () {
              function e(e, t, n) {
                for (var r, a = t.split("."); a.length > 1;) {
                  r = a.shift(), e = e[r] = e[r] || {};
                }r = a.shift(), r in e || (e[r] = n);
              }c(function (e) {
                return function () {
                  this.meta = {}, e.call(this);
                };
              }), d("locate", function (e) {
                return function (t) {
                  var n,
                      r = this.meta,
                      a = t.name,
                      o = 0;for (var s in r) {
                    if (n = s.indexOf("*"), -1 !== n && s.substr(0, n) === a.substr(0, n) && s.substr(n + 1) === a.substr(a.length - s.length + n + 1)) {
                      var i = s.split("/").length;i > o && (o = i), h(t.metadata, r[s], o != i);
                    }
                  }return r[a] && h(t.metadata, r[a]), e.call(this, t);
                };
              });var t = /^(\s*\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\s*\/\/[^\n]*|\s*"[^"]+"\s*;?|\s*'[^']+'\s*;?)+/,
                  n = /\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\/\/[^\n]*|"[^"]+"\s*;?|'[^']+'\s*;?/g;d("translate", function (r) {
                return function (a) {
                  var o = a.source.match(t);if (o) for (var s = o[0].match(n), i = 0; i < s.length; i++) {
                    var l = s[i],
                        u = l.length,
                        d = l.substr(0, 1);if (";" == l.substr(u - 1, 1) && u--, '"' == d || "'" == d) {
                      var c = l.substr(1, l.length - 3),
                          f = c.substr(0, c.indexOf(" "));if (f) {
                        var m = c.substr(f.length + 1, c.length - f.length - 1);"[]" == f.substr(f.length - 2, 2) ? (f = f.substr(0, f.length - 2), a.metadata[f] = a.metadata[f] || [], a.metadata[f].push(m)) : a.metadata[f] instanceof Array ? (g.call(this, "Module " + a.name + ' contains deprecated "deps ' + m + '" meta syntax.\nThis should be updated to "deps[] ' + m + '" for pushing to array meta.'), a.metadata[f].push(m)) : e(a.metadata, f, m);
                      } else a.metadata[c] = !0;
                    }
                  }return r.call(this, a);
                };
              });
            }(), function () {
              c(function (e) {
                return function () {
                  e.call(this), this.bundles = {}, this._loader.loadedBundles = {};
                };
              }), d("locate", function (e) {
                return function (t) {
                  var n = this,
                      r = !1;if (!(t.name in n.defined)) for (var a in n.bundles) {
                    for (var o = 0; o < n.bundles[a].length; o++) {
                      var s = n.bundles[a][o];if (s == t.name) {
                        r = !0;break;
                      }if (-1 != s.indexOf("*")) {
                        var i = s.split("*");if (2 != i.length) {
                          n.bundles[a].splice(o--, 1);continue;
                        }if (t.name.substring(0, i[0].length) == i[0] && t.name.substr(t.name.length - i[1].length, i[1].length) == i[1] && -1 == t.name.substr(i[0].length, t.name.length - i[1].length - i[0].length).indexOf("/")) {
                          r = !0;break;
                        }
                      }
                    }if (r) return n["import"](a).then(function () {
                      return e.call(n, t);
                    });
                  }return e.call(n, t);
                };
              });
            }(), function () {
              c(function (e) {
                return function () {
                  e.call(this), this.depCache = {};
                };
              }), d("locate", function (e) {
                return function (t) {
                  var n = this,
                      r = n.depCache[t.name];if (r) for (var a = 0; a < r.length; a++) {
                    n["import"](r[a], t.name);
                  }return e.call(n, t);
                };
              });
            }(), c(function (e) {
              return function () {
                e.apply(this, arguments);
              };
            }), d("fetch", function (e) {
              return function (t) {
                return t.metadata.scriptLoad = !0, e.call(this, t);
              };
            }), A = new l(), e.SystemJS = A, A.version = "0.19.23 CSP", "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && (module.exports = a), e.Reflect = e.Reflect || {}, e.Reflect.Loader = e.Reflect.Loader || a, e.Reflect.global = e.Reflect.global || e, e.LoaderPolyfill = a, A || (A = new o(), A.constructor = o), "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && (module.exports = A), e.System = A;
          }("undefined" != typeof self ? self : global);
        }try {
          var t = "undefined" != typeof URLPolyfill || "test:" == new URL("test:///").protocol;
        } catch (n) {}if ("undefined" != typeof Promise && t) e();else if ("undefined" != typeof document) {
          var r = document.getElementsByTagName("script");$__curScript = r[r.length - 1];var a = $__curScript.src,
              o = a.substr(0, a.lastIndexOf("/") + 1);window.systemJSBootstrap = e, document.write('<script type="text/javascript" src="' + o + 'system-polyfills.js"></script>');
        } else if ("undefined" != typeof importScripts) {
          var o = "";try {
            throw new Error("_");
          } catch (n) {
            n.stack.replace(/(?:at|@).*(http.+):[\d]+:[\d]+/, function (e, t) {
              o = t.replace(/\/[^\/]*$/, "/");
            });
          }importScripts(o + "system-polyfills.js"), e();
        } else e();
      }();
    }
  };
});
//# sourceMappingURL=data:application/json;base64,
